// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Grpc/rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lnrpc {

  /// <summary>Holder for reflection information generated from Grpc/rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for Grpc/rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5HcnBjL3JwYy5wcm90bxIFbG5ycGMiogEKBFV0eG8SKAoMYWRkcmVzc190",
            "eXBlGAEgASgOMhIubG5ycGMuQWRkcmVzc1R5cGUSDwoHYWRkcmVzcxgCIAEo",
            "CRISCgphbW91bnRfc2F0GAMgASgDEhEKCXBrX3NjcmlwdBgEIAEoCRIhCghv",
            "dXRwb2ludBgFIAEoCzIPLmxucnBjLk91dFBvaW50EhUKDWNvbmZpcm1hdGlv",
            "bnMYBiABKAMi1gEKC1RyYW5zYWN0aW9uEg8KB3R4X2hhc2gYASABKAkSDgoG",
            "YW1vdW50GAIgASgDEhkKEW51bV9jb25maXJtYXRpb25zGAMgASgFEhIKCmJs",
            "b2NrX2hhc2gYBCABKAkSFAoMYmxvY2tfaGVpZ2h0GAUgASgFEhIKCnRpbWVf",
            "c3RhbXAYBiABKAMSEgoKdG90YWxfZmVlcxgHIAEoAxIWCg5kZXN0X2FkZHJl",
            "c3NlcxgIIAMoCRISCgpyYXdfdHhfaGV4GAkgASgJEg0KBWxhYmVsGAogASgJ",
            "IlMKFkdldFRyYW5zYWN0aW9uc1JlcXVlc3QSFAoMc3RhcnRfaGVpZ2h0GAEg",
            "ASgFEhIKCmVuZF9oZWlnaHQYAiABKAUSDwoHYWNjb3VudBgDIAEoCSI+ChJU",
            "cmFuc2FjdGlvbkRldGFpbHMSKAoMdHJhbnNhY3Rpb25zGAEgAygLMhIubG5y",
            "cGMuVHJhbnNhY3Rpb24iTQoIRmVlTGltaXQSDwoFZml4ZWQYASABKANIABIU",
            "CgpmaXhlZF9tc2F0GAMgASgDSAASEQoHcGVyY2VudBgCIAEoA0gAQgcKBWxp",
            "bWl0IooECgtTZW5kUmVxdWVzdBIMCgRkZXN0GAEgASgMEhcKC2Rlc3Rfc3Ry",
            "aW5nGAIgASgJQgIYARILCgNhbXQYAyABKAMSEAoIYW10X21zYXQYDCABKAMS",
            "FAoMcGF5bWVudF9oYXNoGAQgASgMEh8KE3BheW1lbnRfaGFzaF9zdHJpbmcY",
            "BSABKAlCAhgBEhcKD3BheW1lbnRfcmVxdWVzdBgGIAEoCRIYChBmaW5hbF9j",
            "bHR2X2RlbHRhGAcgASgFEiIKCWZlZV9saW1pdBgIIAEoCzIPLmxucnBjLkZl",
            "ZUxpbWl0EhwKEG91dGdvaW5nX2NoYW5faWQYCSABKARCAjABEhcKD2xhc3Rf",
            "aG9wX3B1YmtleRgNIAEoDBISCgpjbHR2X2xpbWl0GAogASgNEkYKE2Rlc3Rf",
            "Y3VzdG9tX3JlY29yZHMYCyADKAsyKS5sbnJwYy5TZW5kUmVxdWVzdC5EZXN0",
            "Q3VzdG9tUmVjb3Jkc0VudHJ5EhoKEmFsbG93X3NlbGZfcGF5bWVudBgOIAEo",
            "CBIoCg1kZXN0X2ZlYXR1cmVzGA8gAygOMhEubG5ycGMuRmVhdHVyZUJpdBIU",
            "CgxwYXltZW50X2FkZHIYECABKAwaOAoWRGVzdEN1c3RvbVJlY29yZHNFbnRy",
            "eRILCgNrZXkYASABKAQSDQoFdmFsdWUYAiABKAw6AjgBInoKDFNlbmRSZXNw",
            "b25zZRIVCg1wYXltZW50X2Vycm9yGAEgASgJEhgKEHBheW1lbnRfcHJlaW1h",
            "Z2UYAiABKAwSIwoNcGF5bWVudF9yb3V0ZRgDIAEoCzIMLmxucnBjLlJvdXRl",
            "EhQKDHBheW1lbnRfaGFzaBgEIAEoDCJuChJTZW5kVG9Sb3V0ZVJlcXVlc3QS",
            "FAoMcGF5bWVudF9oYXNoGAEgASgMEh8KE3BheW1lbnRfaGFzaF9zdHJpbmcY",
            "AiABKAlCAhgBEhsKBXJvdXRlGAQgASgLMgwubG5ycGMuUm91dGVKBAgDEAQi",
            "tQIKFENoYW5uZWxBY2NlcHRSZXF1ZXN0EhMKC25vZGVfcHVia2V5GAEgASgM",
            "EhIKCmNoYWluX2hhc2gYAiABKAwSFwoPcGVuZGluZ19jaGFuX2lkGAMgASgM",
            "EhMKC2Z1bmRpbmdfYW10GAQgASgEEhAKCHB1c2hfYW10GAUgASgEEhIKCmR1",
            "c3RfbGltaXQYBiABKAQSGwoTbWF4X3ZhbHVlX2luX2ZsaWdodBgHIAEoBBIX",
            "Cg9jaGFubmVsX3Jlc2VydmUYCCABKAQSEAoIbWluX2h0bGMYCSABKAQSEgoK",
            "ZmVlX3Blcl9rdxgKIAEoBBIRCgljc3ZfZGVsYXkYCyABKA0SGgoSbWF4X2Fj",
            "Y2VwdGVkX2h0bGNzGAwgASgNEhUKDWNoYW5uZWxfZmxhZ3MYDSABKA0i9AEK",
            "FUNoYW5uZWxBY2NlcHRSZXNwb25zZRIOCgZhY2NlcHQYASABKAgSFwoPcGVu",
            "ZGluZ19jaGFuX2lkGAIgASgMEg0KBWVycm9yGAMgASgJEhgKEHVwZnJvbnRf",
            "c2h1dGRvd24YBCABKAkSEQoJY3N2X2RlbGF5GAUgASgNEhMKC3Jlc2VydmVf",
            "c2F0GAYgASgEEhoKEmluX2ZsaWdodF9tYXhfbXNhdBgHIAEoBBIWCg5tYXhf",
            "aHRsY19jb3VudBgIIAEoDRITCgttaW5faHRsY19pbhgJIAEoBBIYChBtaW5f",
            "YWNjZXB0X2RlcHRoGAogASgNIm4KDENoYW5uZWxQb2ludBIcChJmdW5kaW5n",
            "X3R4aWRfYnl0ZXMYASABKAxIABIaChBmdW5kaW5nX3R4aWRfc3RyGAIgASgJ",
            "SAASFAoMb3V0cHV0X2luZGV4GAMgASgNQg4KDGZ1bmRpbmdfdHhpZCJGCghP",
            "dXRQb2ludBISCgp0eGlkX2J5dGVzGAEgASgMEhAKCHR4aWRfc3RyGAIgASgJ",
            "EhQKDG91dHB1dF9pbmRleBgDIAEoDSIwChBMaWdodG5pbmdBZGRyZXNzEg4K",
            "BnB1YmtleRgBIAEoCRIMCgRob3N0GAIgASgJIs8BChJFc3RpbWF0ZUZlZVJl",
            "cXVlc3QSQQoMQWRkclRvQW1vdW50GAEgAygLMisubG5ycGMuRXN0aW1hdGVG",
            "ZWVSZXF1ZXN0LkFkZHJUb0Ftb3VudEVudHJ5EhMKC3RhcmdldF9jb25mGAIg",
            "ASgFEhEKCW1pbl9jb25mcxgDIAEoBRIZChFzcGVuZF91bmNvbmZpcm1lZBgE",
            "IAEoCBozChFBZGRyVG9BbW91bnRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFs",
            "dWUYAiABKAM6AjgBIl8KE0VzdGltYXRlRmVlUmVzcG9uc2USDwoHZmVlX3Nh",
            "dBgBIAEoAxIgChRmZWVyYXRlX3NhdF9wZXJfYnl0ZRgCIAEoA0ICGAESFQoN",
            "c2F0X3Blcl92Ynl0ZRgDIAEoBCKJAgoPU2VuZE1hbnlSZXF1ZXN0Ej4KDEFk",
            "ZHJUb0Ftb3VudBgBIAMoCzIoLmxucnBjLlNlbmRNYW55UmVxdWVzdC5BZGRy",
            "VG9BbW91bnRFbnRyeRITCgt0YXJnZXRfY29uZhgDIAEoBRIVCg1zYXRfcGVy",
            "X3ZieXRlGAQgASgEEhgKDHNhdF9wZXJfYnl0ZRgFIAEoA0ICGAESDQoFbGFi",
            "ZWwYBiABKAkSEQoJbWluX2NvbmZzGAcgASgFEhkKEXNwZW5kX3VuY29uZmly",
            "bWVkGAggASgIGjMKEUFkZHJUb0Ftb3VudEVudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoAzoCOAEiIAoQU2VuZE1hbnlSZXNwb25zZRIMCgR0eGlk",
            "GAEgASgJIsUBChBTZW5kQ29pbnNSZXF1ZXN0EgwKBGFkZHIYASABKAkSDgoG",
            "YW1vdW50GAIgASgDEhMKC3RhcmdldF9jb25mGAMgASgFEhUKDXNhdF9wZXJf",
            "dmJ5dGUYBCABKAQSGAoMc2F0X3Blcl9ieXRlGAUgASgDQgIYARIQCghzZW5k",
            "X2FsbBgGIAEoCBINCgVsYWJlbBgHIAEoCRIRCgltaW5fY29uZnMYCCABKAUS",
            "GQoRc3BlbmRfdW5jb25maXJtZWQYCSABKAgiIQoRU2VuZENvaW5zUmVzcG9u",
            "c2USDAoEdHhpZBgBIAEoCSJLChJMaXN0VW5zcGVudFJlcXVlc3QSEQoJbWlu",
            "X2NvbmZzGAEgASgFEhEKCW1heF9jb25mcxgCIAEoBRIPCgdhY2NvdW50GAMg",
            "ASgJIjEKE0xpc3RVbnNwZW50UmVzcG9uc2USGgoFdXR4b3MYASADKAsyCy5s",
            "bnJwYy5VdHhvIkYKEU5ld0FkZHJlc3NSZXF1ZXN0EiAKBHR5cGUYASABKA4y",
            "Ei5sbnJwYy5BZGRyZXNzVHlwZRIPCgdhY2NvdW50GAIgASgJIiUKEk5ld0Fk",
            "ZHJlc3NSZXNwb25zZRIPCgdhZGRyZXNzGAEgASgJIiEKElNpZ25NZXNzYWdl",
            "UmVxdWVzdBILCgNtc2cYASABKAwiKAoTU2lnbk1lc3NhZ2VSZXNwb25zZRIR",
            "CglzaWduYXR1cmUYASABKAkiNgoUVmVyaWZ5TWVzc2FnZVJlcXVlc3QSCwoD",
            "bXNnGAEgASgMEhEKCXNpZ25hdHVyZRgCIAEoCSI2ChVWZXJpZnlNZXNzYWdl",
            "UmVzcG9uc2USDQoFdmFsaWQYASABKAgSDgoGcHVia2V5GAIgASgJIloKEkNv",
            "bm5lY3RQZWVyUmVxdWVzdBIlCgRhZGRyGAEgASgLMhcubG5ycGMuTGlnaHRu",
            "aW5nQWRkcmVzcxIMCgRwZXJtGAIgASgIEg8KB3RpbWVvdXQYAyABKAQiFQoT",
            "Q29ubmVjdFBlZXJSZXNwb25zZSIoChVEaXNjb25uZWN0UGVlclJlcXVlc3QS",
            "DwoHcHViX2tleRgBIAEoCSIYChZEaXNjb25uZWN0UGVlclJlc3BvbnNlIqUB",
            "CgRIVExDEhAKCGluY29taW5nGAEgASgIEg4KBmFtb3VudBgCIAEoAxIRCglo",
            "YXNoX2xvY2sYAyABKAwSGQoRZXhwaXJhdGlvbl9oZWlnaHQYBCABKA0SEgoK",
            "aHRsY19pbmRleBgFIAEoBBIaChJmb3J3YXJkaW5nX2NoYW5uZWwYBiABKAQS",
            "HQoVZm9yd2FyZGluZ19odGxjX2luZGV4GAcgASgEIqoBChJDaGFubmVsQ29u",
            "c3RyYWludHMSEQoJY3N2X2RlbGF5GAEgASgNEhgKEGNoYW5fcmVzZXJ2ZV9z",
            "YXQYAiABKAQSFgoOZHVzdF9saW1pdF9zYXQYAyABKAQSHAoUbWF4X3BlbmRp",
            "bmdfYW10X21zYXQYBCABKAQSFQoNbWluX2h0bGNfbXNhdBgFIAEoBBIaChJt",
            "YXhfYWNjZXB0ZWRfaHRsY3MYBiABKA0isAYKB0NoYW5uZWwSDgoGYWN0aXZl",
            "GAEgASgIEhUKDXJlbW90ZV9wdWJrZXkYAiABKAkSFQoNY2hhbm5lbF9wb2lu",
            "dBgDIAEoCRITCgdjaGFuX2lkGAQgASgEQgIwARIQCghjYXBhY2l0eRgFIAEo",
            "AxIVCg1sb2NhbF9iYWxhbmNlGAYgASgDEhYKDnJlbW90ZV9iYWxhbmNlGAcg",
            "ASgDEhIKCmNvbW1pdF9mZWUYCCABKAMSFQoNY29tbWl0X3dlaWdodBgJIAEo",
            "AxISCgpmZWVfcGVyX2t3GAogASgDEhkKEXVuc2V0dGxlZF9iYWxhbmNlGAsg",
            "ASgDEhsKE3RvdGFsX3NhdG9zaGlzX3NlbnQYDCABKAMSHwoXdG90YWxfc2F0",
            "b3NoaXNfcmVjZWl2ZWQYDSABKAMSEwoLbnVtX3VwZGF0ZXMYDiABKAQSIgoN",
            "cGVuZGluZ19odGxjcxgPIAMoCzILLmxucnBjLkhUTEMSFQoJY3N2X2RlbGF5",
            "GBAgASgNQgIYARIPCgdwcml2YXRlGBEgASgIEhEKCWluaXRpYXRvchgSIAEo",
            "CBIZChFjaGFuX3N0YXR1c19mbGFncxgTIAEoCRIiChZsb2NhbF9jaGFuX3Jl",
            "c2VydmVfc2F0GBQgASgDQgIYARIjChdyZW1vdGVfY2hhbl9yZXNlcnZlX3Nh",
            "dBgVIAEoA0ICGAESHQoRc3RhdGljX3JlbW90ZV9rZXkYFiABKAhCAhgBEi4K",
            "D2NvbW1pdG1lbnRfdHlwZRgaIAEoDjIVLmxucnBjLkNvbW1pdG1lbnRUeXBl",
            "EhAKCGxpZmV0aW1lGBcgASgDEg4KBnVwdGltZRgYIAEoAxIVCg1jbG9zZV9h",
            "ZGRyZXNzGBkgASgJEhcKD3B1c2hfYW1vdW50X3NhdBgbIAEoBBITCgt0aGF3",
            "X2hlaWdodBgcIAEoDRI0ChFsb2NhbF9jb25zdHJhaW50cxgdIAEoCzIZLmxu",
            "cnBjLkNoYW5uZWxDb25zdHJhaW50cxI1ChJyZW1vdGVfY29uc3RyYWludHMY",
            "HiABKAsyGS5sbnJwYy5DaGFubmVsQ29uc3RyYWludHMiegoTTGlzdENoYW5u",
            "ZWxzUmVxdWVzdBITCgthY3RpdmVfb25seRgBIAEoCBIVCg1pbmFjdGl2ZV9v",
            "bmx5GAIgASgIEhMKC3B1YmxpY19vbmx5GAMgASgIEhQKDHByaXZhdGVfb25s",
            "eRgEIAEoCBIMCgRwZWVyGAUgASgMIjgKFExpc3RDaGFubmVsc1Jlc3BvbnNl",
            "EiAKCGNoYW5uZWxzGAsgAygLMg4ubG5ycGMuQ2hhbm5lbCKpBAoTQ2hhbm5l",
            "bENsb3NlU3VtbWFyeRIVCg1jaGFubmVsX3BvaW50GAEgASgJEhMKB2NoYW5f",
            "aWQYAiABKARCAjABEhIKCmNoYWluX2hhc2gYAyABKAkSFwoPY2xvc2luZ190",
            "eF9oYXNoGAQgASgJEhUKDXJlbW90ZV9wdWJrZXkYBSABKAkSEAoIY2FwYWNp",
            "dHkYBiABKAMSFAoMY2xvc2VfaGVpZ2h0GAcgASgNEhcKD3NldHRsZWRfYmFs",
            "YW5jZRgIIAEoAxIbChN0aW1lX2xvY2tlZF9iYWxhbmNlGAkgASgDEjoKCmNs",
            "b3NlX3R5cGUYCiABKA4yJi5sbnJwYy5DaGFubmVsQ2xvc2VTdW1tYXJ5LkNs",
            "b3N1cmVUeXBlEigKDm9wZW5faW5pdGlhdG9yGAsgASgOMhAubG5ycGMuSW5p",
            "dGlhdG9yEikKD2Nsb3NlX2luaXRpYXRvchgMIAEoDjIQLmxucnBjLkluaXRp",
            "YXRvchImCgtyZXNvbHV0aW9ucxgNIAMoCzIRLmxucnBjLlJlc29sdXRpb24i",
            "igEKC0Nsb3N1cmVUeXBlEhUKEUNPT1BFUkFUSVZFX0NMT1NFEAASFQoRTE9D",
            "QUxfRk9SQ0VfQ0xPU0UQARIWChJSRU1PVEVfRk9SQ0VfQ0xPU0UQAhIQCgxC",
            "UkVBQ0hfQ0xPU0UQAxIUChBGVU5ESU5HX0NBTkNFTEVEEAQSDQoJQUJBTkRP",
            "TkVEEAUisgEKClJlc29sdXRpb24SLgoPcmVzb2x1dGlvbl90eXBlGAEgASgO",
            "MhUubG5ycGMuUmVzb2x1dGlvblR5cGUSKQoHb3V0Y29tZRgCIAEoDjIYLmxu",
            "cnBjLlJlc29sdXRpb25PdXRjb21lEiEKCG91dHBvaW50GAMgASgLMg8ubG5y",
            "cGMuT3V0UG9pbnQSEgoKYW1vdW50X3NhdBgEIAEoBBISCgpzd2VlcF90eGlk",
            "GAUgASgJIpQBChVDbG9zZWRDaGFubmVsc1JlcXVlc3QSEwoLY29vcGVyYXRp",
            "dmUYASABKAgSEwoLbG9jYWxfZm9yY2UYAiABKAgSFAoMcmVtb3RlX2ZvcmNl",
            "GAMgASgIEg4KBmJyZWFjaBgEIAEoCBIYChBmdW5kaW5nX2NhbmNlbGVkGAUg",
            "ASgIEhEKCWFiYW5kb25lZBgGIAEoCCJGChZDbG9zZWRDaGFubmVsc1Jlc3Bv",
            "bnNlEiwKCGNoYW5uZWxzGAEgAygLMhoubG5ycGMuQ2hhbm5lbENsb3NlU3Vt",
            "bWFyeSLUAwoEUGVlchIPCgdwdWJfa2V5GAEgASgJEg8KB2FkZHJlc3MYAyAB",
            "KAkSEgoKYnl0ZXNfc2VudBgEIAEoBBISCgpieXRlc19yZWN2GAUgASgEEhAK",
            "CHNhdF9zZW50GAYgASgDEhAKCHNhdF9yZWN2GAcgASgDEg8KB2luYm91bmQY",
            "CCABKAgSEQoJcGluZ190aW1lGAkgASgDEicKCXN5bmNfdHlwZRgKIAEoDjIU",
            "LmxucnBjLlBlZXIuU3luY1R5cGUSKwoIZmVhdHVyZXMYCyADKAsyGS5sbnJw",
            "Yy5QZWVyLkZlYXR1cmVzRW50cnkSJwoGZXJyb3JzGAwgAygLMhcubG5ycGMu",
            "VGltZXN0YW1wZWRFcnJvchISCgpmbGFwX2NvdW50GA0gASgFEhQKDGxhc3Rf",
            "ZmxhcF9ucxgOIAEoAxo/Cg1GZWF0dXJlc0VudHJ5EgsKA2tleRgBIAEoDRId",
            "CgV2YWx1ZRgCIAEoCzIOLmxucnBjLkZlYXR1cmU6AjgBIlAKCFN5bmNUeXBl",
            "EhAKDFVOS05PV05fU1lOQxAAEg8KC0FDVElWRV9TWU5DEAESEAoMUEFTU0lW",
            "RV9TWU5DEAISDwoLUElOTkVEX1NZTkMQAyI0ChBUaW1lc3RhbXBlZEVycm9y",
            "EhEKCXRpbWVzdGFtcBgBIAEoBBINCgVlcnJvchgCIAEoCSIoChBMaXN0UGVl",
            "cnNSZXF1ZXN0EhQKDGxhdGVzdF9lcnJvchgBIAEoCCIvChFMaXN0UGVlcnNS",
            "ZXNwb25zZRIaCgVwZWVycxgBIAMoCzILLmxucnBjLlBlZXIiFwoVUGVlckV2",
            "ZW50U3Vic2NyaXB0aW9uInYKCVBlZXJFdmVudBIPCgdwdWJfa2V5GAEgASgJ",
            "EigKBHR5cGUYAiABKA4yGi5sbnJwYy5QZWVyRXZlbnQuRXZlbnRUeXBlIi4K",
            "CUV2ZW50VHlwZRIPCgtQRUVSX09OTElORRAAEhAKDFBFRVJfT0ZGTElORRAB",
            "IhAKDkdldEluZm9SZXF1ZXN0IpYECg9HZXRJbmZvUmVzcG9uc2USDwoHdmVy",
            "c2lvbhgOIAEoCRITCgtjb21taXRfaGFzaBgUIAEoCRIXCg9pZGVudGl0eV9w",
            "dWJrZXkYASABKAkSDQoFYWxpYXMYAiABKAkSDQoFY29sb3IYESABKAkSHAoU",
            "bnVtX3BlbmRpbmdfY2hhbm5lbHMYAyABKA0SGwoTbnVtX2FjdGl2ZV9jaGFu",
            "bmVscxgEIAEoDRIdChVudW1faW5hY3RpdmVfY2hhbm5lbHMYDyABKA0SEQoJ",
            "bnVtX3BlZXJzGAUgASgNEhQKDGJsb2NrX2hlaWdodBgGIAEoDRISCgpibG9j",
            "a19oYXNoGAggASgJEh0KFWJlc3RfaGVhZGVyX3RpbWVzdGFtcBgNIAEoAxIX",
            "Cg9zeW5jZWRfdG9fY2hhaW4YCSABKAgSFwoPc3luY2VkX3RvX2dyYXBoGBIg",
            "ASgIEhMKB3Rlc3RuZXQYCiABKAhCAhgBEhwKBmNoYWlucxgQIAMoCzIMLmxu",
            "cnBjLkNoYWluEgwKBHVyaXMYDCADKAkSNgoIZmVhdHVyZXMYEyADKAsyJC5s",
            "bnJwYy5HZXRJbmZvUmVzcG9uc2UuRmVhdHVyZXNFbnRyeRo/Cg1GZWF0dXJl",
            "c0VudHJ5EgsKA2tleRgBIAEoDRIdCgV2YWx1ZRgCIAEoCzIOLmxucnBjLkZl",
            "YXR1cmU6AjgBSgQICxAMIhgKFkdldFJlY292ZXJ5SW5mb1JlcXVlc3QiXQoX",
            "R2V0UmVjb3ZlcnlJbmZvUmVzcG9uc2USFQoNcmVjb3ZlcnlfbW9kZRgBIAEo",
            "CBIZChFyZWNvdmVyeV9maW5pc2hlZBgCIAEoCBIQCghwcm9ncmVzcxgDIAEo",
            "ASInCgVDaGFpbhINCgVjaGFpbhgBIAEoCRIPCgduZXR3b3JrGAIgASgJIlUK",
            "EkNvbmZpcm1hdGlvblVwZGF0ZRIRCglibG9ja19zaGEYASABKAwSFAoMYmxv",
            "Y2tfaGVpZ2h0GAIgASgFEhYKDm51bV9jb25mc19sZWZ0GAMgASgNIj8KEUNo",
            "YW5uZWxPcGVuVXBkYXRlEioKDWNoYW5uZWxfcG9pbnQYASABKAsyEy5sbnJw",
            "Yy5DaGFubmVsUG9pbnQiOwoSQ2hhbm5lbENsb3NlVXBkYXRlEhQKDGNsb3Np",
            "bmdfdHhpZBgBIAEoDBIPCgdzdWNjZXNzGAIgASgIIrABChNDbG9zZUNoYW5u",
            "ZWxSZXF1ZXN0EioKDWNoYW5uZWxfcG9pbnQYASABKAsyEy5sbnJwYy5DaGFu",
            "bmVsUG9pbnQSDQoFZm9yY2UYAiABKAgSEwoLdGFyZ2V0X2NvbmYYAyABKAUS",
            "GAoMc2F0X3Blcl9ieXRlGAQgASgDQgIYARIYChBkZWxpdmVyeV9hZGRyZXNz",
            "GAUgASgJEhUKDXNhdF9wZXJfdmJ5dGUYBiABKAQifQoRQ2xvc2VTdGF0dXNV",
            "cGRhdGUSLQoNY2xvc2VfcGVuZGluZxgBIAEoCzIULmxucnBjLlBlbmRpbmdV",
            "cGRhdGVIABIvCgpjaGFuX2Nsb3NlGAMgASgLMhkubG5ycGMuQ2hhbm5lbENs",
            "b3NlVXBkYXRlSABCCAoGdXBkYXRlIjMKDVBlbmRpbmdVcGRhdGUSDAoEdHhp",
            "ZBgBIAEoDBIUCgxvdXRwdXRfaW5kZXgYAiABKA0iVAoTUmVhZHlGb3JQc2J0",
            "RnVuZGluZxIXCg9mdW5kaW5nX2FkZHJlc3MYASABKAkSFgoOZnVuZGluZ19h",
            "bW91bnQYAiABKAMSDAoEcHNidBgDIAEoDCLKAwoST3BlbkNoYW5uZWxSZXF1",
            "ZXN0EhUKDXNhdF9wZXJfdmJ5dGUYASABKAQSEwoLbm9kZV9wdWJrZXkYAiAB",
            "KAwSHgoSbm9kZV9wdWJrZXlfc3RyaW5nGAMgASgJQgIYARIcChRsb2NhbF9m",
            "dW5kaW5nX2Ftb3VudBgEIAEoAxIQCghwdXNoX3NhdBgFIAEoAxITCgt0YXJn",
            "ZXRfY29uZhgGIAEoBRIYCgxzYXRfcGVyX2J5dGUYByABKANCAhgBEg8KB3By",
            "aXZhdGUYCCABKAgSFQoNbWluX2h0bGNfbXNhdBgJIAEoAxIYChByZW1vdGVf",
            "Y3N2X2RlbGF5GAogASgNEhEKCW1pbl9jb25mcxgLIAEoBRIZChFzcGVuZF91",
            "bmNvbmZpcm1lZBgMIAEoCBIVCg1jbG9zZV9hZGRyZXNzGA0gASgJEigKDGZ1",
            "bmRpbmdfc2hpbRgOIAEoCzISLmxucnBjLkZ1bmRpbmdTaGltEicKH3JlbW90",
            "ZV9tYXhfdmFsdWVfaW5fZmxpZ2h0X21zYXQYDyABKAQSGAoQcmVtb3RlX21h",
            "eF9odGxjcxgQIAEoDRIVCg1tYXhfbG9jYWxfY3N2GBEgASgNIsMBChBPcGVu",
            "U3RhdHVzVXBkYXRlEiwKDGNoYW5fcGVuZGluZxgBIAEoCzIULmxucnBjLlBl",
            "bmRpbmdVcGRhdGVIABItCgljaGFuX29wZW4YAyABKAsyGC5sbnJwYy5DaGFu",
            "bmVsT3BlblVwZGF0ZUgAEi8KCXBzYnRfZnVuZBgFIAEoCzIaLmxucnBjLlJl",
            "YWR5Rm9yUHNidEZ1bmRpbmdIABIXCg9wZW5kaW5nX2NoYW5faWQYBCABKAxC",
            "CAoGdXBkYXRlIjMKCktleUxvY2F0b3ISEgoKa2V5X2ZhbWlseRgBIAEoBRIR",
            "CglrZXlfaW5kZXgYAiABKAUiSgoNS2V5RGVzY3JpcHRvchIVCg1yYXdfa2V5",
            "X2J5dGVzGAEgASgMEiIKB2tleV9sb2MYAiABKAsyES5sbnJwYy5LZXlMb2Nh",
            "dG9yIrABCg1DaGFuUG9pbnRTaGltEgsKA2FtdBgBIAEoAxInCgpjaGFuX3Bv",
            "aW50GAIgASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50EicKCWxvY2FsX2tleRgD",
            "IAEoCzIULmxucnBjLktleURlc2NyaXB0b3ISEgoKcmVtb3RlX2tleRgEIAEo",
            "DBIXCg9wZW5kaW5nX2NoYW5faWQYBSABKAwSEwoLdGhhd19oZWlnaHQYBiAB",
            "KA0iSgoIUHNidFNoaW0SFwoPcGVuZGluZ19jaGFuX2lkGAEgASgMEhEKCWJh",
            "c2VfcHNidBgCIAEoDBISCgpub19wdWJsaXNoGAMgASgIImwKC0Z1bmRpbmdT",
            "aGltEi8KD2NoYW5fcG9pbnRfc2hpbRgBIAEoCzIULmxucnBjLkNoYW5Qb2lu",
            "dFNoaW1IABIkCglwc2J0X3NoaW0YAiABKAsyDy5sbnJwYy5Qc2J0U2hpbUgA",
            "QgYKBHNoaW0iLAoRRnVuZGluZ1NoaW1DYW5jZWwSFwoPcGVuZGluZ19jaGFu",
            "X2lkGAEgASgMIkEKEUZ1bmRpbmdQc2J0VmVyaWZ5EhMKC2Z1bmRlZF9wc2J0",
            "GAEgASgMEhcKD3BlbmRpbmdfY2hhbl9pZBgCIAEoDCJZChNGdW5kaW5nUHNi",
            "dEZpbmFsaXplEhMKC3NpZ25lZF9wc2J0GAEgASgMEhcKD3BlbmRpbmdfY2hh",
            "bl9pZBgCIAEoDBIUCgxmaW5hbF9yYXdfdHgYAyABKAwi5QEKFEZ1bmRpbmdU",
            "cmFuc2l0aW9uTXNnEisKDXNoaW1fcmVnaXN0ZXIYASABKAsyEi5sbnJwYy5G",
            "dW5kaW5nU2hpbUgAEi8KC3NoaW1fY2FuY2VsGAIgASgLMhgubG5ycGMuRnVu",
            "ZGluZ1NoaW1DYW5jZWxIABIvCgtwc2J0X3ZlcmlmeRgDIAEoCzIYLmxucnBj",
            "LkZ1bmRpbmdQc2J0VmVyaWZ5SAASMwoNcHNidF9maW5hbGl6ZRgEIAEoCzIa",
            "LmxucnBjLkZ1bmRpbmdQc2J0RmluYWxpemVIAEIJCgd0cmlnZ2VyIhYKFEZ1",
            "bmRpbmdTdGF0ZVN0ZXBSZXNwIoYBCgtQZW5kaW5nSFRMQxIQCghpbmNvbWlu",
            "ZxgBIAEoCBIOCgZhbW91bnQYAiABKAMSEAoIb3V0cG9pbnQYAyABKAkSFwoP",
            "bWF0dXJpdHlfaGVpZ2h0GAQgASgNEhsKE2Jsb2Nrc190aWxfbWF0dXJpdHkY",
            "BSABKAUSDQoFc3RhZ2UYBiABKA0iGAoWUGVuZGluZ0NoYW5uZWxzUmVxdWVz",
            "dCKrDQoXUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2USGwoTdG90YWxfbGltYm9f",
            "YmFsYW5jZRgBIAEoAxJQChVwZW5kaW5nX29wZW5fY2hhbm5lbHMYAiADKAsy",
            "MS5sbnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25zZS5QZW5kaW5nT3BlbkNo",
            "YW5uZWwSUgoYcGVuZGluZ19jbG9zaW5nX2NoYW5uZWxzGAMgAygLMiwubG5y",
            "cGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2UuQ2xvc2VkQ2hhbm5lbEICGAES",
            "WQoecGVuZGluZ19mb3JjZV9jbG9zaW5nX2NoYW5uZWxzGAQgAygLMjEubG5y",
            "cGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2UuRm9yY2VDbG9zZWRDaGFubmVs",
            "ElIKFndhaXRpbmdfY2xvc2VfY2hhbm5lbHMYBSADKAsyMi5sbnJwYy5QZW5k",
            "aW5nQ2hhbm5lbHNSZXNwb25zZS5XYWl0aW5nQ2xvc2VDaGFubmVsGpcCCg5Q",
            "ZW5kaW5nQ2hhbm5lbBIXCg9yZW1vdGVfbm9kZV9wdWIYASABKAkSFQoNY2hh",
            "bm5lbF9wb2ludBgCIAEoCRIQCghjYXBhY2l0eRgDIAEoAxIVCg1sb2NhbF9i",
            "YWxhbmNlGAQgASgDEhYKDnJlbW90ZV9iYWxhbmNlGAUgASgDEh4KFmxvY2Fs",
            "X2NoYW5fcmVzZXJ2ZV9zYXQYBiABKAMSHwoXcmVtb3RlX2NoYW5fcmVzZXJ2",
            "ZV9zYXQYByABKAMSIwoJaW5pdGlhdG9yGAggASgOMhAubG5ycGMuSW5pdGlh",
            "dG9yEi4KD2NvbW1pdG1lbnRfdHlwZRgJIAEoDjIVLmxucnBjLkNvbW1pdG1l",
            "bnRUeXBlGrABChJQZW5kaW5nT3BlbkNoYW5uZWwSPgoHY2hhbm5lbBgBIAEo",
            "CzItLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBlbmRpbmdDaGFu",
            "bmVsEhsKE2NvbmZpcm1hdGlvbl9oZWlnaHQYAiABKA0SEgoKY29tbWl0X2Zl",
            "ZRgEIAEoAxIVCg1jb21taXRfd2VpZ2h0GAUgASgDEhIKCmZlZV9wZXJfa3cY",
            "BiABKAMarQEKE1dhaXRpbmdDbG9zZUNoYW5uZWwSPgoHY2hhbm5lbBgBIAEo",
            "CzItLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBlbmRpbmdDaGFu",
            "bmVsEhUKDWxpbWJvX2JhbGFuY2UYAiABKAMSPwoLY29tbWl0bWVudHMYAyAB",
            "KAsyKi5sbnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25zZS5Db21taXRtZW50",
            "cxq3AQoLQ29tbWl0bWVudHMSEgoKbG9jYWxfdHhpZBgBIAEoCRITCgtyZW1v",
            "dGVfdHhpZBgCIAEoCRIbChNyZW1vdGVfcGVuZGluZ190eGlkGAMgASgJEhwK",
            "FGxvY2FsX2NvbW1pdF9mZWVfc2F0GAQgASgEEh0KFXJlbW90ZV9jb21taXRf",
            "ZmVlX3NhdBgFIAEoBBIlCh1yZW1vdGVfcGVuZGluZ19jb21taXRfZmVlX3Nh",
            "dBgGIAEoBBplCg1DbG9zZWRDaGFubmVsEj4KB2NoYW5uZWwYASABKAsyLS5s",
            "bnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25zZS5QZW5kaW5nQ2hhbm5lbBIU",
            "CgxjbG9zaW5nX3R4aWQYAiABKAka/wIKEkZvcmNlQ2xvc2VkQ2hhbm5lbBI+",
            "CgdjaGFubmVsGAEgASgLMi0ubG5ycGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9u",
            "c2UuUGVuZGluZ0NoYW5uZWwSFAoMY2xvc2luZ190eGlkGAIgASgJEhUKDWxp",
            "bWJvX2JhbGFuY2UYAyABKAMSFwoPbWF0dXJpdHlfaGVpZ2h0GAQgASgNEhsK",
            "E2Jsb2Nrc190aWxfbWF0dXJpdHkYBSABKAUSGQoRcmVjb3ZlcmVkX2JhbGFu",
            "Y2UYBiABKAMSKQoNcGVuZGluZ19odGxjcxgIIAMoCzISLmxucnBjLlBlbmRp",
            "bmdIVExDEk0KBmFuY2hvchgJIAEoDjI9LmxucnBjLlBlbmRpbmdDaGFubmVs",
            "c1Jlc3BvbnNlLkZvcmNlQ2xvc2VkQ2hhbm5lbC5BbmNob3JTdGF0ZSIxCgtB",
            "bmNob3JTdGF0ZRIJCgVMSU1CTxAAEg0KCVJFQ09WRVJFRBABEggKBExPU1QQ",
            "AiIaChhDaGFubmVsRXZlbnRTdWJzY3JpcHRpb24ivwMKEkNoYW5uZWxFdmVu",
            "dFVwZGF0ZRImCgxvcGVuX2NoYW5uZWwYASABKAsyDi5sbnJwYy5DaGFubmVs",
            "SAASNAoOY2xvc2VkX2NoYW5uZWwYAiABKAsyGi5sbnJwYy5DaGFubmVsQ2xv",
            "c2VTdW1tYXJ5SAASLQoOYWN0aXZlX2NoYW5uZWwYAyABKAsyEy5sbnJwYy5D",
            "aGFubmVsUG9pbnRIABIvChBpbmFjdGl2ZV9jaGFubmVsGAQgASgLMhMubG5y",
            "cGMuQ2hhbm5lbFBvaW50SAASNAoUcGVuZGluZ19vcGVuX2NoYW5uZWwYBiAB",
            "KAsyFC5sbnJwYy5QZW5kaW5nVXBkYXRlSAASMgoEdHlwZRgFIAEoDjIkLmxu",
            "cnBjLkNoYW5uZWxFdmVudFVwZGF0ZS5VcGRhdGVUeXBlInYKClVwZGF0ZVR5",
            "cGUSEAoMT1BFTl9DSEFOTkVMEAASEgoOQ0xPU0VEX0NIQU5ORUwQARISCg5B",
            "Q1RJVkVfQ0hBTk5FTBACEhQKEElOQUNUSVZFX0NIQU5ORUwQAxIYChRQRU5E",
            "SU5HX09QRU5fQ0hBTk5FTBAEQgkKB2NoYW5uZWwiTgoUV2FsbGV0QWNjb3Vu",
            "dEJhbGFuY2USGQoRY29uZmlybWVkX2JhbGFuY2UYASABKAMSGwoTdW5jb25m",
            "aXJtZWRfYmFsYW5jZRgCIAEoAyIWChRXYWxsZXRCYWxhbmNlUmVxdWVzdCKF",
            "AgoVV2FsbGV0QmFsYW5jZVJlc3BvbnNlEhUKDXRvdGFsX2JhbGFuY2UYASAB",
            "KAMSGQoRY29uZmlybWVkX2JhbGFuY2UYAiABKAMSGwoTdW5jb25maXJtZWRf",
            "YmFsYW5jZRgDIAEoAxJJCg9hY2NvdW50X2JhbGFuY2UYBCADKAsyMC5sbnJw",
            "Yy5XYWxsZXRCYWxhbmNlUmVzcG9uc2UuQWNjb3VudEJhbGFuY2VFbnRyeRpS",
            "ChNBY2NvdW50QmFsYW5jZUVudHJ5EgsKA2tleRgBIAEoCRIqCgV2YWx1ZRgC",
            "IAEoCzIbLmxucnBjLldhbGxldEFjY291bnRCYWxhbmNlOgI4ASIjCgZBbW91",
            "bnQSCwoDc2F0GAEgASgEEgwKBG1zYXQYAiABKAQiFwoVQ2hhbm5lbEJhbGFu",
            "Y2VSZXF1ZXN0IuQCChZDaGFubmVsQmFsYW5jZVJlc3BvbnNlEhMKB2JhbGFu",
            "Y2UYASABKANCAhgBEiAKFHBlbmRpbmdfb3Blbl9iYWxhbmNlGAIgASgDQgIY",
            "ARIkCg1sb2NhbF9iYWxhbmNlGAMgASgLMg0ubG5ycGMuQW1vdW50EiUKDnJl",
            "bW90ZV9iYWxhbmNlGAQgASgLMg0ubG5ycGMuQW1vdW50Ei4KF3Vuc2V0dGxl",
            "ZF9sb2NhbF9iYWxhbmNlGAUgASgLMg0ubG5ycGMuQW1vdW50Ei8KGHVuc2V0",
            "dGxlZF9yZW1vdGVfYmFsYW5jZRgGIAEoCzINLmxucnBjLkFtb3VudBIxChpw",
            "ZW5kaW5nX29wZW5fbG9jYWxfYmFsYW5jZRgHIAEoCzINLmxucnBjLkFtb3Vu",
            "dBIyChtwZW5kaW5nX29wZW5fcmVtb3RlX2JhbGFuY2UYCCABKAsyDS5sbnJw",
            "Yy5BbW91bnQi0AQKElF1ZXJ5Um91dGVzUmVxdWVzdBIPCgdwdWJfa2V5GAEg",
            "ASgJEgsKA2FtdBgCIAEoAxIQCghhbXRfbXNhdBgMIAEoAxIYChBmaW5hbF9j",
            "bHR2X2RlbHRhGAQgASgFEiIKCWZlZV9saW1pdBgFIAEoCzIPLmxucnBjLkZl",
            "ZUxpbWl0EhUKDWlnbm9yZWRfbm9kZXMYBiADKAwSLQoNaWdub3JlZF9lZGdl",
            "cxgHIAMoCzISLmxucnBjLkVkZ2VMb2NhdG9yQgIYARIWCg5zb3VyY2VfcHVi",
            "X2tleRgIIAEoCRIbChN1c2VfbWlzc2lvbl9jb250cm9sGAkgASgIEiYKDWln",
            "bm9yZWRfcGFpcnMYCiADKAsyDy5sbnJwYy5Ob2RlUGFpchISCgpjbHR2X2xp",
            "bWl0GAsgASgNEk0KE2Rlc3RfY3VzdG9tX3JlY29yZHMYDSADKAsyMC5sbnJw",
            "Yy5RdWVyeVJvdXRlc1JlcXVlc3QuRGVzdEN1c3RvbVJlY29yZHNFbnRyeRIc",
            "ChBvdXRnb2luZ19jaGFuX2lkGA4gASgEQgIwARIXCg9sYXN0X2hvcF9wdWJr",
            "ZXkYDyABKAwSJQoLcm91dGVfaGludHMYECADKAsyEC5sbnJwYy5Sb3V0ZUhp",
            "bnQSKAoNZGVzdF9mZWF0dXJlcxgRIAMoDjIRLmxucnBjLkZlYXR1cmVCaXQa",
            "OAoWRGVzdEN1c3RvbVJlY29yZHNFbnRyeRILCgNrZXkYASABKAQSDQoFdmFs",
            "dWUYAiABKAw6AjgBSgQIAxAEIiQKCE5vZGVQYWlyEgwKBGZyb20YASABKAwS",
            "CgoCdG8YAiABKAwiQAoLRWRnZUxvY2F0b3ISFgoKY2hhbm5lbF9pZBgBIAEo",
            "BEICMAESGQoRZGlyZWN0aW9uX3JldmVyc2UYAiABKAgiSQoTUXVlcnlSb3V0",
            "ZXNSZXNwb25zZRIcCgZyb3V0ZXMYASADKAsyDC5sbnJwYy5Sb3V0ZRIUCgxz",
            "dWNjZXNzX3Byb2IYAiABKAEigAMKA0hvcBITCgdjaGFuX2lkGAEgASgEQgIw",
            "ARIZCg1jaGFuX2NhcGFjaXR5GAIgASgDQgIYARIaCg5hbXRfdG9fZm9yd2Fy",
            "ZBgDIAEoA0ICGAESDwoDZmVlGAQgASgDQgIYARIOCgZleHBpcnkYBSABKA0S",
            "GwoTYW10X3RvX2ZvcndhcmRfbXNhdBgGIAEoAxIQCghmZWVfbXNhdBgHIAEo",
            "AxIPCgdwdWJfa2V5GAggASgJEhMKC3Rsdl9wYXlsb2FkGAkgASgIEiQKCm1w",
            "cF9yZWNvcmQYCiABKAsyEC5sbnJwYy5NUFBSZWNvcmQSJAoKYW1wX3JlY29y",
            "ZBgMIAEoCzIQLmxucnBjLkFNUFJlY29yZBI1Cg5jdXN0b21fcmVjb3JkcxgL",
            "IAMoCzIdLmxucnBjLkhvcC5DdXN0b21SZWNvcmRzRW50cnkaNAoSQ3VzdG9t",
            "UmVjb3Jkc0VudHJ5EgsKA2tleRgBIAEoBBINCgV2YWx1ZRgCIAEoDDoCOAEi",
            "OQoJTVBQUmVjb3JkEhQKDHBheW1lbnRfYWRkchgLIAEoDBIWCg50b3RhbF9h",
            "bXRfbXNhdBgKIAEoAyJECglBTVBSZWNvcmQSEgoKcm9vdF9zaGFyZRgBIAEo",
            "DBIOCgZzZXRfaWQYAiABKAwSEwoLY2hpbGRfaW5kZXgYAyABKA0imgEKBVJv",
            "dXRlEhcKD3RvdGFsX3RpbWVfbG9jaxgBIAEoDRIWCgp0b3RhbF9mZWVzGAIg",
            "ASgDQgIYARIVCgl0b3RhbF9hbXQYAyABKANCAhgBEhgKBGhvcHMYBCADKAsy",
            "Ci5sbnJwYy5Ib3ASFwoPdG90YWxfZmVlc19tc2F0GAUgASgDEhYKDnRvdGFs",
            "X2FtdF9tc2F0GAYgASgDIjwKD05vZGVJbmZvUmVxdWVzdBIPCgdwdWJfa2V5",
            "GAEgASgJEhgKEGluY2x1ZGVfY2hhbm5lbHMYAiABKAgiggEKCE5vZGVJbmZv",
            "EiIKBG5vZGUYASABKAsyFC5sbnJwYy5MaWdodG5pbmdOb2RlEhQKDG51bV9j",
            "aGFubmVscxgCIAEoDRIWCg50b3RhbF9jYXBhY2l0eRgDIAEoAxIkCghjaGFu",
            "bmVscxgEIAMoCzISLmxucnBjLkNoYW5uZWxFZGdlIvEBCg1MaWdodG5pbmdO",
            "b2RlEhMKC2xhc3RfdXBkYXRlGAEgASgNEg8KB3B1Yl9rZXkYAiABKAkSDQoF",
            "YWxpYXMYAyABKAkSJQoJYWRkcmVzc2VzGAQgAygLMhIubG5ycGMuTm9kZUFk",
            "ZHJlc3MSDQoFY29sb3IYBSABKAkSNAoIZmVhdHVyZXMYBiADKAsyIi5sbnJw",
            "Yy5MaWdodG5pbmdOb2RlLkZlYXR1cmVzRW50cnkaPwoNRmVhdHVyZXNFbnRy",
            "eRILCgNrZXkYASABKA0SHQoFdmFsdWUYAiABKAsyDi5sbnJwYy5GZWF0dXJl",
            "OgI4ASIsCgtOb2RlQWRkcmVzcxIPCgduZXR3b3JrGAEgASgJEgwKBGFkZHIY",
            "AiABKAkirAEKDVJvdXRpbmdQb2xpY3kSFwoPdGltZV9sb2NrX2RlbHRhGAEg",
            "ASgNEhAKCG1pbl9odGxjGAIgASgDEhUKDWZlZV9iYXNlX21zYXQYAyABKAMS",
            "GwoTZmVlX3JhdGVfbWlsbGlfbXNhdBgEIAEoAxIQCghkaXNhYmxlZBgFIAEo",
            "CBIVCg1tYXhfaHRsY19tc2F0GAYgASgEEhMKC2xhc3RfdXBkYXRlGAcgASgN",
            "IuIBCgtDaGFubmVsRWRnZRIWCgpjaGFubmVsX2lkGAEgASgEQgIwARISCgpj",
            "aGFuX3BvaW50GAIgASgJEhcKC2xhc3RfdXBkYXRlGAMgASgNQgIYARIRCglu",
            "b2RlMV9wdWIYBCABKAkSEQoJbm9kZTJfcHViGAUgASgJEhAKCGNhcGFjaXR5",
            "GAYgASgDEioKDG5vZGUxX3BvbGljeRgHIAEoCzIULmxucnBjLlJvdXRpbmdQ",
            "b2xpY3kSKgoMbm9kZTJfcG9saWN5GAggASgLMhQubG5ycGMuUm91dGluZ1Bv",
            "bGljeSIyChNDaGFubmVsR3JhcGhSZXF1ZXN0EhsKE2luY2x1ZGVfdW5hbm5v",
            "dW5jZWQYASABKAgiVgoMQ2hhbm5lbEdyYXBoEiMKBW5vZGVzGAEgAygLMhQu",
            "bG5ycGMuTGlnaHRuaW5nTm9kZRIhCgVlZGdlcxgCIAMoCzISLmxucnBjLkNo",
            "YW5uZWxFZGdlIjoKEk5vZGVNZXRyaWNzUmVxdWVzdBIkCgV0eXBlcxgBIAMo",
            "DjIVLmxucnBjLk5vZGVNZXRyaWNUeXBlIr4BChNOb2RlTWV0cmljc1Jlc3Bv",
            "bnNlElUKFmJldHdlZW5uZXNzX2NlbnRyYWxpdHkYASADKAsyNS5sbnJwYy5O",
            "b2RlTWV0cmljc1Jlc3BvbnNlLkJldHdlZW5uZXNzQ2VudHJhbGl0eUVudHJ5",
            "GlAKGkJldHdlZW5uZXNzQ2VudHJhbGl0eUVudHJ5EgsKA2tleRgBIAEoCRIh",
            "CgV2YWx1ZRgCIAEoCzISLmxucnBjLkZsb2F0TWV0cmljOgI4ASI2CgtGbG9h",
            "dE1ldHJpYxINCgV2YWx1ZRgBIAEoARIYChBub3JtYWxpemVkX3ZhbHVlGAIg",
            "ASgBIiYKD0NoYW5JbmZvUmVxdWVzdBITCgdjaGFuX2lkGAEgASgEQgIwASIU",
            "ChJOZXR3b3JrSW5mb1JlcXVlc3QipwIKC05ldHdvcmtJbmZvEhYKDmdyYXBo",
            "X2RpYW1ldGVyGAEgASgNEhYKDmF2Z19vdXRfZGVncmVlGAIgASgBEhYKDm1h",
            "eF9vdXRfZGVncmVlGAMgASgNEhEKCW51bV9ub2RlcxgEIAEoDRIUCgxudW1f",
            "Y2hhbm5lbHMYBSABKA0SHgoWdG90YWxfbmV0d29ya19jYXBhY2l0eRgGIAEo",
            "AxIYChBhdmdfY2hhbm5lbF9zaXplGAcgASgBEhgKEG1pbl9jaGFubmVsX3Np",
            "emUYCCABKAMSGAoQbWF4X2NoYW5uZWxfc2l6ZRgJIAEoAxIfChdtZWRpYW5f",
            "Y2hhbm5lbF9zaXplX3NhdBgKIAEoAxIYChBudW1fem9tYmllX2NoYW5zGAsg",
            "ASgEIg0KC1N0b3BSZXF1ZXN0Ig4KDFN0b3BSZXNwb25zZSIbChlHcmFwaFRv",
            "cG9sb2d5U3Vic2NyaXB0aW9uIqMBChNHcmFwaFRvcG9sb2d5VXBkYXRlEicK",
            "DG5vZGVfdXBkYXRlcxgBIAMoCzIRLmxucnBjLk5vZGVVcGRhdGUSMQoPY2hh",
            "bm5lbF91cGRhdGVzGAIgAygLMhgubG5ycGMuQ2hhbm5lbEVkZ2VVcGRhdGUS",
            "MAoMY2xvc2VkX2NoYW5zGAMgAygLMhoubG5ycGMuQ2xvc2VkQ2hhbm5lbFVw",
            "ZGF0ZSKUAgoKTm9kZVVwZGF0ZRIVCglhZGRyZXNzZXMYASADKAlCAhgBEhQK",
            "DGlkZW50aXR5X2tleRgCIAEoCRIbCg9nbG9iYWxfZmVhdHVyZXMYAyABKAxC",
            "AhgBEg0KBWFsaWFzGAQgASgJEg0KBWNvbG9yGAUgASgJEioKDm5vZGVfYWRk",
            "cmVzc2VzGAcgAygLMhIubG5ycGMuTm9kZUFkZHJlc3MSMQoIZmVhdHVyZXMY",
            "BiADKAsyHy5sbnJwYy5Ob2RlVXBkYXRlLkZlYXR1cmVzRW50cnkaPwoNRmVh",
            "dHVyZXNFbnRyeRILCgNrZXkYASABKA0SHQoFdmFsdWUYAiABKAsyDi5sbnJw",
            "Yy5GZWF0dXJlOgI4ASLEAQoRQ2hhbm5lbEVkZ2VVcGRhdGUSEwoHY2hhbl9p",
            "ZBgBIAEoBEICMAESJwoKY2hhbl9wb2ludBgCIAEoCzITLmxucnBjLkNoYW5u",
            "ZWxQb2ludBIQCghjYXBhY2l0eRgDIAEoAxIsCg5yb3V0aW5nX3BvbGljeRgE",
            "IAEoCzIULmxucnBjLlJvdXRpbmdQb2xpY3kSGAoQYWR2ZXJ0aXNpbmdfbm9k",
            "ZRgFIAEoCRIXCg9jb25uZWN0aW5nX25vZGUYBiABKAkifAoTQ2xvc2VkQ2hh",
            "bm5lbFVwZGF0ZRITCgdjaGFuX2lkGAEgASgEQgIwARIQCghjYXBhY2l0eRgC",
            "IAEoAxIVCg1jbG9zZWRfaGVpZ2h0GAMgASgNEicKCmNoYW5fcG9pbnQYBCAB",
            "KAsyEy5sbnJwYy5DaGFubmVsUG9pbnQihgEKB0hvcEhpbnQSDwoHbm9kZV9p",
            "ZBgBIAEoCRITCgdjaGFuX2lkGAIgASgEQgIwARIVCg1mZWVfYmFzZV9tc2F0",
            "GAMgASgNEiMKG2ZlZV9wcm9wb3J0aW9uYWxfbWlsbGlvbnRocxgEIAEoDRIZ",
            "ChFjbHR2X2V4cGlyeV9kZWx0YRgFIAEoDSIuCglSb3V0ZUhpbnQSIQoJaG9w",
            "X2hpbnRzGAEgAygLMg4ubG5ycGMuSG9wSGludCL1BQoHSW52b2ljZRIMCgRt",
            "ZW1vGAEgASgJEhIKCnJfcHJlaW1hZ2UYAyABKAwSDgoGcl9oYXNoGAQgASgM",
            "Eg0KBXZhbHVlGAUgASgDEhIKCnZhbHVlX21zYXQYFyABKAMSEwoHc2V0dGxl",
            "ZBgGIAEoCEICGAESFQoNY3JlYXRpb25fZGF0ZRgHIAEoAxITCgtzZXR0bGVf",
            "ZGF0ZRgIIAEoAxIXCg9wYXltZW50X3JlcXVlc3QYCSABKAkSGAoQZGVzY3Jp",
            "cHRpb25faGFzaBgKIAEoDBIOCgZleHBpcnkYCyABKAMSFQoNZmFsbGJhY2tf",
            "YWRkchgMIAEoCRITCgtjbHR2X2V4cGlyeRgNIAEoBBIlCgtyb3V0ZV9oaW50",
            "cxgOIAMoCzIQLmxucnBjLlJvdXRlSGludBIPCgdwcml2YXRlGA8gASgIEhEK",
            "CWFkZF9pbmRleBgQIAEoBBIUCgxzZXR0bGVfaW5kZXgYESABKAQSFAoIYW10",
            "X3BhaWQYEiABKANCAhgBEhQKDGFtdF9wYWlkX3NhdBgTIAEoAxIVCg1hbXRf",
            "cGFpZF9tc2F0GBQgASgDEioKBXN0YXRlGBUgASgOMhsubG5ycGMuSW52b2lj",
            "ZS5JbnZvaWNlU3RhdGUSIQoFaHRsY3MYFiADKAsyEi5sbnJwYy5JbnZvaWNl",
            "SFRMQxIuCghmZWF0dXJlcxgYIAMoCzIcLmxucnBjLkludm9pY2UuRmVhdHVy",
            "ZXNFbnRyeRISCgppc19rZXlzZW5kGBkgASgIEhQKDHBheW1lbnRfYWRkchga",
            "IAEoDBIOCgZpc19hbXAYGyABKAgaPwoNRmVhdHVyZXNFbnRyeRILCgNrZXkY",
            "ASABKA0SHQoFdmFsdWUYAiABKAsyDi5sbnJwYy5GZWF0dXJlOgI4ASJBCgxJ",
            "bnZvaWNlU3RhdGUSCAoET1BFThAAEgsKB1NFVFRMRUQQARIMCghDQU5DRUxF",
            "RBACEgwKCEFDQ0VQVEVEEANKBAgCEAMi8wIKC0ludm9pY2VIVExDEhMKB2No",
            "YW5faWQYASABKARCAjABEhIKCmh0bGNfaW5kZXgYAiABKAQSEAoIYW10X21z",
            "YXQYAyABKAQSFQoNYWNjZXB0X2hlaWdodBgEIAEoBRITCgthY2NlcHRfdGlt",
            "ZRgFIAEoAxIUCgxyZXNvbHZlX3RpbWUYBiABKAMSFQoNZXhwaXJ5X2hlaWdo",
            "dBgHIAEoBRImCgVzdGF0ZRgIIAEoDjIXLmxucnBjLkludm9pY2VIVExDU3Rh",
            "dGUSPQoOY3VzdG9tX3JlY29yZHMYCSADKAsyJS5sbnJwYy5JbnZvaWNlSFRM",
            "Qy5DdXN0b21SZWNvcmRzRW50cnkSGgoSbXBwX3RvdGFsX2FtdF9tc2F0GAog",
            "ASgEEhcKA2FtcBgLIAEoCzIKLmxucnBjLkFNUBo0ChJDdXN0b21SZWNvcmRz",
            "RW50cnkSCwoDa2V5GAEgASgEEg0KBXZhbHVlGAIgASgMOgI4ASJeCgNBTVAS",
            "EgoKcm9vdF9zaGFyZRgBIAEoDBIOCgZzZXRfaWQYAiABKAwSEwoLY2hpbGRf",
            "aW5kZXgYAyABKA0SDAoEaGFzaBgEIAEoDBIQCghwcmVpbWFnZRgFIAEoDCJm",
            "ChJBZGRJbnZvaWNlUmVzcG9uc2USDgoGcl9oYXNoGAEgASgMEhcKD3BheW1l",
            "bnRfcmVxdWVzdBgCIAEoCRIRCglhZGRfaW5kZXgYECABKAQSFAoMcGF5bWVu",
            "dF9hZGRyGBEgASgMIjUKC1BheW1lbnRIYXNoEhYKCnJfaGFzaF9zdHIYASAB",
            "KAlCAhgBEg4KBnJfaGFzaBgCIAEoDCJsChJMaXN0SW52b2ljZVJlcXVlc3QS",
            "FAoMcGVuZGluZ19vbmx5GAEgASgIEhQKDGluZGV4X29mZnNldBgEIAEoBBIY",
            "ChBudW1fbWF4X2ludm9pY2VzGAUgASgEEhAKCHJldmVyc2VkGAYgASgIIm4K",
            "E0xpc3RJbnZvaWNlUmVzcG9uc2USIAoIaW52b2ljZXMYASADKAsyDi5sbnJw",
            "Yy5JbnZvaWNlEhkKEWxhc3RfaW5kZXhfb2Zmc2V0GAIgASgEEhoKEmZpcnN0",
            "X2luZGV4X29mZnNldBgDIAEoBCI+ChNJbnZvaWNlU3Vic2NyaXB0aW9uEhEK",
            "CWFkZF9pbmRleBgBIAEoBBIUCgxzZXR0bGVfaW5kZXgYAiABKAQi4AMKB1Bh",
            "eW1lbnQSFAoMcGF5bWVudF9oYXNoGAEgASgJEhEKBXZhbHVlGAIgASgDQgIY",
            "ARIZCg1jcmVhdGlvbl9kYXRlGAMgASgDQgIYARIPCgNmZWUYBSABKANCAhgB",
            "EhgKEHBheW1lbnRfcHJlaW1hZ2UYBiABKAkSEQoJdmFsdWVfc2F0GAcgASgD",
            "EhIKCnZhbHVlX21zYXQYCCABKAMSFwoPcGF5bWVudF9yZXF1ZXN0GAkgASgJ",
            "EiwKBnN0YXR1cxgKIAEoDjIcLmxucnBjLlBheW1lbnQuUGF5bWVudFN0YXR1",
            "cxIPCgdmZWVfc2F0GAsgASgDEhAKCGZlZV9tc2F0GAwgASgDEhgKEGNyZWF0",
            "aW9uX3RpbWVfbnMYDSABKAMSIQoFaHRsY3MYDiADKAsyEi5sbnJwYy5IVExD",
            "QXR0ZW1wdBIVCg1wYXltZW50X2luZGV4GA8gASgEEjMKDmZhaWx1cmVfcmVh",
            "c29uGBAgASgOMhsubG5ycGMuUGF5bWVudEZhaWx1cmVSZWFzb24iRgoNUGF5",
            "bWVudFN0YXR1cxILCgdVTktOT1dOEAASDQoJSU5fRkxJR0hUEAESDQoJU1VD",
            "Q0VFREVEEAISCgoGRkFJTEVEEANKBAgEEAUiigIKC0hUTENBdHRlbXB0EhIK",
            "CmF0dGVtcHRfaWQYByABKAQSLQoGc3RhdHVzGAEgASgOMh0ubG5ycGMuSFRM",
            "Q0F0dGVtcHQuSFRMQ1N0YXR1cxIbCgVyb3V0ZRgCIAEoCzIMLmxucnBjLlJv",
            "dXRlEhcKD2F0dGVtcHRfdGltZV9ucxgDIAEoAxIXCg9yZXNvbHZlX3RpbWVf",
            "bnMYBCABKAMSHwoHZmFpbHVyZRgFIAEoCzIOLmxucnBjLkZhaWx1cmUSEAoI",
            "cHJlaW1hZ2UYBiABKAwiNgoKSFRMQ1N0YXR1cxINCglJTl9GTElHSFQQABIN",
            "CglTVUNDRUVERUQQARIKCgZGQUlMRUQQAiJvChNMaXN0UGF5bWVudHNSZXF1",
            "ZXN0EhoKEmluY2x1ZGVfaW5jb21wbGV0ZRgBIAEoCBIUCgxpbmRleF9vZmZz",
            "ZXQYAiABKAQSFAoMbWF4X3BheW1lbnRzGAMgASgEEhAKCHJldmVyc2VkGAQg",
            "ASgIIm8KFExpc3RQYXltZW50c1Jlc3BvbnNlEiAKCHBheW1lbnRzGAEgAygL",
            "Mg4ubG5ycGMuUGF5bWVudBIaChJmaXJzdF9pbmRleF9vZmZzZXQYAiABKAQS",
            "GQoRbGFzdF9pbmRleF9vZmZzZXQYAyABKAQiUwoYRGVsZXRlQWxsUGF5bWVu",
            "dHNSZXF1ZXN0EhwKFGZhaWxlZF9wYXltZW50c19vbmx5GAEgASgIEhkKEWZh",
            "aWxlZF9odGxjc19vbmx5GAIgASgIIhsKGURlbGV0ZUFsbFBheW1lbnRzUmVz",
            "cG9uc2UihgEKFUFiYW5kb25DaGFubmVsUmVxdWVzdBIqCg1jaGFubmVsX3Bv",
            "aW50GAEgASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50EiEKGXBlbmRpbmdfZnVu",
            "ZGluZ19zaGltX29ubHkYAiABKAgSHgoWaV9rbm93X3doYXRfaV9hbV9kb2lu",
            "ZxgDIAEoCCIYChZBYmFuZG9uQ2hhbm5lbFJlc3BvbnNlIjUKEURlYnVnTGV2",
            "ZWxSZXF1ZXN0EgwKBHNob3cYASABKAgSEgoKbGV2ZWxfc3BlYxgCIAEoCSIp",
            "ChJEZWJ1Z0xldmVsUmVzcG9uc2USEwoLc3ViX3N5c3RlbXMYASABKAkiHwoM",
            "UGF5UmVxU3RyaW5nEg8KB3BheV9yZXEYASABKAkihgMKBlBheVJlcRITCgtk",
            "ZXN0aW5hdGlvbhgBIAEoCRIUCgxwYXltZW50X2hhc2gYAiABKAkSFAoMbnVt",
            "X3NhdG9zaGlzGAMgASgDEhEKCXRpbWVzdGFtcBgEIAEoAxIOCgZleHBpcnkY",
            "BSABKAMSEwoLZGVzY3JpcHRpb24YBiABKAkSGAoQZGVzY3JpcHRpb25faGFz",
            "aBgHIAEoCRIVCg1mYWxsYmFja19hZGRyGAggASgJEhMKC2NsdHZfZXhwaXJ5",
            "GAkgASgDEiUKC3JvdXRlX2hpbnRzGAogAygLMhAubG5ycGMuUm91dGVIaW50",
            "EhQKDHBheW1lbnRfYWRkchgLIAEoDBIQCghudW1fbXNhdBgMIAEoAxItCghm",
            "ZWF0dXJlcxgNIAMoCzIbLmxucnBjLlBheVJlcS5GZWF0dXJlc0VudHJ5Gj8K",
            "DUZlYXR1cmVzRW50cnkSCwoDa2V5GAEgASgNEh0KBXZhbHVlGAIgASgLMg4u",
            "bG5ycGMuRmVhdHVyZToCOAEiPgoHRmVhdHVyZRIMCgRuYW1lGAIgASgJEhMK",
            "C2lzX3JlcXVpcmVkGAMgASgIEhAKCGlzX2tub3duGAQgASgIIhIKEEZlZVJl",
            "cG9ydFJlcXVlc3QifAoQQ2hhbm5lbEZlZVJlcG9ydBITCgdjaGFuX2lkGAUg",
            "ASgEQgIwARIVCg1jaGFubmVsX3BvaW50GAEgASgJEhUKDWJhc2VfZmVlX21z",
            "YXQYAiABKAMSEwoLZmVlX3Blcl9taWwYAyABKAMSEAoIZmVlX3JhdGUYBCAB",
            "KAEihAEKEUZlZVJlcG9ydFJlc3BvbnNlEi0KDGNoYW5uZWxfZmVlcxgBIAMo",
            "CzIXLmxucnBjLkNoYW5uZWxGZWVSZXBvcnQSEwoLZGF5X2ZlZV9zdW0YAiAB",
            "KAQSFAoMd2Vla19mZWVfc3VtGAMgASgEEhUKDW1vbnRoX2ZlZV9zdW0YBCAB",
            "KAQi7AEKE1BvbGljeVVwZGF0ZVJlcXVlc3QSEAoGZ2xvYmFsGAEgASgISAAS",
            "KQoKY2hhbl9wb2ludBgCIAEoCzITLmxucnBjLkNoYW5uZWxQb2ludEgAEhUK",
            "DWJhc2VfZmVlX21zYXQYAyABKAMSEAoIZmVlX3JhdGUYBCABKAESFwoPdGlt",
            "ZV9sb2NrX2RlbHRhGAUgASgNEhUKDW1heF9odGxjX21zYXQYBiABKAQSFQoN",
            "bWluX2h0bGNfbXNhdBgHIAEoBBIfChdtaW5faHRsY19tc2F0X3NwZWNpZmll",
            "ZBgIIAEoCEIHCgVzY29wZSIWChRQb2xpY3lVcGRhdGVSZXNwb25zZSJuChhG",
            "b3J3YXJkaW5nSGlzdG9yeVJlcXVlc3QSEgoKc3RhcnRfdGltZRgBIAEoBBIQ",
            "CghlbmRfdGltZRgCIAEoBBIUCgxpbmRleF9vZmZzZXQYAyABKA0SFgoObnVt",
            "X21heF9ldmVudHMYBCABKA0i2gEKD0ZvcndhcmRpbmdFdmVudBIVCgl0aW1l",
            "c3RhbXAYASABKARCAhgBEhYKCmNoYW5faWRfaW4YAiABKARCAjABEhcKC2No",
            "YW5faWRfb3V0GAQgASgEQgIwARIOCgZhbXRfaW4YBSABKAQSDwoHYW10X291",
            "dBgGIAEoBBILCgNmZWUYByABKAQSEAoIZmVlX21zYXQYCCABKAQSEwoLYW10",
            "X2luX21zYXQYCSABKAQSFAoMYW10X291dF9tc2F0GAogASgEEhQKDHRpbWVz",
            "dGFtcF9ucxgLIAEoBCJpChlGb3J3YXJkaW5nSGlzdG9yeVJlc3BvbnNlEjEK",
            "EWZvcndhcmRpbmdfZXZlbnRzGAEgAygLMhYubG5ycGMuRm9yd2FyZGluZ0V2",
            "ZW50EhkKEWxhc3Rfb2Zmc2V0X2luZGV4GAIgASgNIkUKGkV4cG9ydENoYW5u",
            "ZWxCYWNrdXBSZXF1ZXN0EicKCmNoYW5fcG9pbnQYASABKAsyEy5sbnJwYy5D",
            "aGFubmVsUG9pbnQiTQoNQ2hhbm5lbEJhY2t1cBInCgpjaGFuX3BvaW50GAEg",
            "ASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50EhMKC2NoYW5fYmFja3VwGAIgASgM",
            "IlYKD011bHRpQ2hhbkJhY2t1cBIoCgtjaGFuX3BvaW50cxgBIAMoCzITLmxu",
            "cnBjLkNoYW5uZWxQb2ludBIZChFtdWx0aV9jaGFuX2JhY2t1cBgCIAEoDCIZ",
            "ChdDaGFuQmFja3VwRXhwb3J0UmVxdWVzdCJ7ChJDaGFuQmFja3VwU25hcHNo",
            "b3QSMgoTc2luZ2xlX2NoYW5fYmFja3VwcxgBIAEoCzIVLmxucnBjLkNoYW5u",
            "ZWxCYWNrdXBzEjEKEW11bHRpX2NoYW5fYmFja3VwGAIgASgLMhYubG5ycGMu",
            "TXVsdGlDaGFuQmFja3VwIjwKDkNoYW5uZWxCYWNrdXBzEioKDGNoYW5fYmFj",
            "a3VwcxgBIAMoCzIULmxucnBjLkNoYW5uZWxCYWNrdXAicAoYUmVzdG9yZUNo",
            "YW5CYWNrdXBSZXF1ZXN0Ei0KDGNoYW5fYmFja3VwcxgBIAEoCzIVLmxucnBj",
            "LkNoYW5uZWxCYWNrdXBzSAASGwoRbXVsdGlfY2hhbl9iYWNrdXAYAiABKAxI",
            "AEIICgZiYWNrdXAiFwoVUmVzdG9yZUJhY2t1cFJlc3BvbnNlIhsKGUNoYW5u",
            "ZWxCYWNrdXBTdWJzY3JpcHRpb24iGgoYVmVyaWZ5Q2hhbkJhY2t1cFJlc3Bv",
            "bnNlIjQKEk1hY2Fyb29uUGVybWlzc2lvbhIOCgZlbnRpdHkYASABKAkSDgoG",
            "YWN0aW9uGAIgASgJIloKE0Jha2VNYWNhcm9vblJlcXVlc3QSLgoLcGVybWlz",
            "c2lvbnMYASADKAsyGS5sbnJwYy5NYWNhcm9vblBlcm1pc3Npb24SEwoLcm9v",
            "dF9rZXlfaWQYAiABKAQiKAoUQmFrZU1hY2Fyb29uUmVzcG9uc2USEAoIbWFj",
            "YXJvb24YASABKAkiGAoWTGlzdE1hY2Fyb29uSURzUmVxdWVzdCIvChdMaXN0",
            "TWFjYXJvb25JRHNSZXNwb25zZRIUCgxyb290X2tleV9pZHMYASADKAQiLgoX",
            "RGVsZXRlTWFjYXJvb25JRFJlcXVlc3QSEwoLcm9vdF9rZXlfaWQYASABKAQi",
            "KwoYRGVsZXRlTWFjYXJvb25JRFJlc3BvbnNlEg8KB2RlbGV0ZWQYASABKAgi",
            "SAoWTWFjYXJvb25QZXJtaXNzaW9uTGlzdBIuCgtwZXJtaXNzaW9ucxgBIAMo",
            "CzIZLmxucnBjLk1hY2Fyb29uUGVybWlzc2lvbiIYChZMaXN0UGVybWlzc2lv",
            "bnNSZXF1ZXN0IsUBChdMaXN0UGVybWlzc2lvbnNSZXNwb25zZRJRChJtZXRo",
            "b2RfcGVybWlzc2lvbnMYASADKAsyNS5sbnJwYy5MaXN0UGVybWlzc2lvbnNS",
            "ZXNwb25zZS5NZXRob2RQZXJtaXNzaW9uc0VudHJ5GlcKFk1ldGhvZFBlcm1p",
            "c3Npb25zRW50cnkSCwoDa2V5GAEgASgJEiwKBXZhbHVlGAIgASgLMh0ubG5y",
            "cGMuTWFjYXJvb25QZXJtaXNzaW9uTGlzdDoCOAEi1QcKB0ZhaWx1cmUSKAoE",
            "Y29kZRgBIAEoDjIaLmxucnBjLkZhaWx1cmUuRmFpbHVyZUNvZGUSLAoOY2hh",
            "bm5lbF91cGRhdGUYAyABKAsyFC5sbnJwYy5DaGFubmVsVXBkYXRlEhEKCWh0",
            "bGNfbXNhdBgEIAEoBBIVCg1vbmlvbl9zaGFfMjU2GAUgASgMEhMKC2NsdHZf",
            "ZXhwaXJ5GAYgASgNEg0KBWZsYWdzGAcgASgNEhwKFGZhaWx1cmVfc291cmNl",
            "X2luZGV4GAggASgNEg4KBmhlaWdodBgJIAEoDSLvBQoLRmFpbHVyZUNvZGUS",
            "DAoIUkVTRVJWRUQQABIoCiRJTkNPUlJFQ1RfT1JfVU5LTk9XTl9QQVlNRU5U",
            "X0RFVEFJTFMQARIcChhJTkNPUlJFQ1RfUEFZTUVOVF9BTU9VTlQQAhIfChtG",
            "SU5BTF9JTkNPUlJFQ1RfQ0xUVl9FWFBJUlkQAxIfChtGSU5BTF9JTkNPUlJF",
            "Q1RfSFRMQ19BTU9VTlQQBBIZChVGSU5BTF9FWFBJUllfVE9PX1NPT04QBRIR",
            "Cg1JTlZBTElEX1JFQUxNEAYSEwoPRVhQSVJZX1RPT19TT09OEAcSGQoVSU5W",
            "QUxJRF9PTklPTl9WRVJTSU9OEAgSFgoSSU5WQUxJRF9PTklPTl9ITUFDEAkS",
            "FQoRSU5WQUxJRF9PTklPTl9LRVkQChIYChRBTU9VTlRfQkVMT1dfTUlOSU1V",
            "TRALEhQKEEZFRV9JTlNVRkZJQ0lFTlQQDBIZChVJTkNPUlJFQ1RfQ0xUVl9F",
            "WFBJUlkQDRIUChBDSEFOTkVMX0RJU0FCTEVEEA4SHQoZVEVNUE9SQVJZX0NI",
            "QU5ORUxfRkFJTFVSRRAPEiEKHVJFUVVJUkVEX05PREVfRkVBVFVSRV9NSVNT",
            "SU5HEBASJAogUkVRVUlSRURfQ0hBTk5FTF9GRUFUVVJFX01JU1NJTkcQERIV",
            "ChFVTktOT1dOX05FWFRfUEVFUhASEhoKFlRFTVBPUkFSWV9OT0RFX0ZBSUxV",
            "UkUQExIaChZQRVJNQU5FTlRfTk9ERV9GQUlMVVJFEBQSHQoZUEVSTUFORU5U",
            "X0NIQU5ORUxfRkFJTFVSRRAVEhIKDkVYUElSWV9UT09fRkFSEBYSDwoLTVBQ",
            "X1RJTUVPVVQQFxIZChVJTlZBTElEX09OSU9OX1BBWUxPQUQQGBIVChBJTlRF",
            "Uk5BTF9GQUlMVVJFEOUHEhQKD1VOS05PV05fRkFJTFVSRRDmBxIXChJVTlJF",
            "QURBQkxFX0ZBSUxVUkUQ5wdKBAgCEAMimgIKDUNoYW5uZWxVcGRhdGUSEQoJ",
            "c2lnbmF0dXJlGAEgASgMEhIKCmNoYWluX2hhc2gYAiABKAwSEwoHY2hhbl9p",
            "ZBgDIAEoBEICMAESEQoJdGltZXN0YW1wGAQgASgNEhUKDW1lc3NhZ2VfZmxh",
            "Z3MYCiABKA0SFQoNY2hhbm5lbF9mbGFncxgFIAEoDRIXCg90aW1lX2xvY2tf",
            "ZGVsdGEYBiABKA0SGQoRaHRsY19taW5pbXVtX21zYXQYByABKAQSEAoIYmFz",
            "ZV9mZWUYCCABKA0SEAoIZmVlX3JhdGUYCSABKA0SGQoRaHRsY19tYXhpbXVt",
            "X21zYXQYCyABKAQSGQoRZXh0cmFfb3BhcXVlX2RhdGEYDCABKAwiRgoKTWFj",
            "YXJvb25JZBINCgVub25jZRgBIAEoDBIRCglzdG9yYWdlSWQYAiABKAwSFgoD",
            "b3BzGAMgAygLMgkubG5ycGMuT3AiJQoCT3ASDgoGZW50aXR5GAEgASgJEg8K",
            "B2FjdGlvbnMYAiADKAkqfQoLQWRkcmVzc1R5cGUSFwoTV0lUTkVTU19QVUJL",
            "RVlfSEFTSBAAEhYKEk5FU1RFRF9QVUJLRVlfSEFTSBABEh4KGlVOVVNFRF9X",
            "SVRORVNTX1BVQktFWV9IQVNIEAISHQoZVU5VU0VEX05FU1RFRF9QVUJLRVlf",
            "SEFTSBADKl4KDkNvbW1pdG1lbnRUeXBlEgoKBkxFR0FDWRAAEhUKEVNUQVRJ",
            "Q19SRU1PVEVfS0VZEAESCwoHQU5DSE9SUxACEhwKF1VOS05PV05fQ09NTUlU",
            "TUVOVF9UWVBFEOcHKmEKCUluaXRpYXRvchIVChFJTklUSUFUT1JfVU5LTk9X",
            "ThAAEhMKD0lOSVRJQVRPUl9MT0NBTBABEhQKEElOSVRJQVRPUl9SRU1PVEUQ",
            "AhISCg5JTklUSUFUT1JfQk9USBADKmAKDlJlc29sdXRpb25UeXBlEhAKDFRZ",
            "UEVfVU5LTk9XThAAEgoKBkFOQ0hPUhABEhEKDUlOQ09NSU5HX0hUTEMQAhIR",
            "Cg1PVVRHT0lOR19IVExDEAMSCgoGQ09NTUlUEAQqcQoRUmVzb2x1dGlvbk91",
            "dGNvbWUSEwoPT1VUQ09NRV9VTktOT1dOEAASCwoHQ0xBSU1FRBABEg0KCVVO",
            "Q0xBSU1FRBACEg0KCUFCQU5ET05FRBADEg8KC0ZJUlNUX1NUQUdFEAQSCwoH",
            "VElNRU9VVBAFKjkKDk5vZGVNZXRyaWNUeXBlEgsKB1VOS05PV04QABIaChZC",
            "RVRXRUVOTkVTU19DRU5UUkFMSVRZEAEqOwoQSW52b2ljZUhUTENTdGF0ZRIM",
            "CghBQ0NFUFRFRBAAEgsKB1NFVFRMRUQQARIMCghDQU5DRUxFRBACKtkBChRQ",
            "YXltZW50RmFpbHVyZVJlYXNvbhIXChNGQUlMVVJFX1JFQVNPTl9OT05FEAAS",
            "GgoWRkFJTFVSRV9SRUFTT05fVElNRU9VVBABEhsKF0ZBSUxVUkVfUkVBU09O",
            "X05PX1JPVVRFEAISGAoURkFJTFVSRV9SRUFTT05fRVJST1IQAxIsCihGQUlM",
            "VVJFX1JFQVNPTl9JTkNPUlJFQ1RfUEFZTUVOVF9ERVRBSUxTEAQSJwojRkFJ",
            "TFVSRV9SRUFTT05fSU5TVUZGSUNJRU5UX0JBTEFOQ0UQBSrPBAoKRmVhdHVy",
            "ZUJpdBIYChREQVRBTE9TU19QUk9URUNUX1JFURAAEhgKFERBVEFMT1NTX1BS",
            "T1RFQ1RfT1BUEAESFwoTSU5JVElBTF9ST1VJTkdfU1lOQxADEh8KG1VQRlJP",
            "TlRfU0hVVERPV05fU0NSSVBUX1JFURAEEh8KG1VQRlJPTlRfU0hVVERPV05f",
            "U0NSSVBUX09QVBAFEhYKEkdPU1NJUF9RVUVSSUVTX1JFURAGEhYKEkdPU1NJ",
            "UF9RVUVSSUVTX09QVBAHEhEKDVRMVl9PTklPTl9SRVEQCBIRCg1UTFZfT05J",
            "T05fT1BUEAkSGgoWRVhUX0dPU1NJUF9RVUVSSUVTX1JFURAKEhoKFkVYVF9H",
            "T1NTSVBfUVVFUklFU19PUFQQCxIZChVTVEFUSUNfUkVNT1RFX0tFWV9SRVEQ",
            "DBIZChVTVEFUSUNfUkVNT1RFX0tFWV9PUFQQDRIUChBQQVlNRU5UX0FERFJf",
            "UkVREA4SFAoQUEFZTUVOVF9BRERSX09QVBAPEgsKB01QUF9SRVEQEBILCgdN",
            "UFBfT1BUEBESFgoSV1VNQk9fQ0hBTk5FTFNfUkVREBISFgoSV1VNQk9fQ0hB",
            "Tk5FTFNfT1BUEBMSDwoLQU5DSE9SU19SRVEQFBIPCgtBTkNIT1JTX09QVBAV",
            "Eh0KGUFOQ0hPUlNfWkVST19GRUVfSFRMQ19SRVEQFhIdChlBTkNIT1JTX1pF",
            "Uk9fRkVFX0hUTENfT1BUEBcSCwoHQU1QX1JFURAeEgsKB0FNUF9PUFQQHzLJ",
            "IQoJTGlnaHRuaW5nEkoKDVdhbGxldEJhbGFuY2USGy5sbnJwYy5XYWxsZXRC",
            "YWxhbmNlUmVxdWVzdBocLmxucnBjLldhbGxldEJhbGFuY2VSZXNwb25zZRJN",
            "Cg5DaGFubmVsQmFsYW5jZRIcLmxucnBjLkNoYW5uZWxCYWxhbmNlUmVxdWVz",
            "dBodLmxucnBjLkNoYW5uZWxCYWxhbmNlUmVzcG9uc2USSwoPR2V0VHJhbnNh",
            "Y3Rpb25zEh0ubG5ycGMuR2V0VHJhbnNhY3Rpb25zUmVxdWVzdBoZLmxucnBj",
            "LlRyYW5zYWN0aW9uRGV0YWlscxJECgtFc3RpbWF0ZUZlZRIZLmxucnBjLkVz",
            "dGltYXRlRmVlUmVxdWVzdBoaLmxucnBjLkVzdGltYXRlRmVlUmVzcG9uc2US",
            "PgoJU2VuZENvaW5zEhcubG5ycGMuU2VuZENvaW5zUmVxdWVzdBoYLmxucnBj",
            "LlNlbmRDb2luc1Jlc3BvbnNlEkQKC0xpc3RVbnNwZW50EhkubG5ycGMuTGlz",
            "dFVuc3BlbnRSZXF1ZXN0GhoubG5ycGMuTGlzdFVuc3BlbnRSZXNwb25zZRJM",
            "ChVTdWJzY3JpYmVUcmFuc2FjdGlvbnMSHS5sbnJwYy5HZXRUcmFuc2FjdGlv",
            "bnNSZXF1ZXN0GhIubG5ycGMuVHJhbnNhY3Rpb24wARI7CghTZW5kTWFueRIW",
            "LmxucnBjLlNlbmRNYW55UmVxdWVzdBoXLmxucnBjLlNlbmRNYW55UmVzcG9u",
            "c2USQQoKTmV3QWRkcmVzcxIYLmxucnBjLk5ld0FkZHJlc3NSZXF1ZXN0Ghku",
            "bG5ycGMuTmV3QWRkcmVzc1Jlc3BvbnNlEkQKC1NpZ25NZXNzYWdlEhkubG5y",
            "cGMuU2lnbk1lc3NhZ2VSZXF1ZXN0GhoubG5ycGMuU2lnbk1lc3NhZ2VSZXNw",
            "b25zZRJKCg1WZXJpZnlNZXNzYWdlEhsubG5ycGMuVmVyaWZ5TWVzc2FnZVJl",
            "cXVlc3QaHC5sbnJwYy5WZXJpZnlNZXNzYWdlUmVzcG9uc2USRAoLQ29ubmVj",
            "dFBlZXISGS5sbnJwYy5Db25uZWN0UGVlclJlcXVlc3QaGi5sbnJwYy5Db25u",
            "ZWN0UGVlclJlc3BvbnNlEk0KDkRpc2Nvbm5lY3RQZWVyEhwubG5ycGMuRGlz",
            "Y29ubmVjdFBlZXJSZXF1ZXN0Gh0ubG5ycGMuRGlzY29ubmVjdFBlZXJSZXNw",
            "b25zZRI+CglMaXN0UGVlcnMSFy5sbnJwYy5MaXN0UGVlcnNSZXF1ZXN0Ghgu",
            "bG5ycGMuTGlzdFBlZXJzUmVzcG9uc2USRwoTU3Vic2NyaWJlUGVlckV2ZW50",
            "cxIcLmxucnBjLlBlZXJFdmVudFN1YnNjcmlwdGlvbhoQLmxucnBjLlBlZXJF",
            "dmVudDABEjgKB0dldEluZm8SFS5sbnJwYy5HZXRJbmZvUmVxdWVzdBoWLmxu",
            "cnBjLkdldEluZm9SZXNwb25zZRJQCg9HZXRSZWNvdmVyeUluZm8SHS5sbnJw",
            "Yy5HZXRSZWNvdmVyeUluZm9SZXF1ZXN0Gh4ubG5ycGMuR2V0UmVjb3ZlcnlJ",
            "bmZvUmVzcG9uc2USUAoPUGVuZGluZ0NoYW5uZWxzEh0ubG5ycGMuUGVuZGlu",
            "Z0NoYW5uZWxzUmVxdWVzdBoeLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3Bv",
            "bnNlEkcKDExpc3RDaGFubmVscxIaLmxucnBjLkxpc3RDaGFubmVsc1JlcXVl",
            "c3QaGy5sbnJwYy5MaXN0Q2hhbm5lbHNSZXNwb25zZRJWChZTdWJzY3JpYmVD",
            "aGFubmVsRXZlbnRzEh8ubG5ycGMuQ2hhbm5lbEV2ZW50U3Vic2NyaXB0aW9u",
            "GhkubG5ycGMuQ2hhbm5lbEV2ZW50VXBkYXRlMAESTQoOQ2xvc2VkQ2hhbm5l",
            "bHMSHC5sbnJwYy5DbG9zZWRDaGFubmVsc1JlcXVlc3QaHS5sbnJwYy5DbG9z",
            "ZWRDaGFubmVsc1Jlc3BvbnNlEkEKD09wZW5DaGFubmVsU3luYxIZLmxucnBj",
            "Lk9wZW5DaGFubmVsUmVxdWVzdBoTLmxucnBjLkNoYW5uZWxQb2ludBJDCgtP",
            "cGVuQ2hhbm5lbBIZLmxucnBjLk9wZW5DaGFubmVsUmVxdWVzdBoXLmxucnBj",
            "Lk9wZW5TdGF0dXNVcGRhdGUwARJMChBGdW5kaW5nU3RhdGVTdGVwEhsubG5y",
            "cGMuRnVuZGluZ1RyYW5zaXRpb25Nc2caGy5sbnJwYy5GdW5kaW5nU3RhdGVT",
            "dGVwUmVzcBJQCg9DaGFubmVsQWNjZXB0b3ISHC5sbnJwYy5DaGFubmVsQWNj",
            "ZXB0UmVzcG9uc2UaGy5sbnJwYy5DaGFubmVsQWNjZXB0UmVxdWVzdCgBMAES",
            "RgoMQ2xvc2VDaGFubmVsEhoubG5ycGMuQ2xvc2VDaGFubmVsUmVxdWVzdBoY",
            "LmxucnBjLkNsb3NlU3RhdHVzVXBkYXRlMAESTQoOQWJhbmRvbkNoYW5uZWwS",
            "HC5sbnJwYy5BYmFuZG9uQ2hhbm5lbFJlcXVlc3QaHS5sbnJwYy5BYmFuZG9u",
            "Q2hhbm5lbFJlc3BvbnNlEj8KC1NlbmRQYXltZW50EhIubG5ycGMuU2VuZFJl",
            "cXVlc3QaEy5sbnJwYy5TZW5kUmVzcG9uc2UiA4gCASgBMAESOgoPU2VuZFBh",
            "eW1lbnRTeW5jEhIubG5ycGMuU2VuZFJlcXVlc3QaEy5sbnJwYy5TZW5kUmVz",
            "cG9uc2USRgoLU2VuZFRvUm91dGUSGS5sbnJwYy5TZW5kVG9Sb3V0ZVJlcXVl",
            "c3QaEy5sbnJwYy5TZW5kUmVzcG9uc2UiA4gCASgBMAESQQoPU2VuZFRvUm91",
            "dGVTeW5jEhkubG5ycGMuU2VuZFRvUm91dGVSZXF1ZXN0GhMubG5ycGMuU2Vu",
            "ZFJlc3BvbnNlEjcKCkFkZEludm9pY2USDi5sbnJwYy5JbnZvaWNlGhkubG5y",
            "cGMuQWRkSW52b2ljZVJlc3BvbnNlEkUKDExpc3RJbnZvaWNlcxIZLmxucnBj",
            "Lkxpc3RJbnZvaWNlUmVxdWVzdBoaLmxucnBjLkxpc3RJbnZvaWNlUmVzcG9u",
            "c2USMwoNTG9va3VwSW52b2ljZRISLmxucnBjLlBheW1lbnRIYXNoGg4ubG5y",
            "cGMuSW52b2ljZRJBChFTdWJzY3JpYmVJbnZvaWNlcxIaLmxucnBjLkludm9p",
            "Y2VTdWJzY3JpcHRpb24aDi5sbnJwYy5JbnZvaWNlMAESMgoMRGVjb2RlUGF5",
            "UmVxEhMubG5ycGMuUGF5UmVxU3RyaW5nGg0ubG5ycGMuUGF5UmVxEkcKDExp",
            "c3RQYXltZW50cxIaLmxucnBjLkxpc3RQYXltZW50c1JlcXVlc3QaGy5sbnJw",
            "Yy5MaXN0UGF5bWVudHNSZXNwb25zZRJWChFEZWxldGVBbGxQYXltZW50cxIf",
            "LmxucnBjLkRlbGV0ZUFsbFBheW1lbnRzUmVxdWVzdBogLmxucnBjLkRlbGV0",
            "ZUFsbFBheW1lbnRzUmVzcG9uc2USQAoNRGVzY3JpYmVHcmFwaBIaLmxucnBj",
            "LkNoYW5uZWxHcmFwaFJlcXVlc3QaEy5sbnJwYy5DaGFubmVsR3JhcGgSRwoO",
            "R2V0Tm9kZU1ldHJpY3MSGS5sbnJwYy5Ob2RlTWV0cmljc1JlcXVlc3QaGi5s",
            "bnJwYy5Ob2RlTWV0cmljc1Jlc3BvbnNlEjkKC0dldENoYW5JbmZvEhYubG5y",
            "cGMuQ2hhbkluZm9SZXF1ZXN0GhIubG5ycGMuQ2hhbm5lbEVkZ2USNgoLR2V0",
            "Tm9kZUluZm8SFi5sbnJwYy5Ob2RlSW5mb1JlcXVlc3QaDy5sbnJwYy5Ob2Rl",
            "SW5mbxJECgtRdWVyeVJvdXRlcxIZLmxucnBjLlF1ZXJ5Um91dGVzUmVxdWVz",
            "dBoaLmxucnBjLlF1ZXJ5Um91dGVzUmVzcG9uc2USPwoOR2V0TmV0d29ya0lu",
            "Zm8SGS5sbnJwYy5OZXR3b3JrSW5mb1JlcXVlc3QaEi5sbnJwYy5OZXR3b3Jr",
            "SW5mbxI1CgpTdG9wRGFlbW9uEhIubG5ycGMuU3RvcFJlcXVlc3QaEy5sbnJw",
            "Yy5TdG9wUmVzcG9uc2USVwoVU3Vic2NyaWJlQ2hhbm5lbEdyYXBoEiAubG5y",
            "cGMuR3JhcGhUb3BvbG9neVN1YnNjcmlwdGlvbhoaLmxucnBjLkdyYXBoVG9w",
            "b2xvZ3lVcGRhdGUwARJBCgpEZWJ1Z0xldmVsEhgubG5ycGMuRGVidWdMZXZl",
            "bFJlcXVlc3QaGS5sbnJwYy5EZWJ1Z0xldmVsUmVzcG9uc2USPgoJRmVlUmVw",
            "b3J0EhcubG5ycGMuRmVlUmVwb3J0UmVxdWVzdBoYLmxucnBjLkZlZVJlcG9y",
            "dFJlc3BvbnNlEk4KE1VwZGF0ZUNoYW5uZWxQb2xpY3kSGi5sbnJwYy5Qb2xp",
            "Y3lVcGRhdGVSZXF1ZXN0GhsubG5ycGMuUG9saWN5VXBkYXRlUmVzcG9uc2US",
            "VgoRRm9yd2FyZGluZ0hpc3RvcnkSHy5sbnJwYy5Gb3J3YXJkaW5nSGlzdG9y",
            "eVJlcXVlc3QaIC5sbnJwYy5Gb3J3YXJkaW5nSGlzdG9yeVJlc3BvbnNlEk4K",
            "E0V4cG9ydENoYW5uZWxCYWNrdXASIS5sbnJwYy5FeHBvcnRDaGFubmVsQmFj",
            "a3VwUmVxdWVzdBoULmxucnBjLkNoYW5uZWxCYWNrdXASVAoXRXhwb3J0QWxs",
            "Q2hhbm5lbEJhY2t1cHMSHi5sbnJwYy5DaGFuQmFja3VwRXhwb3J0UmVxdWVz",
            "dBoZLmxucnBjLkNoYW5CYWNrdXBTbmFwc2hvdBJOChBWZXJpZnlDaGFuQmFj",
            "a3VwEhkubG5ycGMuQ2hhbkJhY2t1cFNuYXBzaG90Gh8ubG5ycGMuVmVyaWZ5",
            "Q2hhbkJhY2t1cFJlc3BvbnNlElYKFVJlc3RvcmVDaGFubmVsQmFja3VwcxIf",
            "LmxucnBjLlJlc3RvcmVDaGFuQmFja3VwUmVxdWVzdBocLmxucnBjLlJlc3Rv",
            "cmVCYWNrdXBSZXNwb25zZRJYChdTdWJzY3JpYmVDaGFubmVsQmFja3VwcxIg",
            "LmxucnBjLkNoYW5uZWxCYWNrdXBTdWJzY3JpcHRpb24aGS5sbnJwYy5DaGFu",
            "QmFja3VwU25hcHNob3QwARJHCgxCYWtlTWFjYXJvb24SGi5sbnJwYy5CYWtl",
            "TWFjYXJvb25SZXF1ZXN0GhsubG5ycGMuQmFrZU1hY2Fyb29uUmVzcG9uc2US",
            "UAoPTGlzdE1hY2Fyb29uSURzEh0ubG5ycGMuTGlzdE1hY2Fyb29uSURzUmVx",
            "dWVzdBoeLmxucnBjLkxpc3RNYWNhcm9vbklEc1Jlc3BvbnNlElMKEERlbGV0",
            "ZU1hY2Fyb29uSUQSHi5sbnJwYy5EZWxldGVNYWNhcm9vbklEUmVxdWVzdBof",
            "LmxucnBjLkRlbGV0ZU1hY2Fyb29uSURSZXNwb25zZRJQCg9MaXN0UGVybWlz",
            "c2lvbnMSHS5sbnJwYy5MaXN0UGVybWlzc2lvbnNSZXF1ZXN0Gh4ubG5ycGMu",
            "TGlzdFBlcm1pc3Npb25zUmVzcG9uc2VCJ1olZ2l0aHViLmNvbS9saWdodG5p",
            "bmduZXR3b3JrL2xuZC9sbnJwY2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Lnrpc.AddressType), typeof(global::Lnrpc.CommitmentType), typeof(global::Lnrpc.Initiator), typeof(global::Lnrpc.ResolutionType), typeof(global::Lnrpc.ResolutionOutcome), typeof(global::Lnrpc.NodeMetricType), typeof(global::Lnrpc.InvoiceHTLCState), typeof(global::Lnrpc.PaymentFailureReason), typeof(global::Lnrpc.FeatureBit), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Utxo), global::Lnrpc.Utxo.Parser, new[]{ "AddressType", "Address", "AmountSat", "PkScript", "Outpoint", "Confirmations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Transaction), global::Lnrpc.Transaction.Parser, new[]{ "TxHash", "Amount", "NumConfirmations", "BlockHash", "BlockHeight", "TimeStamp", "TotalFees", "DestAddresses", "RawTxHex", "Label" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetTransactionsRequest), global::Lnrpc.GetTransactionsRequest.Parser, new[]{ "StartHeight", "EndHeight", "Account" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.TransactionDetails), global::Lnrpc.TransactionDetails.Parser, new[]{ "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeLimit), global::Lnrpc.FeeLimit.Parser, new[]{ "Fixed", "FixedMsat", "Percent" }, new[]{ "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendRequest), global::Lnrpc.SendRequest.Parser, new[]{ "Dest", "DestString", "Amt", "AmtMsat", "PaymentHash", "PaymentHashString", "PaymentRequest", "FinalCltvDelta", "FeeLimit", "OutgoingChanId", "LastHopPubkey", "CltvLimit", "DestCustomRecords", "AllowSelfPayment", "DestFeatures", "PaymentAddr" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendResponse), global::Lnrpc.SendResponse.Parser, new[]{ "PaymentError", "PaymentPreimage", "PaymentRoute", "PaymentHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendToRouteRequest), global::Lnrpc.SendToRouteRequest.Parser, new[]{ "PaymentHash", "PaymentHashString", "Route" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelAcceptRequest), global::Lnrpc.ChannelAcceptRequest.Parser, new[]{ "NodePubkey", "ChainHash", "PendingChanId", "FundingAmt", "PushAmt", "DustLimit", "MaxValueInFlight", "ChannelReserve", "MinHtlc", "FeePerKw", "CsvDelay", "MaxAcceptedHtlcs", "ChannelFlags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelAcceptResponse), global::Lnrpc.ChannelAcceptResponse.Parser, new[]{ "Accept", "PendingChanId", "Error", "UpfrontShutdown", "CsvDelay", "ReserveSat", "InFlightMaxMsat", "MaxHtlcCount", "MinHtlcIn", "MinAcceptDepth" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelPoint), global::Lnrpc.ChannelPoint.Parser, new[]{ "FundingTxidBytes", "FundingTxidStr", "OutputIndex" }, new[]{ "FundingTxid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OutPoint), global::Lnrpc.OutPoint.Parser, new[]{ "TxidBytes", "TxidStr", "OutputIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningAddress), global::Lnrpc.LightningAddress.Parser, new[]{ "Pubkey", "Host" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EstimateFeeRequest), global::Lnrpc.EstimateFeeRequest.Parser, new[]{ "AddrToAmount", "TargetConf", "MinConfs", "SpendUnconfirmed" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EstimateFeeResponse), global::Lnrpc.EstimateFeeResponse.Parser, new[]{ "FeeSat", "FeerateSatPerByte", "SatPerVbyte" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyRequest), global::Lnrpc.SendManyRequest.Parser, new[]{ "AddrToAmount", "TargetConf", "SatPerVbyte", "SatPerByte", "Label", "MinConfs", "SpendUnconfirmed" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyResponse), global::Lnrpc.SendManyResponse.Parser, new[]{ "Txid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsRequest), global::Lnrpc.SendCoinsRequest.Parser, new[]{ "Addr", "Amount", "TargetConf", "SatPerVbyte", "SatPerByte", "SendAll", "Label", "MinConfs", "SpendUnconfirmed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsResponse), global::Lnrpc.SendCoinsResponse.Parser, new[]{ "Txid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListUnspentRequest), global::Lnrpc.ListUnspentRequest.Parser, new[]{ "MinConfs", "MaxConfs", "Account" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListUnspentResponse), global::Lnrpc.ListUnspentResponse.Parser, new[]{ "Utxos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressRequest), global::Lnrpc.NewAddressRequest.Parser, new[]{ "Type", "Account" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressResponse), global::Lnrpc.NewAddressResponse.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageRequest), global::Lnrpc.SignMessageRequest.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageResponse), global::Lnrpc.SignMessageResponse.Parser, new[]{ "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageRequest), global::Lnrpc.VerifyMessageRequest.Parser, new[]{ "Msg", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageResponse), global::Lnrpc.VerifyMessageResponse.Parser, new[]{ "Valid", "Pubkey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerRequest), global::Lnrpc.ConnectPeerRequest.Parser, new[]{ "Addr", "Perm", "Timeout" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerResponse), global::Lnrpc.ConnectPeerResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerRequest), global::Lnrpc.DisconnectPeerRequest.Parser, new[]{ "PubKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerResponse), global::Lnrpc.DisconnectPeerResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HTLC), global::Lnrpc.HTLC.Parser, new[]{ "Incoming", "Amount", "HashLock", "ExpirationHeight", "HtlcIndex", "ForwardingChannel", "ForwardingHtlcIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelConstraints), global::Lnrpc.ChannelConstraints.Parser, new[]{ "CsvDelay", "ChanReserveSat", "DustLimitSat", "MaxPendingAmtMsat", "MinHtlcMsat", "MaxAcceptedHtlcs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Channel), global::Lnrpc.Channel.Parser, new[]{ "Active", "RemotePubkey", "ChannelPoint", "ChanId", "Capacity", "LocalBalance", "RemoteBalance", "CommitFee", "CommitWeight", "FeePerKw", "UnsettledBalance", "TotalSatoshisSent", "TotalSatoshisReceived", "NumUpdates", "PendingHtlcs", "CsvDelay", "Private", "Initiator", "ChanStatusFlags", "LocalChanReserveSat", "RemoteChanReserveSat", "StaticRemoteKey", "CommitmentType", "Lifetime", "Uptime", "CloseAddress", "PushAmountSat", "ThawHeight", "LocalConstraints", "RemoteConstraints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsRequest), global::Lnrpc.ListChannelsRequest.Parser, new[]{ "ActiveOnly", "InactiveOnly", "PublicOnly", "PrivateOnly", "Peer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsResponse), global::Lnrpc.ListChannelsResponse.Parser, new[]{ "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelCloseSummary), global::Lnrpc.ChannelCloseSummary.Parser, new[]{ "ChannelPoint", "ChanId", "ChainHash", "ClosingTxHash", "RemotePubkey", "Capacity", "CloseHeight", "SettledBalance", "TimeLockedBalance", "CloseType", "OpenInitiator", "CloseInitiator", "Resolutions" }, null, new[]{ typeof(global::Lnrpc.ChannelCloseSummary.Types.ClosureType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Resolution), global::Lnrpc.Resolution.Parser, new[]{ "ResolutionType", "Outcome", "Outpoint", "AmountSat", "SweepTxid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelsRequest), global::Lnrpc.ClosedChannelsRequest.Parser, new[]{ "Cooperative", "LocalForce", "RemoteForce", "Breach", "FundingCanceled", "Abandoned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelsResponse), global::Lnrpc.ClosedChannelsResponse.Parser, new[]{ "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Peer), global::Lnrpc.Peer.Parser, new[]{ "PubKey", "Address", "BytesSent", "BytesRecv", "SatSent", "SatRecv", "Inbound", "PingTime", "SyncType", "Features", "Errors", "FlapCount", "LastFlapNs" }, null, new[]{ typeof(global::Lnrpc.Peer.Types.SyncType) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.TimestampedError), global::Lnrpc.TimestampedError.Parser, new[]{ "Timestamp", "Error" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersRequest), global::Lnrpc.ListPeersRequest.Parser, new[]{ "LatestError" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersResponse), global::Lnrpc.ListPeersResponse.Parser, new[]{ "Peers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PeerEventSubscription), global::Lnrpc.PeerEventSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PeerEvent), global::Lnrpc.PeerEvent.Parser, new[]{ "PubKey", "Type" }, null, new[]{ typeof(global::Lnrpc.PeerEvent.Types.EventType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoRequest), global::Lnrpc.GetInfoRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoResponse), global::Lnrpc.GetInfoResponse.Parser, new[]{ "Version", "CommitHash", "IdentityPubkey", "Alias", "Color", "NumPendingChannels", "NumActiveChannels", "NumInactiveChannels", "NumPeers", "BlockHeight", "BlockHash", "BestHeaderTimestamp", "SyncedToChain", "SyncedToGraph", "Testnet", "Chains", "Uris", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetRecoveryInfoRequest), global::Lnrpc.GetRecoveryInfoRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetRecoveryInfoResponse), global::Lnrpc.GetRecoveryInfoResponse.Parser, new[]{ "RecoveryMode", "RecoveryFinished", "Progress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Chain), global::Lnrpc.Chain.Parser, new[]{ "Chain_", "Network" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConfirmationUpdate), global::Lnrpc.ConfirmationUpdate.Parser, new[]{ "BlockSha", "BlockHeight", "NumConfsLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelOpenUpdate), global::Lnrpc.ChannelOpenUpdate.Parser, new[]{ "ChannelPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelCloseUpdate), global::Lnrpc.ChannelCloseUpdate.Parser, new[]{ "ClosingTxid", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseChannelRequest), global::Lnrpc.CloseChannelRequest.Parser, new[]{ "ChannelPoint", "Force", "TargetConf", "SatPerByte", "DeliveryAddress", "SatPerVbyte" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseStatusUpdate), global::Lnrpc.CloseStatusUpdate.Parser, new[]{ "ClosePending", "ChanClose" }, new[]{ "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingUpdate), global::Lnrpc.PendingUpdate.Parser, new[]{ "Txid", "OutputIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ReadyForPsbtFunding), global::Lnrpc.ReadyForPsbtFunding.Parser, new[]{ "FundingAddress", "FundingAmount", "Psbt" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenChannelRequest), global::Lnrpc.OpenChannelRequest.Parser, new[]{ "SatPerVbyte", "NodePubkey", "NodePubkeyString", "LocalFundingAmount", "PushSat", "TargetConf", "SatPerByte", "Private", "MinHtlcMsat", "RemoteCsvDelay", "MinConfs", "SpendUnconfirmed", "CloseAddress", "FundingShim", "RemoteMaxValueInFlightMsat", "RemoteMaxHtlcs", "MaxLocalCsv" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenStatusUpdate), global::Lnrpc.OpenStatusUpdate.Parser, new[]{ "ChanPending", "ChanOpen", "PsbtFund", "PendingChanId" }, new[]{ "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.KeyLocator), global::Lnrpc.KeyLocator.Parser, new[]{ "KeyFamily", "KeyIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.KeyDescriptor), global::Lnrpc.KeyDescriptor.Parser, new[]{ "RawKeyBytes", "KeyLoc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanPointShim), global::Lnrpc.ChanPointShim.Parser, new[]{ "Amt", "ChanPoint", "LocalKey", "RemoteKey", "PendingChanId", "ThawHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PsbtShim), global::Lnrpc.PsbtShim.Parser, new[]{ "PendingChanId", "BasePsbt", "NoPublish" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingShim), global::Lnrpc.FundingShim.Parser, new[]{ "ChanPointShim", "PsbtShim" }, new[]{ "Shim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingShimCancel), global::Lnrpc.FundingShimCancel.Parser, new[]{ "PendingChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingPsbtVerify), global::Lnrpc.FundingPsbtVerify.Parser, new[]{ "FundedPsbt", "PendingChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingPsbtFinalize), global::Lnrpc.FundingPsbtFinalize.Parser, new[]{ "SignedPsbt", "PendingChanId", "FinalRawTx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingTransitionMsg), global::Lnrpc.FundingTransitionMsg.Parser, new[]{ "ShimRegister", "ShimCancel", "PsbtVerify", "PsbtFinalize" }, new[]{ "Trigger" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingStateStepResp), global::Lnrpc.FundingStateStepResp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingHTLC), global::Lnrpc.PendingHTLC.Parser, new[]{ "Incoming", "Amount", "Outpoint", "MaturityHeight", "BlocksTilMaturity", "Stage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsRequest), global::Lnrpc.PendingChannelsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse), global::Lnrpc.PendingChannelsResponse.Parser, new[]{ "TotalLimboBalance", "PendingOpenChannels", "PendingClosingChannels", "PendingForceClosingChannels", "WaitingCloseChannels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingChannel.Parser, new[]{ "RemoteNodePub", "ChannelPoint", "Capacity", "LocalBalance", "RemoteBalance", "LocalChanReserveSat", "RemoteChanReserveSat", "Initiator", "CommitmentType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser, new[]{ "Channel", "ConfirmationHeight", "CommitFee", "CommitWeight", "FeePerKw" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel), global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel.Parser, new[]{ "Channel", "LimboBalance", "Commitments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.Commitments), global::Lnrpc.PendingChannelsResponse.Types.Commitments.Parser, new[]{ "LocalTxid", "RemoteTxid", "RemotePendingTxid", "LocalCommitFeeSat", "RemoteCommitFeeSat", "RemotePendingCommitFeeSat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser, new[]{ "Channel", "ClosingTxid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser, new[]{ "Channel", "ClosingTxid", "LimboBalance", "MaturityHeight", "BlocksTilMaturity", "RecoveredBalance", "PendingHtlcs", "Anchor" }, null, new[]{ typeof(global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEventSubscription), global::Lnrpc.ChannelEventSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEventUpdate), global::Lnrpc.ChannelEventUpdate.Parser, new[]{ "OpenChannel", "ClosedChannel", "ActiveChannel", "InactiveChannel", "PendingOpenChannel", "Type" }, new[]{ "Channel" }, new[]{ typeof(global::Lnrpc.ChannelEventUpdate.Types.UpdateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletAccountBalance), global::Lnrpc.WalletAccountBalance.Parser, new[]{ "ConfirmedBalance", "UnconfirmedBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceRequest), global::Lnrpc.WalletBalanceRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceResponse), global::Lnrpc.WalletBalanceResponse.Parser, new[]{ "TotalBalance", "ConfirmedBalance", "UnconfirmedBalance", "AccountBalance" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Amount), global::Lnrpc.Amount.Parser, new[]{ "Sat", "Msat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceRequest), global::Lnrpc.ChannelBalanceRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceResponse), global::Lnrpc.ChannelBalanceResponse.Parser, new[]{ "Balance", "PendingOpenBalance", "LocalBalance", "RemoteBalance", "UnsettledLocalBalance", "UnsettledRemoteBalance", "PendingOpenLocalBalance", "PendingOpenRemoteBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesRequest), global::Lnrpc.QueryRoutesRequest.Parser, new[]{ "PubKey", "Amt", "AmtMsat", "FinalCltvDelta", "FeeLimit", "IgnoredNodes", "IgnoredEdges", "SourcePubKey", "UseMissionControl", "IgnoredPairs", "CltvLimit", "DestCustomRecords", "OutgoingChanId", "LastHopPubkey", "RouteHints", "DestFeatures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodePair), global::Lnrpc.NodePair.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EdgeLocator), global::Lnrpc.EdgeLocator.Parser, new[]{ "ChannelId", "DirectionReverse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesResponse), global::Lnrpc.QueryRoutesResponse.Parser, new[]{ "Routes", "SuccessProb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Hop), global::Lnrpc.Hop.Parser, new[]{ "ChanId", "ChanCapacity", "AmtToForward", "Fee", "Expiry", "AmtToForwardMsat", "FeeMsat", "PubKey", "TlvPayload", "MppRecord", "AmpRecord", "CustomRecords" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MPPRecord), global::Lnrpc.MPPRecord.Parser, new[]{ "PaymentAddr", "TotalAmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AMPRecord), global::Lnrpc.AMPRecord.Parser, new[]{ "RootShare", "SetId", "ChildIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Route), global::Lnrpc.Route.Parser, new[]{ "TotalTimeLock", "TotalFees", "TotalAmt", "Hops", "TotalFeesMsat", "TotalAmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfoRequest), global::Lnrpc.NodeInfoRequest.Parser, new[]{ "PubKey", "IncludeChannels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfo), global::Lnrpc.NodeInfo.Parser, new[]{ "Node", "NumChannels", "TotalCapacity", "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningNode), global::Lnrpc.LightningNode.Parser, new[]{ "LastUpdate", "PubKey", "Alias", "Addresses", "Color", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeAddress), global::Lnrpc.NodeAddress.Parser, new[]{ "Network", "Addr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RoutingPolicy), global::Lnrpc.RoutingPolicy.Parser, new[]{ "TimeLockDelta", "MinHtlc", "FeeBaseMsat", "FeeRateMilliMsat", "Disabled", "MaxHtlcMsat", "LastUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdge), global::Lnrpc.ChannelEdge.Parser, new[]{ "ChannelId", "ChanPoint", "LastUpdate", "Node1Pub", "Node2Pub", "Capacity", "Node1Policy", "Node2Policy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraphRequest), global::Lnrpc.ChannelGraphRequest.Parser, new[]{ "IncludeUnannounced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraph), global::Lnrpc.ChannelGraph.Parser, new[]{ "Nodes", "Edges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeMetricsRequest), global::Lnrpc.NodeMetricsRequest.Parser, new[]{ "Types_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeMetricsResponse), global::Lnrpc.NodeMetricsResponse.Parser, new[]{ "BetweennessCentrality" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FloatMetric), global::Lnrpc.FloatMetric.Parser, new[]{ "Value", "NormalizedValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanInfoRequest), global::Lnrpc.ChanInfoRequest.Parser, new[]{ "ChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfoRequest), global::Lnrpc.NetworkInfoRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfo), global::Lnrpc.NetworkInfo.Parser, new[]{ "GraphDiameter", "AvgOutDegree", "MaxOutDegree", "NumNodes", "NumChannels", "TotalNetworkCapacity", "AvgChannelSize", "MinChannelSize", "MaxChannelSize", "MedianChannelSizeSat", "NumZombieChans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopRequest), global::Lnrpc.StopRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopResponse), global::Lnrpc.StopResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologySubscription), global::Lnrpc.GraphTopologySubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologyUpdate), global::Lnrpc.GraphTopologyUpdate.Parser, new[]{ "NodeUpdates", "ChannelUpdates", "ClosedChans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeUpdate), global::Lnrpc.NodeUpdate.Parser, new[]{ "Addresses", "IdentityKey", "GlobalFeatures", "Alias", "Color", "NodeAddresses", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdgeUpdate), global::Lnrpc.ChannelEdgeUpdate.Parser, new[]{ "ChanId", "ChanPoint", "Capacity", "RoutingPolicy", "AdvertisingNode", "ConnectingNode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelUpdate), global::Lnrpc.ClosedChannelUpdate.Parser, new[]{ "ChanId", "Capacity", "ClosedHeight", "ChanPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HopHint), global::Lnrpc.HopHint.Parser, new[]{ "NodeId", "ChanId", "FeeBaseMsat", "FeeProportionalMillionths", "CltvExpiryDelta" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RouteHint), global::Lnrpc.RouteHint.Parser, new[]{ "HopHints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Invoice), global::Lnrpc.Invoice.Parser, new[]{ "Memo", "RPreimage", "RHash", "Value", "ValueMsat", "Settled", "CreationDate", "SettleDate", "PaymentRequest", "DescriptionHash", "Expiry", "FallbackAddr", "CltvExpiry", "RouteHints", "Private", "AddIndex", "SettleIndex", "AmtPaid", "AmtPaidSat", "AmtPaidMsat", "State", "Htlcs", "Features", "IsKeysend", "PaymentAddr", "IsAmp" }, null, new[]{ typeof(global::Lnrpc.Invoice.Types.InvoiceState) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InvoiceHTLC), global::Lnrpc.InvoiceHTLC.Parser, new[]{ "ChanId", "HtlcIndex", "AmtMsat", "AcceptHeight", "AcceptTime", "ResolveTime", "ExpiryHeight", "State", "CustomRecords", "MppTotalAmtMsat", "Amp" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AMP), global::Lnrpc.AMP.Parser, new[]{ "RootShare", "SetId", "ChildIndex", "Hash", "Preimage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AddInvoiceResponse), global::Lnrpc.AddInvoiceResponse.Parser, new[]{ "RHash", "PaymentRequest", "AddIndex", "PaymentAddr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PaymentHash), global::Lnrpc.PaymentHash.Parser, new[]{ "RHashStr", "RHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceRequest), global::Lnrpc.ListInvoiceRequest.Parser, new[]{ "PendingOnly", "IndexOffset", "NumMaxInvoices", "Reversed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceResponse), global::Lnrpc.ListInvoiceResponse.Parser, new[]{ "Invoices", "LastIndexOffset", "FirstIndexOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InvoiceSubscription), global::Lnrpc.InvoiceSubscription.Parser, new[]{ "AddIndex", "SettleIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Payment), global::Lnrpc.Payment.Parser, new[]{ "PaymentHash", "Value", "CreationDate", "Fee", "PaymentPreimage", "ValueSat", "ValueMsat", "PaymentRequest", "Status", "FeeSat", "FeeMsat", "CreationTimeNs", "Htlcs", "PaymentIndex", "FailureReason" }, null, new[]{ typeof(global::Lnrpc.Payment.Types.PaymentStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HTLCAttempt), global::Lnrpc.HTLCAttempt.Parser, new[]{ "AttemptId", "Status", "Route", "AttemptTimeNs", "ResolveTimeNs", "Failure", "Preimage" }, null, new[]{ typeof(global::Lnrpc.HTLCAttempt.Types.HTLCStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsRequest), global::Lnrpc.ListPaymentsRequest.Parser, new[]{ "IncludeIncomplete", "IndexOffset", "MaxPayments", "Reversed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsResponse), global::Lnrpc.ListPaymentsResponse.Parser, new[]{ "Payments", "FirstIndexOffset", "LastIndexOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsRequest), global::Lnrpc.DeleteAllPaymentsRequest.Parser, new[]{ "FailedPaymentsOnly", "FailedHtlcsOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsResponse), global::Lnrpc.DeleteAllPaymentsResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AbandonChannelRequest), global::Lnrpc.AbandonChannelRequest.Parser, new[]{ "ChannelPoint", "PendingFundingShimOnly", "IKnowWhatIAmDoing" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AbandonChannelResponse), global::Lnrpc.AbandonChannelResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelRequest), global::Lnrpc.DebugLevelRequest.Parser, new[]{ "Show", "LevelSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelResponse), global::Lnrpc.DebugLevelResponse.Parser, new[]{ "SubSystems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReqString), global::Lnrpc.PayReqString.Parser, new[]{ "PayReq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReq), global::Lnrpc.PayReq.Parser, new[]{ "Destination", "PaymentHash", "NumSatoshis", "Timestamp", "Expiry", "Description", "DescriptionHash", "FallbackAddr", "CltvExpiry", "RouteHints", "PaymentAddr", "NumMsat", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Feature), global::Lnrpc.Feature.Parser, new[]{ "Name", "IsRequired", "IsKnown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportRequest), global::Lnrpc.FeeReportRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelFeeReport), global::Lnrpc.ChannelFeeReport.Parser, new[]{ "ChanId", "ChannelPoint", "BaseFeeMsat", "FeePerMil", "FeeRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportResponse), global::Lnrpc.FeeReportResponse.Parser, new[]{ "ChannelFees", "DayFeeSum", "WeekFeeSum", "MonthFeeSum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateRequest), global::Lnrpc.PolicyUpdateRequest.Parser, new[]{ "Global", "ChanPoint", "BaseFeeMsat", "FeeRate", "TimeLockDelta", "MaxHtlcMsat", "MinHtlcMsat", "MinHtlcMsatSpecified" }, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateResponse), global::Lnrpc.PolicyUpdateResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryRequest), global::Lnrpc.ForwardingHistoryRequest.Parser, new[]{ "StartTime", "EndTime", "IndexOffset", "NumMaxEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingEvent), global::Lnrpc.ForwardingEvent.Parser, new[]{ "Timestamp", "ChanIdIn", "ChanIdOut", "AmtIn", "AmtOut", "Fee", "FeeMsat", "AmtInMsat", "AmtOutMsat", "TimestampNs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryResponse), global::Lnrpc.ForwardingHistoryResponse.Parser, new[]{ "ForwardingEvents", "LastOffsetIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ExportChannelBackupRequest), global::Lnrpc.ExportChannelBackupRequest.Parser, new[]{ "ChanPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackup), global::Lnrpc.ChannelBackup.Parser, new[]{ "ChanPoint", "ChanBackup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MultiChanBackup), global::Lnrpc.MultiChanBackup.Parser, new[]{ "ChanPoints", "MultiChanBackup_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanBackupExportRequest), global::Lnrpc.ChanBackupExportRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanBackupSnapshot), global::Lnrpc.ChanBackupSnapshot.Parser, new[]{ "SingleChanBackups", "MultiChanBackup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackups), global::Lnrpc.ChannelBackups.Parser, new[]{ "ChanBackups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RestoreChanBackupRequest), global::Lnrpc.RestoreChanBackupRequest.Parser, new[]{ "ChanBackups", "MultiChanBackup" }, new[]{ "Backup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RestoreBackupResponse), global::Lnrpc.RestoreBackupResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackupSubscription), global::Lnrpc.ChannelBackupSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyChanBackupResponse), global::Lnrpc.VerifyChanBackupResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MacaroonPermission), global::Lnrpc.MacaroonPermission.Parser, new[]{ "Entity", "Action" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.BakeMacaroonRequest), global::Lnrpc.BakeMacaroonRequest.Parser, new[]{ "Permissions", "RootKeyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.BakeMacaroonResponse), global::Lnrpc.BakeMacaroonResponse.Parser, new[]{ "Macaroon" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListMacaroonIDsRequest), global::Lnrpc.ListMacaroonIDsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListMacaroonIDsResponse), global::Lnrpc.ListMacaroonIDsResponse.Parser, new[]{ "RootKeyIds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteMacaroonIDRequest), global::Lnrpc.DeleteMacaroonIDRequest.Parser, new[]{ "RootKeyId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteMacaroonIDResponse), global::Lnrpc.DeleteMacaroonIDResponse.Parser, new[]{ "Deleted" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MacaroonPermissionList), global::Lnrpc.MacaroonPermissionList.Parser, new[]{ "Permissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPermissionsRequest), global::Lnrpc.ListPermissionsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPermissionsResponse), global::Lnrpc.ListPermissionsResponse.Parser, new[]{ "MethodPermissions" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Failure), global::Lnrpc.Failure.Parser, new[]{ "Code", "ChannelUpdate", "HtlcMsat", "OnionSha256", "CltvExpiry", "Flags", "FailureSourceIndex", "Height" }, null, new[]{ typeof(global::Lnrpc.Failure.Types.FailureCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelUpdate), global::Lnrpc.ChannelUpdate.Parser, new[]{ "Signature", "ChainHash", "ChanId", "Timestamp", "MessageFlags", "ChannelFlags", "TimeLockDelta", "HtlcMinimumMsat", "BaseFee", "FeeRate", "HtlcMaximumMsat", "ExtraOpaqueData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MacaroonId), global::Lnrpc.MacaroonId.Parser, new[]{ "Nonce", "StorageId", "Ops" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Op), global::Lnrpc.Op.Parser, new[]{ "Entity", "Actions" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///
  ///`AddressType` has to be one of:
  ///
  ///- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
  ///- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
  /// </summary>
  public enum AddressType {
    [pbr::OriginalName("WITNESS_PUBKEY_HASH")] WitnessPubkeyHash = 0,
    [pbr::OriginalName("NESTED_PUBKEY_HASH")] NestedPubkeyHash = 1,
    [pbr::OriginalName("UNUSED_WITNESS_PUBKEY_HASH")] UnusedWitnessPubkeyHash = 2,
    [pbr::OriginalName("UNUSED_NESTED_PUBKEY_HASH")] UnusedNestedPubkeyHash = 3,
  }

  public enum CommitmentType {
    /// <summary>
    ///
    ///A channel using the legacy commitment format having tweaked to_remote
    ///keys.
    /// </summary>
    [pbr::OriginalName("LEGACY")] Legacy = 0,
    /// <summary>
    ///
    ///A channel that uses the modern commitment format where the key in the
    ///output of the remote party does not change each state. This makes back
    ///up and recovery easier as when the channel is closed, the funds go
    ///directly to that key.
    /// </summary>
    [pbr::OriginalName("STATIC_REMOTE_KEY")] StaticRemoteKey = 1,
    /// <summary>
    ///
    ///A channel that uses a commitment format that has anchor outputs on the
    ///commitments, allowing fee bumping after a force close transaction has
    ///been broadcast.
    /// </summary>
    [pbr::OriginalName("ANCHORS")] Anchors = 2,
    /// <summary>
    ///
    ///Returned when the commitment type isn't known or unavailable.
    /// </summary>
    [pbr::OriginalName("UNKNOWN_COMMITMENT_TYPE")] UnknownCommitmentType = 999,
  }

  public enum Initiator {
    [pbr::OriginalName("INITIATOR_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("INITIATOR_LOCAL")] Local = 1,
    [pbr::OriginalName("INITIATOR_REMOTE")] Remote = 2,
    [pbr::OriginalName("INITIATOR_BOTH")] Both = 3,
  }

  public enum ResolutionType {
    [pbr::OriginalName("TYPE_UNKNOWN")] TypeUnknown = 0,
    /// <summary>
    /// We resolved an anchor output.
    /// </summary>
    [pbr::OriginalName("ANCHOR")] Anchor = 1,
    /// <summary>
    ///
    ///We are resolving an incoming htlc on chain. This if this htlc is
    ///claimed, we swept the incoming htlc with the preimage. If it is timed
    ///out, our peer swept the timeout path.
    /// </summary>
    [pbr::OriginalName("INCOMING_HTLC")] IncomingHtlc = 2,
    /// <summary>
    ///
    ///We are resolving an outgoing htlc on chain. If this htlc is claimed,
    ///the remote party swept the htlc with the preimage. If it is timed out,
    ///we swept it with the timeout path.
    /// </summary>
    [pbr::OriginalName("OUTGOING_HTLC")] OutgoingHtlc = 3,
    /// <summary>
    /// We force closed and need to sweep our time locked commitment output.
    /// </summary>
    [pbr::OriginalName("COMMIT")] Commit = 4,
  }

  public enum ResolutionOutcome {
    /// <summary>
    /// Outcome unknown.
    /// </summary>
    [pbr::OriginalName("OUTCOME_UNKNOWN")] OutcomeUnknown = 0,
    /// <summary>
    /// An output was claimed on chain.
    /// </summary>
    [pbr::OriginalName("CLAIMED")] Claimed = 1,
    /// <summary>
    /// An output was left unclaimed on chain.
    /// </summary>
    [pbr::OriginalName("UNCLAIMED")] Unclaimed = 2,
    /// <summary>
    ///
    ///ResolverOutcomeAbandoned indicates that an output that we did not
    ///claim on chain, for example an anchor that we did not sweep and a
    ///third party claimed on chain, or a htlc that we could not decode
    ///so left unclaimed.
    /// </summary>
    [pbr::OriginalName("ABANDONED")] Abandoned = 3,
    /// <summary>
    ///
    ///If we force closed our channel, our htlcs need to be claimed in two
    ///stages. This outcome represents the broadcast of a timeout or success
    ///transaction for this two stage htlc claim.
    /// </summary>
    [pbr::OriginalName("FIRST_STAGE")] FirstStage = 4,
    /// <summary>
    /// A htlc was timed out on chain.
    /// </summary>
    [pbr::OriginalName("TIMEOUT")] Timeout = 5,
  }

  public enum NodeMetricType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("BETWEENNESS_CENTRALITY")] BetweennessCentrality = 1,
  }

  public enum InvoiceHTLCState {
    [pbr::OriginalName("ACCEPTED")] Accepted = 0,
    [pbr::OriginalName("SETTLED")] Settled = 1,
    [pbr::OriginalName("CANCELED")] Canceled = 2,
  }

  public enum PaymentFailureReason {
    /// <summary>
    ///
    ///Payment isn't failed (yet).
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_NONE")] FailureReasonNone = 0,
    /// <summary>
    ///
    ///There are more routes to try, but the payment timeout was exceeded.
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_TIMEOUT")] FailureReasonTimeout = 1,
    /// <summary>
    ///
    ///All possible routes were tried and failed permanently. Or were no
    ///routes to the destination at all.
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_NO_ROUTE")] FailureReasonNoRoute = 2,
    /// <summary>
    ///
    ///A non-recoverable error has occured.
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_ERROR")] FailureReasonError = 3,
    /// <summary>
    ///
    ///Payment details incorrect (unknown hash, invalid amt or
    ///invalid final cltv delta)
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_INCORRECT_PAYMENT_DETAILS")] FailureReasonIncorrectPaymentDetails = 4,
    /// <summary>
    ///
    ///Insufficient local balance.
    /// </summary>
    [pbr::OriginalName("FAILURE_REASON_INSUFFICIENT_BALANCE")] FailureReasonInsufficientBalance = 5,
  }

  public enum FeatureBit {
    [pbr::OriginalName("DATALOSS_PROTECT_REQ")] DatalossProtectReq = 0,
    [pbr::OriginalName("DATALOSS_PROTECT_OPT")] DatalossProtectOpt = 1,
    [pbr::OriginalName("INITIAL_ROUING_SYNC")] InitialRouingSync = 3,
    [pbr::OriginalName("UPFRONT_SHUTDOWN_SCRIPT_REQ")] UpfrontShutdownScriptReq = 4,
    [pbr::OriginalName("UPFRONT_SHUTDOWN_SCRIPT_OPT")] UpfrontShutdownScriptOpt = 5,
    [pbr::OriginalName("GOSSIP_QUERIES_REQ")] GossipQueriesReq = 6,
    [pbr::OriginalName("GOSSIP_QUERIES_OPT")] GossipQueriesOpt = 7,
    [pbr::OriginalName("TLV_ONION_REQ")] TlvOnionReq = 8,
    [pbr::OriginalName("TLV_ONION_OPT")] TlvOnionOpt = 9,
    [pbr::OriginalName("EXT_GOSSIP_QUERIES_REQ")] ExtGossipQueriesReq = 10,
    [pbr::OriginalName("EXT_GOSSIP_QUERIES_OPT")] ExtGossipQueriesOpt = 11,
    [pbr::OriginalName("STATIC_REMOTE_KEY_REQ")] StaticRemoteKeyReq = 12,
    [pbr::OriginalName("STATIC_REMOTE_KEY_OPT")] StaticRemoteKeyOpt = 13,
    [pbr::OriginalName("PAYMENT_ADDR_REQ")] PaymentAddrReq = 14,
    [pbr::OriginalName("PAYMENT_ADDR_OPT")] PaymentAddrOpt = 15,
    [pbr::OriginalName("MPP_REQ")] MppReq = 16,
    [pbr::OriginalName("MPP_OPT")] MppOpt = 17,
    [pbr::OriginalName("WUMBO_CHANNELS_REQ")] WumboChannelsReq = 18,
    [pbr::OriginalName("WUMBO_CHANNELS_OPT")] WumboChannelsOpt = 19,
    [pbr::OriginalName("ANCHORS_REQ")] AnchorsReq = 20,
    [pbr::OriginalName("ANCHORS_OPT")] AnchorsOpt = 21,
    [pbr::OriginalName("ANCHORS_ZERO_FEE_HTLC_REQ")] AnchorsZeroFeeHtlcReq = 22,
    [pbr::OriginalName("ANCHORS_ZERO_FEE_HTLC_OPT")] AnchorsZeroFeeHtlcOpt = 23,
    [pbr::OriginalName("AMP_REQ")] AmpReq = 30,
    [pbr::OriginalName("AMP_OPT")] AmpOpt = 31,
  }

  #endregion

  #region Messages
  public sealed partial class Utxo : pb::IMessage<Utxo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Utxo> _parser = new pb::MessageParser<Utxo>(() => new Utxo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Utxo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo(Utxo other) : this() {
      addressType_ = other.addressType_;
      address_ = other.address_;
      amountSat_ = other.amountSat_;
      pkScript_ = other.pkScript_;
      outpoint_ = other.outpoint_ != null ? other.outpoint_.Clone() : null;
      confirmations_ = other.confirmations_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo Clone() {
      return new Utxo(this);
    }

    /// <summary>Field number for the "address_type" field.</summary>
    public const int AddressTypeFieldNumber = 1;
    private global::Lnrpc.AddressType addressType_ = global::Lnrpc.AddressType.WitnessPubkeyHash;
    /// <summary>
    /// The type of address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AddressType AddressType {
      get { return addressType_; }
      set {
        addressType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    /// The address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_sat" field.</summary>
    public const int AmountSatFieldNumber = 3;
    private long amountSat_;
    /// <summary>
    /// The value of the unspent coin in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountSat {
      get { return amountSat_; }
      set {
        amountSat_ = value;
      }
    }

    /// <summary>Field number for the "pk_script" field.</summary>
    public const int PkScriptFieldNumber = 4;
    private string pkScript_ = "";
    /// <summary>
    /// The pkscript in hex
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkScript {
      get { return pkScript_; }
      set {
        pkScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 5;
    private global::Lnrpc.OutPoint outpoint_;
    /// <summary>
    /// The outpoint in format txid:n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.OutPoint Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = value;
      }
    }

    /// <summary>Field number for the "confirmations" field.</summary>
    public const int ConfirmationsFieldNumber = 6;
    private long confirmations_;
    /// <summary>
    /// The number of confirmations for the Utxo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Confirmations {
      get { return confirmations_; }
      set {
        confirmations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Utxo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Utxo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddressType != other.AddressType) return false;
      if (Address != other.Address) return false;
      if (AmountSat != other.AmountSat) return false;
      if (PkScript != other.PkScript) return false;
      if (!object.Equals(Outpoint, other.Outpoint)) return false;
      if (Confirmations != other.Confirmations) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddressType != global::Lnrpc.AddressType.WitnessPubkeyHash) hash ^= AddressType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (AmountSat != 0L) hash ^= AmountSat.GetHashCode();
      if (PkScript.Length != 0) hash ^= PkScript.GetHashCode();
      if (outpoint_ != null) hash ^= Outpoint.GetHashCode();
      if (Confirmations != 0L) hash ^= Confirmations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AddressType != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AddressType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (AmountSat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountSat);
      }
      if (PkScript.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PkScript);
      }
      if (outpoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Outpoint);
      }
      if (Confirmations != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Confirmations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AddressType != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AddressType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (AmountSat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountSat);
      }
      if (PkScript.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PkScript);
      }
      if (outpoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Outpoint);
      }
      if (Confirmations != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Confirmations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddressType != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AddressType);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (AmountSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountSat);
      }
      if (PkScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkScript);
      }
      if (outpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outpoint);
      }
      if (Confirmations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Confirmations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Utxo other) {
      if (other == null) {
        return;
      }
      if (other.AddressType != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        AddressType = other.AddressType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.AmountSat != 0L) {
        AmountSat = other.AmountSat;
      }
      if (other.PkScript.Length != 0) {
        PkScript = other.PkScript;
      }
      if (other.outpoint_ != null) {
        if (outpoint_ == null) {
          Outpoint = new global::Lnrpc.OutPoint();
        }
        Outpoint.MergeFrom(other.Outpoint);
      }
      if (other.Confirmations != 0L) {
        Confirmations = other.Confirmations;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddressType = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 24: {
            AmountSat = input.ReadInt64();
            break;
          }
          case 34: {
            PkScript = input.ReadString();
            break;
          }
          case 42: {
            if (outpoint_ == null) {
              Outpoint = new global::Lnrpc.OutPoint();
            }
            input.ReadMessage(Outpoint);
            break;
          }
          case 48: {
            Confirmations = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AddressType = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 24: {
            AmountSat = input.ReadInt64();
            break;
          }
          case 34: {
            PkScript = input.ReadString();
            break;
          }
          case 42: {
            if (outpoint_ == null) {
              Outpoint = new global::Lnrpc.OutPoint();
            }
            input.ReadMessage(Outpoint);
            break;
          }
          case 48: {
            Confirmations = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Transaction : pb::IMessage<Transaction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      txHash_ = other.txHash_;
      amount_ = other.amount_;
      numConfirmations_ = other.numConfirmations_;
      blockHash_ = other.blockHash_;
      blockHeight_ = other.blockHeight_;
      timeStamp_ = other.timeStamp_;
      totalFees_ = other.totalFees_;
      destAddresses_ = other.destAddresses_.Clone();
      rawTxHex_ = other.rawTxHex_;
      label_ = other.label_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 1;
    private string txHash_ = "";
    /// <summary>
    /// The transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The transaction amount, denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "num_confirmations" field.</summary>
    public const int NumConfirmationsFieldNumber = 3;
    private int numConfirmations_;
    /// <summary>
    /// The number of confirmations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumConfirmations {
      get { return numConfirmations_; }
      set {
        numConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 4;
    private string blockHash_ = "";
    /// <summary>
    /// The hash of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private int blockHeight_;
    /// <summary>
    /// The height of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    /// <summary>
    /// Timestamp of this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 7;
    private long totalFees_;
    /// <summary>
    /// Fees paid for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "dest_addresses" field.</summary>
    public const int DestAddressesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_destAddresses_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> destAddresses_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Addresses that received funds for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestAddresses {
      get { return destAddresses_; }
    }

    /// <summary>Field number for the "raw_tx_hex" field.</summary>
    public const int RawTxHexFieldNumber = 9;
    private string rawTxHex_ = "";
    /// <summary>
    /// The raw transaction hex.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RawTxHex {
      get { return rawTxHex_; }
      set {
        rawTxHex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 10;
    private string label_ = "";
    /// <summary>
    /// A label that was optionally set on transaction broadcast.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxHash != other.TxHash) return false;
      if (Amount != other.Amount) return false;
      if (NumConfirmations != other.NumConfirmations) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (TotalFees != other.TotalFees) return false;
      if(!destAddresses_.Equals(other.destAddresses_)) return false;
      if (RawTxHex != other.RawTxHex) return false;
      if (Label != other.Label) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (NumConfirmations != 0) hash ^= NumConfirmations.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      hash ^= destAddresses_.GetHashCode();
      if (RawTxHex.Length != 0) hash ^= RawTxHex.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (NumConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BlockHash);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockHeight);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalFees);
      }
      destAddresses_.WriteTo(output, _repeated_destAddresses_codec);
      if (RawTxHex.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RawTxHex);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (NumConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BlockHash);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockHeight);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalFees);
      }
      destAddresses_.WriteTo(ref output, _repeated_destAddresses_codec);
      if (RawTxHex.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RawTxHex);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxHash);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (NumConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      size += destAddresses_.CalculateSize(_repeated_destAddresses_codec);
      if (RawTxHex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RawTxHex);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.NumConfirmations != 0) {
        NumConfirmations = other.NumConfirmations;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      destAddresses_.Add(other.destAddresses_);
      if (other.RawTxHex.Length != 0) {
        RawTxHex = other.RawTxHex;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            NumConfirmations = input.ReadInt32();
            break;
          }
          case 34: {
            BlockHash = input.ReadString();
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 56: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 66: {
            destAddresses_.AddEntriesFrom(input, _repeated_destAddresses_codec);
            break;
          }
          case 74: {
            RawTxHex = input.ReadString();
            break;
          }
          case 82: {
            Label = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            NumConfirmations = input.ReadInt32();
            break;
          }
          case 34: {
            BlockHash = input.ReadString();
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 56: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 66: {
            destAddresses_.AddEntriesFrom(ref input, _repeated_destAddresses_codec);
            break;
          }
          case 74: {
            RawTxHex = input.ReadString();
            break;
          }
          case 82: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      startHeight_ = other.startHeight_;
      endHeight_ = other.endHeight_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    /// <summary>Field number for the "start_height" field.</summary>
    public const int StartHeightFieldNumber = 1;
    private int startHeight_;
    /// <summary>
    ///
    ///The height from which to list transactions, inclusive. If this value is
    ///greater than end_height, transactions will be read in reverse.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartHeight {
      get { return startHeight_; }
      set {
        startHeight_ = value;
      }
    }

    /// <summary>Field number for the "end_height" field.</summary>
    public const int EndHeightFieldNumber = 2;
    private int endHeight_;
    /// <summary>
    ///
    ///The height until which to list transactions, inclusive. To include
    ///unconfirmed transactions, this value should be set to -1, which will
    ///return transactions from start_height until the current chain tip and
    ///unconfirmed transactions. If no end_height is provided, the call will
    ///default to this option.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndHeight {
      get { return endHeight_; }
      set {
        endHeight_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private string account_ = "";
    /// <summary>
    /// An optional filter to only include transactions relevant to an account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartHeight != other.StartHeight) return false;
      if (EndHeight != other.EndHeight) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartHeight != 0) hash ^= StartHeight.GetHashCode();
      if (EndHeight != 0) hash ^= EndHeight.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartHeight);
      }
      if (EndHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndHeight);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartHeight);
      }
      if (EndHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndHeight);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartHeight);
      }
      if (EndHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndHeight);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartHeight != 0) {
        StartHeight = other.StartHeight;
      }
      if (other.EndHeight != 0) {
        EndHeight = other.EndHeight;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartHeight = input.ReadInt32();
            break;
          }
          case 16: {
            EndHeight = input.ReadInt32();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartHeight = input.ReadInt32();
            break;
          }
          case 16: {
            EndHeight = input.ReadInt32();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TransactionDetails : pb::IMessage<TransactionDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransactionDetails> _parser = new pb::MessageParser<TransactionDetails>(() => new TransactionDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails(TransactionDetails other) : this() {
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails Clone() {
      return new TransactionDetails(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Transaction> transactions_ = new pbc::RepeatedField<global::Lnrpc.Transaction>();
    /// <summary>
    /// The list of transactions relevant to the wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      transactions_.WriteTo(ref output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionDetails other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(ref input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FeeLimit : pb::IMessage<FeeLimit>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FeeLimit> _parser = new pb::MessageParser<FeeLimit>(() => new FeeLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit(FeeLimit other) : this() {
      switch (other.LimitCase) {
        case LimitOneofCase.Fixed:
          Fixed = other.Fixed;
          break;
        case LimitOneofCase.FixedMsat:
          FixedMsat = other.FixedMsat;
          break;
        case LimitOneofCase.Percent:
          Percent = other.Percent;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit Clone() {
      return new FeeLimit(this);
    }

    /// <summary>Field number for the "fixed" field.</summary>
    public const int FixedFieldNumber = 1;
    /// <summary>
    ///
    ///The fee limit expressed as a fixed amount of satoshis.
    ///
    ///The fields fixed and fixed_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fixed {
      get { return limitCase_ == LimitOneofCase.Fixed ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.Fixed;
      }
    }

    /// <summary>Field number for the "fixed_msat" field.</summary>
    public const int FixedMsatFieldNumber = 3;
    /// <summary>
    ///
    ///The fee limit expressed as a fixed amount of millisatoshis.
    ///
    ///The fields fixed and fixed_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FixedMsat {
      get { return limitCase_ == LimitOneofCase.FixedMsat ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.FixedMsat;
      }
    }

    /// <summary>Field number for the "percent" field.</summary>
    public const int PercentFieldNumber = 2;
    /// <summary>
    /// The fee limit expressed as a percentage of the payment amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Percent {
      get { return limitCase_ == LimitOneofCase.Percent ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.Percent;
      }
    }

    private object limit_;
    /// <summary>Enum of possible cases for the "limit" oneof.</summary>
    public enum LimitOneofCase {
      None = 0,
      Fixed = 1,
      FixedMsat = 3,
      Percent = 2,
    }
    private LimitOneofCase limitCase_ = LimitOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitOneofCase LimitCase {
      get { return limitCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimit() {
      limitCase_ = LimitOneofCase.None;
      limit_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fixed != other.Fixed) return false;
      if (FixedMsat != other.FixedMsat) return false;
      if (Percent != other.Percent) return false;
      if (LimitCase != other.LimitCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (limitCase_ == LimitOneofCase.Fixed) hash ^= Fixed.GetHashCode();
      if (limitCase_ == LimitOneofCase.FixedMsat) hash ^= FixedMsat.GetHashCode();
      if (limitCase_ == LimitOneofCase.Percent) hash ^= Percent.GetHashCode();
      hash ^= (int) limitCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (limitCase_ == LimitOneofCase.Fixed) {
        output.WriteRawTag(8);
        output.WriteInt64(Fixed);
      }
      if (limitCase_ == LimitOneofCase.Percent) {
        output.WriteRawTag(16);
        output.WriteInt64(Percent);
      }
      if (limitCase_ == LimitOneofCase.FixedMsat) {
        output.WriteRawTag(24);
        output.WriteInt64(FixedMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (limitCase_ == LimitOneofCase.Fixed) {
        output.WriteRawTag(8);
        output.WriteInt64(Fixed);
      }
      if (limitCase_ == LimitOneofCase.Percent) {
        output.WriteRawTag(16);
        output.WriteInt64(Percent);
      }
      if (limitCase_ == LimitOneofCase.FixedMsat) {
        output.WriteRawTag(24);
        output.WriteInt64(FixedMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (limitCase_ == LimitOneofCase.Fixed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fixed);
      }
      if (limitCase_ == LimitOneofCase.FixedMsat) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedMsat);
      }
      if (limitCase_ == LimitOneofCase.Percent) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Percent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeLimit other) {
      if (other == null) {
        return;
      }
      switch (other.LimitCase) {
        case LimitOneofCase.Fixed:
          Fixed = other.Fixed;
          break;
        case LimitOneofCase.FixedMsat:
          FixedMsat = other.FixedMsat;
          break;
        case LimitOneofCase.Percent:
          Percent = other.Percent;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fixed = input.ReadInt64();
            break;
          }
          case 16: {
            Percent = input.ReadInt64();
            break;
          }
          case 24: {
            FixedMsat = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Fixed = input.ReadInt64();
            break;
          }
          case 16: {
            Percent = input.ReadInt64();
            break;
          }
          case 24: {
            FixedMsat = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendRequest : pb::IMessage<SendRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendRequest> _parser = new pb::MessageParser<SendRequest>(() => new SendRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest(SendRequest other) : this() {
      dest_ = other.dest_;
      destString_ = other.destString_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      paymentHash_ = other.paymentHash_;
      paymentHashString_ = other.paymentHashString_;
      paymentRequest_ = other.paymentRequest_;
      finalCltvDelta_ = other.finalCltvDelta_;
      feeLimit_ = other.feeLimit_ != null ? other.feeLimit_.Clone() : null;
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      cltvLimit_ = other.cltvLimit_;
      destCustomRecords_ = other.destCustomRecords_.Clone();
      allowSelfPayment_ = other.allowSelfPayment_;
      destFeatures_ = other.destFeatures_.Clone();
      paymentAddr_ = other.paymentAddr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest Clone() {
      return new SendRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The identity pubkey of the payment recipient. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_string" field.</summary>
    public const int DestStringFieldNumber = 2;
    private string destString_ = "";
    /// <summary>
    ///
    ///The hex-encoded identity pubkey of the payment recipient. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestString {
      get { return destString_; }
      set {
        destString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 3;
    private long amt_;
    /// <summary>
    ///
    ///The amount to send expressed in satoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///
    ///The amount to send expressed in millisatoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 4;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The hash to use within the payment's HTLC. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash_string" field.</summary>
    public const int PaymentHashStringFieldNumber = 5;
    private string paymentHashString_ = "";
    /// <summary>
    ///
    ///The hex-encoded hash to use within the payment's HTLC. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHashString {
      get { return paymentHashString_; }
      set {
        paymentHashString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 6;
    private string paymentRequest_ = "";
    /// <summary>
    ///
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 7;
    private int finalCltvDelta_;
    /// <summary>
    ///
    ///The CLTV delta from the current height that should be used to set the
    ///timelock for the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit" field.</summary>
    public const int FeeLimitFieldNumber = 8;
    private global::Lnrpc.FeeLimit feeLimit_;
    /// <summary>
    ///
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///This value can be represented either as a percentage of the amount being
    ///sent, or as a fixed amount of the maximum fee the user is willing the pay to
    ///send the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FeeLimit FeeLimit {
      get { return feeLimit_; }
      set {
        feeLimit_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 9;
    private ulong outgoingChanId_;
    /// <summary>
    ///
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 13;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 10;
    private uint cltvLimit_;
    /// <summary>
    ///
    ///An optional maximum total time lock for the route. This should not exceed
    ///lnd's `--max-cltv-expiry` setting. If zero, then the value of
    ///`--max-cltv-expiry` is enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. Record types are
    ///required to be in the custom range >= 65536. When using REST, the values
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "allow_self_payment" field.</summary>
    public const int AllowSelfPaymentFieldNumber = 14;
    private bool allowSelfPayment_;
    /// <summary>
    /// If set, circular payments to self are permitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowSelfPayment {
      get { return allowSelfPayment_; }
      set {
        allowSelfPayment_ = value;
      }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(122, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///
    ///Features assumed to be supported by the final node. All transitive feature
    ///dependencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 16;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The payment address of the generated invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (DestString != other.DestString) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (PaymentHashString != other.PaymentHashString) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (!object.Equals(FeeLimit, other.FeeLimit)) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (AllowSelfPayment != other.AllowSelfPayment) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      if (PaymentAddr != other.PaymentAddr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (DestString.Length != 0) hash ^= DestString.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (PaymentHashString.Length != 0) hash ^= PaymentHashString.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (feeLimit_ != null) hash ^= FeeLimit.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (AllowSelfPayment != false) hash ^= AllowSelfPayment.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (DestString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestString);
      }
      if (Amt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeeLimit);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(OutgoingChanId);
      }
      if (CltvLimit != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CltvLimit);
      }
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(LastHopPubkey);
      }
      if (AllowSelfPayment != false) {
        output.WriteRawTag(112);
        output.WriteBool(AllowSelfPayment);
      }
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (DestString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestString);
      }
      if (Amt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeeLimit);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(OutgoingChanId);
      }
      if (CltvLimit != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CltvLimit);
      }
      destCustomRecords_.WriteTo(ref output, _map_destCustomRecords_codec);
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(LastHopPubkey);
      }
      if (AllowSelfPayment != false) {
        output.WriteRawTag(112);
        output.WriteBool(AllowSelfPayment);
      }
      destFeatures_.WriteTo(ref output, _repeated_destFeatures_codec);
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (DestString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestString);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeeLimit);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvLimit);
      }
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (AllowSelfPayment != false) {
        size += 1 + 1;
      }
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (PaymentAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.DestString.Length != 0) {
        DestString = other.DestString;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.PaymentHashString.Length != 0) {
        PaymentHashString = other.PaymentHashString;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.feeLimit_ != null) {
        if (feeLimit_ == null) {
          FeeLimit = new global::Lnrpc.FeeLimit();
        }
        FeeLimit.MergeFrom(other.FeeLimit);
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.AllowSelfPayment != false) {
        AllowSelfPayment = other.AllowSelfPayment;
      }
      destFeatures_.Add(other.destFeatures_);
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 18: {
            DestString = input.ReadString();
            break;
          }
          case 24: {
            Amt = input.ReadInt64();
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 42: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 50: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 56: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 66: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 72: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 80: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 90: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 112: {
            AllowSelfPayment = input.ReadBool();
            break;
          }
          case 122:
          case 120: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
          case 130: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 18: {
            DestString = input.ReadString();
            break;
          }
          case 24: {
            Amt = input.ReadInt64();
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 42: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 50: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 56: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 66: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 72: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 80: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 90: {
            destCustomRecords_.AddEntriesFrom(ref input, _map_destCustomRecords_codec);
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 112: {
            AllowSelfPayment = input.ReadBool();
            break;
          }
          case 122:
          case 120: {
            destFeatures_.AddEntriesFrom(ref input, _repeated_destFeatures_codec);
            break;
          }
          case 130: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendResponse : pb::IMessage<SendResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendResponse> _parser = new pb::MessageParser<SendResponse>(() => new SendResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse(SendResponse other) : this() {
      paymentError_ = other.paymentError_;
      paymentPreimage_ = other.paymentPreimage_;
      paymentRoute_ = other.paymentRoute_ != null ? other.paymentRoute_.Clone() : null;
      paymentHash_ = other.paymentHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse Clone() {
      return new SendResponse(this);
    }

    /// <summary>Field number for the "payment_error" field.</summary>
    public const int PaymentErrorFieldNumber = 1;
    private string paymentError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentError {
      get { return paymentError_; }
      set {
        paymentError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 2;
    private pb::ByteString paymentPreimage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_route" field.</summary>
    public const int PaymentRouteFieldNumber = 3;
    private global::Lnrpc.Route paymentRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route PaymentRoute {
      get { return paymentRoute_; }
      set {
        paymentRoute_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 4;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentError != other.PaymentError) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      if (!object.Equals(PaymentRoute, other.PaymentRoute)) return false;
      if (PaymentHash != other.PaymentHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentError.Length != 0) hash ^= PaymentError.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      if (paymentRoute_ != null) hash ^= PaymentRoute.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PaymentError.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PaymentRoute);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PaymentError.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PaymentRoute);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentRoute);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendResponse other) {
      if (other == null) {
        return;
      }
      if (other.PaymentError.Length != 0) {
        PaymentError = other.PaymentError;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
      if (other.paymentRoute_ != null) {
        if (paymentRoute_ == null) {
          PaymentRoute = new global::Lnrpc.Route();
        }
        PaymentRoute.MergeFrom(other.PaymentRoute);
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentError = input.ReadString();
            break;
          }
          case 18: {
            PaymentPreimage = input.ReadBytes();
            break;
          }
          case 26: {
            if (paymentRoute_ == null) {
              PaymentRoute = new global::Lnrpc.Route();
            }
            input.ReadMessage(PaymentRoute);
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PaymentError = input.ReadString();
            break;
          }
          case 18: {
            PaymentPreimage = input.ReadBytes();
            break;
          }
          case 26: {
            if (paymentRoute_ == null) {
              PaymentRoute = new global::Lnrpc.Route();
            }
            input.ReadMessage(PaymentRoute);
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendToRouteRequest : pb::IMessage<SendToRouteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendToRouteRequest> _parser = new pb::MessageParser<SendToRouteRequest>(() => new SendToRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest(SendToRouteRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      paymentHashString_ = other.paymentHashString_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest Clone() {
      return new SendToRouteRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The payment hash to use for the HTLC. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash_string" field.</summary>
    public const int PaymentHashStringFieldNumber = 2;
    private string paymentHashString_ = "";
    /// <summary>
    ///
    ///An optional hex-encoded payment hash to be used for the HTLC. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHashString {
      get { return paymentHashString_; }
      set {
        paymentHashString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 4;
    private global::Lnrpc.Route route_;
    /// <summary>
    /// Route that should be used to attempt to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (PaymentHashString != other.PaymentHashString) return false;
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (PaymentHashString.Length != 0) hash ^= PaymentHashString.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHashString);
      }
      if (route_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHashString);
      }
      if (route_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHashString);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.PaymentHashString.Length != 0) {
        PaymentHashString = other.PaymentHashString;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 34: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 34: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelAcceptRequest : pb::IMessage<ChannelAcceptRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelAcceptRequest> _parser = new pb::MessageParser<ChannelAcceptRequest>(() => new ChannelAcceptRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAcceptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest(ChannelAcceptRequest other) : this() {
      nodePubkey_ = other.nodePubkey_;
      chainHash_ = other.chainHash_;
      pendingChanId_ = other.pendingChanId_;
      fundingAmt_ = other.fundingAmt_;
      pushAmt_ = other.pushAmt_;
      dustLimit_ = other.dustLimit_;
      maxValueInFlight_ = other.maxValueInFlight_;
      channelReserve_ = other.channelReserve_;
      minHtlc_ = other.minHtlc_;
      feePerKw_ = other.feePerKw_;
      csvDelay_ = other.csvDelay_;
      maxAcceptedHtlcs_ = other.maxAcceptedHtlcs_;
      channelFlags_ = other.channelFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest Clone() {
      return new ChannelAcceptRequest(this);
    }

    /// <summary>Field number for the "node_pubkey" field.</summary>
    public const int NodePubkeyFieldNumber = 1;
    private pb::ByteString nodePubkey_ = pb::ByteString.Empty;
    /// <summary>
    /// The pubkey of the node that wishes to open an inbound channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodePubkey {
      get { return nodePubkey_; }
      set {
        nodePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 2;
    private pb::ByteString chainHash_ = pb::ByteString.Empty;
    /// <summary>
    /// The hash of the genesis block that the proposed channel resides in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 3;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The pending channel id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funding_amt" field.</summary>
    public const int FundingAmtFieldNumber = 4;
    private ulong fundingAmt_;
    /// <summary>
    /// The funding amount in satoshis that initiator wishes to use in the
    /// channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FundingAmt {
      get { return fundingAmt_; }
      set {
        fundingAmt_ = value;
      }
    }

    /// <summary>Field number for the "push_amt" field.</summary>
    public const int PushAmtFieldNumber = 5;
    private ulong pushAmt_;
    /// <summary>
    /// The push amount of the proposed channel in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PushAmt {
      get { return pushAmt_; }
      set {
        pushAmt_ = value;
      }
    }

    /// <summary>Field number for the "dust_limit" field.</summary>
    public const int DustLimitFieldNumber = 6;
    private ulong dustLimit_;
    /// <summary>
    /// The dust limit of the initiator's commitment tx.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DustLimit {
      get { return dustLimit_; }
      set {
        dustLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_value_in_flight" field.</summary>
    public const int MaxValueInFlightFieldNumber = 7;
    private ulong maxValueInFlight_;
    /// <summary>
    /// The maximum amount of coins in millisatoshis that can be pending in this
    /// channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxValueInFlight {
      get { return maxValueInFlight_; }
      set {
        maxValueInFlight_ = value;
      }
    }

    /// <summary>Field number for the "channel_reserve" field.</summary>
    public const int ChannelReserveFieldNumber = 8;
    private ulong channelReserve_;
    /// <summary>
    /// The minimum amount of satoshis the initiator requires us to have at all
    /// times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelReserve {
      get { return channelReserve_; }
      set {
        channelReserve_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc" field.</summary>
    public const int MinHtlcFieldNumber = 9;
    private ulong minHtlc_;
    /// <summary>
    /// The smallest HTLC in millisatoshis that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlc {
      get { return minHtlc_; }
      set {
        minHtlc_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kw" field.</summary>
    public const int FeePerKwFieldNumber = 10;
    private ulong feePerKw_;
    /// <summary>
    /// The initial fee rate that the initiator suggests for both commitment
    /// transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FeePerKw {
      get { return feePerKw_; }
      set {
        feePerKw_ = value;
      }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 11;
    private uint csvDelay_;
    /// <summary>
    ///
    ///The number of blocks to use for the relative time lock in the pay-to-self
    ///output of both commitment transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "max_accepted_htlcs" field.</summary>
    public const int MaxAcceptedHtlcsFieldNumber = 12;
    private uint maxAcceptedHtlcs_;
    /// <summary>
    /// The total number of incoming HTLC's that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAcceptedHtlcs {
      get { return maxAcceptedHtlcs_; }
      set {
        maxAcceptedHtlcs_ = value;
      }
    }

    /// <summary>Field number for the "channel_flags" field.</summary>
    public const int ChannelFlagsFieldNumber = 13;
    private uint channelFlags_;
    /// <summary>
    /// A bit-field which the initiator uses to specify proposed channel
    /// behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelFlags {
      get { return channelFlags_; }
      set {
        channelFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAcceptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAcceptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodePubkey != other.NodePubkey) return false;
      if (ChainHash != other.ChainHash) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (FundingAmt != other.FundingAmt) return false;
      if (PushAmt != other.PushAmt) return false;
      if (DustLimit != other.DustLimit) return false;
      if (MaxValueInFlight != other.MaxValueInFlight) return false;
      if (ChannelReserve != other.ChannelReserve) return false;
      if (MinHtlc != other.MinHtlc) return false;
      if (FeePerKw != other.FeePerKw) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (MaxAcceptedHtlcs != other.MaxAcceptedHtlcs) return false;
      if (ChannelFlags != other.ChannelFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodePubkey.Length != 0) hash ^= NodePubkey.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (FundingAmt != 0UL) hash ^= FundingAmt.GetHashCode();
      if (PushAmt != 0UL) hash ^= PushAmt.GetHashCode();
      if (DustLimit != 0UL) hash ^= DustLimit.GetHashCode();
      if (MaxValueInFlight != 0UL) hash ^= MaxValueInFlight.GetHashCode();
      if (ChannelReserve != 0UL) hash ^= ChannelReserve.GetHashCode();
      if (MinHtlc != 0UL) hash ^= MinHtlc.GetHashCode();
      if (FeePerKw != 0UL) hash ^= FeePerKw.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (MaxAcceptedHtlcs != 0) hash ^= MaxAcceptedHtlcs.GetHashCode();
      if (ChannelFlags != 0) hash ^= ChannelFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodePubkey);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PendingChanId);
      }
      if (FundingAmt != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FundingAmt);
      }
      if (PushAmt != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PushAmt);
      }
      if (DustLimit != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(DustLimit);
      }
      if (MaxValueInFlight != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MaxValueInFlight);
      }
      if (ChannelReserve != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ChannelReserve);
      }
      if (MinHtlc != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinHtlc);
      }
      if (FeePerKw != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(FeePerKw);
      }
      if (CsvDelay != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CsvDelay);
      }
      if (MaxAcceptedHtlcs != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxAcceptedHtlcs);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ChannelFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodePubkey);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PendingChanId);
      }
      if (FundingAmt != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FundingAmt);
      }
      if (PushAmt != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PushAmt);
      }
      if (DustLimit != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(DustLimit);
      }
      if (MaxValueInFlight != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MaxValueInFlight);
      }
      if (ChannelReserve != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ChannelReserve);
      }
      if (MinHtlc != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinHtlc);
      }
      if (FeePerKw != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(FeePerKw);
      }
      if (CsvDelay != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CsvDelay);
      }
      if (MaxAcceptedHtlcs != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxAcceptedHtlcs);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ChannelFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodePubkey);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChainHash);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (FundingAmt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FundingAmt);
      }
      if (PushAmt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PushAmt);
      }
      if (DustLimit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DustLimit);
      }
      if (MaxValueInFlight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxValueInFlight);
      }
      if (ChannelReserve != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelReserve);
      }
      if (MinHtlc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlc);
      }
      if (FeePerKw != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FeePerKw);
      }
      if (CsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (MaxAcceptedHtlcs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAcceptedHtlcs);
      }
      if (ChannelFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAcceptRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodePubkey.Length != 0) {
        NodePubkey = other.NodePubkey;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.FundingAmt != 0UL) {
        FundingAmt = other.FundingAmt;
      }
      if (other.PushAmt != 0UL) {
        PushAmt = other.PushAmt;
      }
      if (other.DustLimit != 0UL) {
        DustLimit = other.DustLimit;
      }
      if (other.MaxValueInFlight != 0UL) {
        MaxValueInFlight = other.MaxValueInFlight;
      }
      if (other.ChannelReserve != 0UL) {
        ChannelReserve = other.ChannelReserve;
      }
      if (other.MinHtlc != 0UL) {
        MinHtlc = other.MinHtlc;
      }
      if (other.FeePerKw != 0UL) {
        FeePerKw = other.FeePerKw;
      }
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.MaxAcceptedHtlcs != 0) {
        MaxAcceptedHtlcs = other.MaxAcceptedHtlcs;
      }
      if (other.ChannelFlags != 0) {
        ChannelFlags = other.ChannelFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 26: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 32: {
            FundingAmt = input.ReadUInt64();
            break;
          }
          case 40: {
            PushAmt = input.ReadUInt64();
            break;
          }
          case 48: {
            DustLimit = input.ReadUInt64();
            break;
          }
          case 56: {
            MaxValueInFlight = input.ReadUInt64();
            break;
          }
          case 64: {
            ChannelReserve = input.ReadUInt64();
            break;
          }
          case 72: {
            MinHtlc = input.ReadUInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadUInt64();
            break;
          }
          case 88: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 96: {
            MaxAcceptedHtlcs = input.ReadUInt32();
            break;
          }
          case 104: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 26: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 32: {
            FundingAmt = input.ReadUInt64();
            break;
          }
          case 40: {
            PushAmt = input.ReadUInt64();
            break;
          }
          case 48: {
            DustLimit = input.ReadUInt64();
            break;
          }
          case 56: {
            MaxValueInFlight = input.ReadUInt64();
            break;
          }
          case 64: {
            ChannelReserve = input.ReadUInt64();
            break;
          }
          case 72: {
            MinHtlc = input.ReadUInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadUInt64();
            break;
          }
          case 88: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 96: {
            MaxAcceptedHtlcs = input.ReadUInt32();
            break;
          }
          case 104: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelAcceptResponse : pb::IMessage<ChannelAcceptResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelAcceptResponse> _parser = new pb::MessageParser<ChannelAcceptResponse>(() => new ChannelAcceptResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAcceptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse(ChannelAcceptResponse other) : this() {
      accept_ = other.accept_;
      pendingChanId_ = other.pendingChanId_;
      error_ = other.error_;
      upfrontShutdown_ = other.upfrontShutdown_;
      csvDelay_ = other.csvDelay_;
      reserveSat_ = other.reserveSat_;
      inFlightMaxMsat_ = other.inFlightMaxMsat_;
      maxHtlcCount_ = other.maxHtlcCount_;
      minHtlcIn_ = other.minHtlcIn_;
      minAcceptDepth_ = other.minAcceptDepth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse Clone() {
      return new ChannelAcceptResponse(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private bool accept_;
    /// <summary>
    /// Whether or not the client accepts the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { return accept_; }
      set {
        accept_ = value;
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 2;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The pending channel id to which this response applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 3;
    private string error_ = "";
    /// <summary>
    ///
    ///An optional error to send the initiating party to indicate why the channel
    ///was rejected. This field *should not* contain sensitive information, it will
    ///be sent to the initiating party. This field should only be set if accept is
    ///false, the channel will be rejected if an error is set with accept=true
    ///because the meaning of this response is ambiguous. Limited to 500
    ///characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "upfront_shutdown" field.</summary>
    public const int UpfrontShutdownFieldNumber = 4;
    private string upfrontShutdown_ = "";
    /// <summary>
    ///
    ///The upfront shutdown address to use if the initiating peer supports option
    ///upfront shutdown script (see ListPeers for the features supported). Note
    ///that the channel open will fail if this value is set for a peer that does
    ///not support this feature bit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpfrontShutdown {
      get { return upfrontShutdown_; }
      set {
        upfrontShutdown_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 5;
    private uint csvDelay_;
    /// <summary>
    ///
    ///The csv delay (in blocks) that we require for the remote party.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "reserve_sat" field.</summary>
    public const int ReserveSatFieldNumber = 6;
    private ulong reserveSat_;
    /// <summary>
    ///
    ///The reserve amount in satoshis that we require the remote peer to adhere to.
    ///We require that the remote peer always have some reserve amount allocated to
    ///them so that there is always a disincentive to broadcast old state (if they
    ///hold 0 sats on their side of the channel, there is nothing to lose).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ReserveSat {
      get { return reserveSat_; }
      set {
        reserveSat_ = value;
      }
    }

    /// <summary>Field number for the "in_flight_max_msat" field.</summary>
    public const int InFlightMaxMsatFieldNumber = 7;
    private ulong inFlightMaxMsat_;
    /// <summary>
    ///
    ///The maximum amount of funds in millisatoshis that we allow the remote peer
    ///to have in outstanding htlcs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong InFlightMaxMsat {
      get { return inFlightMaxMsat_; }
      set {
        inFlightMaxMsat_ = value;
      }
    }

    /// <summary>Field number for the "max_htlc_count" field.</summary>
    public const int MaxHtlcCountFieldNumber = 8;
    private uint maxHtlcCount_;
    /// <summary>
    ///
    ///The maximum number of htlcs that the remote peer can offer us.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxHtlcCount {
      get { return maxHtlcCount_; }
      set {
        maxHtlcCount_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_in" field.</summary>
    public const int MinHtlcInFieldNumber = 9;
    private ulong minHtlcIn_;
    /// <summary>
    ///
    ///The minimum value in millisatoshis for incoming htlcs on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlcIn {
      get { return minHtlcIn_; }
      set {
        minHtlcIn_ = value;
      }
    }

    /// <summary>Field number for the "min_accept_depth" field.</summary>
    public const int MinAcceptDepthFieldNumber = 10;
    private uint minAcceptDepth_;
    /// <summary>
    ///
    ///The number of confirmations we require before we consider the channel open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MinAcceptDepth {
      get { return minAcceptDepth_; }
      set {
        minAcceptDepth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAcceptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAcceptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (Error != other.Error) return false;
      if (UpfrontShutdown != other.UpfrontShutdown) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (ReserveSat != other.ReserveSat) return false;
      if (InFlightMaxMsat != other.InFlightMaxMsat) return false;
      if (MaxHtlcCount != other.MaxHtlcCount) return false;
      if (MinHtlcIn != other.MinHtlcIn) return false;
      if (MinAcceptDepth != other.MinAcceptDepth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accept != false) hash ^= Accept.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (UpfrontShutdown.Length != 0) hash ^= UpfrontShutdown.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (ReserveSat != 0UL) hash ^= ReserveSat.GetHashCode();
      if (InFlightMaxMsat != 0UL) hash ^= InFlightMaxMsat.GetHashCode();
      if (MaxHtlcCount != 0) hash ^= MaxHtlcCount.GetHashCode();
      if (MinHtlcIn != 0UL) hash ^= MinHtlcIn.GetHashCode();
      if (MinAcceptDepth != 0) hash ^= MinAcceptDepth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Accept != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (UpfrontShutdown.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UpfrontShutdown);
      }
      if (CsvDelay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CsvDelay);
      }
      if (ReserveSat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ReserveSat);
      }
      if (InFlightMaxMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(InFlightMaxMsat);
      }
      if (MaxHtlcCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaxHtlcCount);
      }
      if (MinHtlcIn != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinHtlcIn);
      }
      if (MinAcceptDepth != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MinAcceptDepth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Accept != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Error);
      }
      if (UpfrontShutdown.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UpfrontShutdown);
      }
      if (CsvDelay != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CsvDelay);
      }
      if (ReserveSat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ReserveSat);
      }
      if (InFlightMaxMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(InFlightMaxMsat);
      }
      if (MaxHtlcCount != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(MaxHtlcCount);
      }
      if (MinHtlcIn != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinHtlcIn);
      }
      if (MinAcceptDepth != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MinAcceptDepth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accept != false) {
        size += 1 + 1;
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (UpfrontShutdown.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpfrontShutdown);
      }
      if (CsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (ReserveSat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReserveSat);
      }
      if (InFlightMaxMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InFlightMaxMsat);
      }
      if (MaxHtlcCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxHtlcCount);
      }
      if (MinHtlcIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlcIn);
      }
      if (MinAcceptDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MinAcceptDepth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAcceptResponse other) {
      if (other == null) {
        return;
      }
      if (other.Accept != false) {
        Accept = other.Accept;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      if (other.UpfrontShutdown.Length != 0) {
        UpfrontShutdown = other.UpfrontShutdown;
      }
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.ReserveSat != 0UL) {
        ReserveSat = other.ReserveSat;
      }
      if (other.InFlightMaxMsat != 0UL) {
        InFlightMaxMsat = other.InFlightMaxMsat;
      }
      if (other.MaxHtlcCount != 0) {
        MaxHtlcCount = other.MaxHtlcCount;
      }
      if (other.MinHtlcIn != 0UL) {
        MinHtlcIn = other.MinHtlcIn;
      }
      if (other.MinAcceptDepth != 0) {
        MinAcceptDepth = other.MinAcceptDepth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            UpfrontShutdown = input.ReadString();
            break;
          }
          case 40: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 48: {
            ReserveSat = input.ReadUInt64();
            break;
          }
          case 56: {
            InFlightMaxMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            MaxHtlcCount = input.ReadUInt32();
            break;
          }
          case 72: {
            MinHtlcIn = input.ReadUInt64();
            break;
          }
          case 80: {
            MinAcceptDepth = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 26: {
            Error = input.ReadString();
            break;
          }
          case 34: {
            UpfrontShutdown = input.ReadString();
            break;
          }
          case 40: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 48: {
            ReserveSat = input.ReadUInt64();
            break;
          }
          case 56: {
            InFlightMaxMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            MaxHtlcCount = input.ReadUInt32();
            break;
          }
          case 72: {
            MinHtlcIn = input.ReadUInt64();
            break;
          }
          case 80: {
            MinAcceptDepth = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelPoint : pb::IMessage<ChannelPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelPoint> _parser = new pb::MessageParser<ChannelPoint>(() => new ChannelPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint(ChannelPoint other) : this() {
      outputIndex_ = other.outputIndex_;
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint Clone() {
      return new ChannelPoint(this);
    }

    /// <summary>Field number for the "funding_txid_bytes" field.</summary>
    public const int FundingTxidBytesFieldNumber = 1;
    /// <summary>
    ///
    ///Txid of the funding transaction. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FundingTxidBytes {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes ? (pb::ByteString) fundingTxid_ : pb::ByteString.Empty; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidBytes;
      }
    }

    /// <summary>Field number for the "funding_txid_str" field.</summary>
    public const int FundingTxidStrFieldNumber = 2;
    /// <summary>
    ///
    ///Hex-encoded string representing the byte-reversed hash of the funding
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FundingTxidStr {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr ? (string) fundingTxid_ : ""; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidStr;
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 3;
    private uint outputIndex_;
    /// <summary>
    /// The index of the output of the funding transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    private object fundingTxid_;
    /// <summary>Enum of possible cases for the "funding_txid" oneof.</summary>
    public enum FundingTxidOneofCase {
      None = 0,
      FundingTxidBytes = 1,
      FundingTxidStr = 2,
    }
    private FundingTxidOneofCase fundingTxidCase_ = FundingTxidOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTxidOneofCase FundingTxidCase {
      get { return fundingTxidCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFundingTxid() {
      fundingTxidCase_ = FundingTxidOneofCase.None;
      fundingTxid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundingTxidBytes != other.FundingTxidBytes) return false;
      if (FundingTxidStr != other.FundingTxidStr) return false;
      if (OutputIndex != other.OutputIndex) return false;
      if (FundingTxidCase != other.FundingTxidCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) hash ^= FundingTxidBytes.GetHashCode();
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) hash ^= FundingTxidStr.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      hash ^= (int) fundingTxidCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        output.WriteRawTag(10);
        output.WriteBytes(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        output.WriteRawTag(18);
        output.WriteString(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        output.WriteRawTag(10);
        output.WriteBytes(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        output.WriteRawTag(18);
        output.WriteString(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelPoint other) {
      if (other == null) {
        return;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FundingTxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            FundingTxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FundingTxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            FundingTxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OutPoint : pb::IMessage<OutPoint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OutPoint> _parser = new pb::MessageParser<OutPoint>(() => new OutPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint(OutPoint other) : this() {
      txidBytes_ = other.txidBytes_;
      txidStr_ = other.txidStr_;
      outputIndex_ = other.outputIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint Clone() {
      return new OutPoint(this);
    }

    /// <summary>Field number for the "txid_bytes" field.</summary>
    public const int TxidBytesFieldNumber = 1;
    private pb::ByteString txidBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// Raw bytes representing the transaction id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxidBytes {
      get { return txidBytes_; }
      set {
        txidBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "txid_str" field.</summary>
    public const int TxidStrFieldNumber = 2;
    private string txidStr_ = "";
    /// <summary>
    /// Reversed, hex-encoded string representing the transaction id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxidStr {
      get { return txidStr_; }
      set {
        txidStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 3;
    private uint outputIndex_;
    /// <summary>
    /// The index of the output on the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxidBytes != other.TxidBytes) return false;
      if (TxidStr != other.TxidStr) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxidBytes.Length != 0) hash ^= TxidBytes.GetHashCode();
      if (TxidStr.Length != 0) hash ^= TxidStr.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TxidBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TxidBytes);
      }
      if (TxidStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TxidBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TxidBytes);
      }
      if (TxidStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxidBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxidBytes);
      }
      if (TxidStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxidStr);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutPoint other) {
      if (other == null) {
        return;
      }
      if (other.TxidBytes.Length != 0) {
        TxidBytes = other.TxidBytes;
      }
      if (other.TxidStr.Length != 0) {
        TxidStr = other.TxidStr;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            TxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            TxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LightningAddress : pb::IMessage<LightningAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LightningAddress> _parser = new pb::MessageParser<LightningAddress>(() => new LightningAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress(LightningAddress other) : this() {
      pubkey_ = other.pubkey_;
      host_ = other.host_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress Clone() {
      return new LightningAddress(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private string pubkey_ = "";
    /// <summary>
    /// The identity pubkey of the Lightning node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    /// The network location of the lightning node, e.g. `69.69.69.69:1337` or
    /// `localhost:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (Host != other.Host) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningAddress other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EstimateFeeRequest : pb::IMessage<EstimateFeeRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EstimateFeeRequest> _parser = new pb::MessageParser<EstimateFeeRequest>(() => new EstimateFeeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstimateFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest(EstimateFeeRequest other) : this() {
      addrToAmount_ = other.addrToAmount_.Clone();
      targetConf_ = other.targetConf_;
      minConfs_ = other.minConfs_;
      spendUnconfirmed_ = other.spendUnconfirmed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest Clone() {
      return new EstimateFeeRequest(this);
    }

    /// <summary>Field number for the "AddrToAmount" field.</summary>
    public const int AddrToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_addrToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> addrToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The map from addresses to amounts for the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AddrToAmount {
      get { return addrToAmount_; }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 2;
    private int targetConf_;
    /// <summary>
    /// The target number of blocks that this transaction should be confirmed
    /// by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 3;
    private int minConfs_;
    /// <summary>
    /// The minimum number of confirmations each one of your outputs used for
    /// the transaction must satisfy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "spend_unconfirmed" field.</summary>
    public const int SpendUnconfirmedFieldNumber = 4;
    private bool spendUnconfirmed_;
    /// <summary>
    /// Whether unconfirmed outputs should be used as inputs for the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpendUnconfirmed {
      get { return spendUnconfirmed_; }
      set {
        spendUnconfirmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstimateFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstimateFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AddrToAmount.Equals(other.AddrToAmount)) return false;
      if (TargetConf != other.TargetConf) return false;
      if (MinConfs != other.MinConfs) return false;
      if (SpendUnconfirmed != other.SpendUnconfirmed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AddrToAmount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (SpendUnconfirmed != false) hash ^= SpendUnconfirmed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      addrToAmount_.WriteTo(output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetConf);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      addrToAmount_.WriteTo(ref output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetConf);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(32);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addrToAmount_.CalculateSize(_map_addrToAmount_codec);
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstimateFeeRequest other) {
      if (other == null) {
        return;
      }
      addrToAmount_.Add(other.addrToAmount_);
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.SpendUnconfirmed != false) {
        SpendUnconfirmed = other.SpendUnconfirmed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(input, _map_addrToAmount_codec);
            break;
          }
          case 16: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 24: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 32: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(ref input, _map_addrToAmount_codec);
            break;
          }
          case 16: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 24: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 32: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EstimateFeeResponse : pb::IMessage<EstimateFeeResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EstimateFeeResponse> _parser = new pb::MessageParser<EstimateFeeResponse>(() => new EstimateFeeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstimateFeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse(EstimateFeeResponse other) : this() {
      feeSat_ = other.feeSat_;
      feerateSatPerByte_ = other.feerateSatPerByte_;
      satPerVbyte_ = other.satPerVbyte_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse Clone() {
      return new EstimateFeeResponse(this);
    }

    /// <summary>Field number for the "fee_sat" field.</summary>
    public const int FeeSatFieldNumber = 1;
    private long feeSat_;
    /// <summary>
    /// The total fee in satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeSat {
      get { return feeSat_; }
      set {
        feeSat_ = value;
      }
    }

    /// <summary>Field number for the "feerate_sat_per_byte" field.</summary>
    public const int FeerateSatPerByteFieldNumber = 2;
    private long feerateSatPerByte_;
    /// <summary>
    /// Deprecated, use sat_per_vbyte.
    /// The fee rate in satoshi/vbyte.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeerateSatPerByte {
      get { return feerateSatPerByte_; }
      set {
        feerateSatPerByte_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_vbyte" field.</summary>
    public const int SatPerVbyteFieldNumber = 3;
    private ulong satPerVbyte_;
    /// <summary>
    /// The fee rate in satoshi/vbyte.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SatPerVbyte {
      get { return satPerVbyte_; }
      set {
        satPerVbyte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstimateFeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstimateFeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeeSat != other.FeeSat) return false;
      if (FeerateSatPerByte != other.FeerateSatPerByte) return false;
      if (SatPerVbyte != other.SatPerVbyte) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeeSat != 0L) hash ^= FeeSat.GetHashCode();
      if (FeerateSatPerByte != 0L) hash ^= FeerateSatPerByte.GetHashCode();
      if (SatPerVbyte != 0UL) hash ^= SatPerVbyte.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FeeSat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FeeSat);
      }
      if (FeerateSatPerByte != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FeerateSatPerByte);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SatPerVbyte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FeeSat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FeeSat);
      }
      if (FeerateSatPerByte != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FeerateSatPerByte);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SatPerVbyte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeSat);
      }
      if (FeerateSatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeerateSatPerByte);
      }
      if (SatPerVbyte != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SatPerVbyte);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstimateFeeResponse other) {
      if (other == null) {
        return;
      }
      if (other.FeeSat != 0L) {
        FeeSat = other.FeeSat;
      }
      if (other.FeerateSatPerByte != 0L) {
        FeerateSatPerByte = other.FeerateSatPerByte;
      }
      if (other.SatPerVbyte != 0UL) {
        SatPerVbyte = other.SatPerVbyte;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 16: {
            FeerateSatPerByte = input.ReadInt64();
            break;
          }
          case 24: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 16: {
            FeerateSatPerByte = input.ReadInt64();
            break;
          }
          case 24: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendManyRequest : pb::IMessage<SendManyRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendManyRequest> _parser = new pb::MessageParser<SendManyRequest>(() => new SendManyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest(SendManyRequest other) : this() {
      addrToAmount_ = other.addrToAmount_.Clone();
      targetConf_ = other.targetConf_;
      satPerVbyte_ = other.satPerVbyte_;
      satPerByte_ = other.satPerByte_;
      label_ = other.label_;
      minConfs_ = other.minConfs_;
      spendUnconfirmed_ = other.spendUnconfirmed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest Clone() {
      return new SendManyRequest(this);
    }

    /// <summary>Field number for the "AddrToAmount" field.</summary>
    public const int AddrToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_addrToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> addrToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The map from addresses to amounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AddrToAmount {
      get { return addrToAmount_; }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    /// The target number of blocks that this transaction should be confirmed
    /// by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_vbyte" field.</summary>
    public const int SatPerVbyteFieldNumber = 4;
    private ulong satPerVbyte_;
    /// <summary>
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SatPerVbyte {
      get { return satPerVbyte_; }
      set {
        satPerVbyte_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    /// Deprecated, use sat_per_vbyte.
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// transaction.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 6;
    private string label_ = "";
    /// <summary>
    /// An optional label for the transaction, limited to 500 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 7;
    private int minConfs_;
    /// <summary>
    /// The minimum number of confirmations each one of your outputs used for
    /// the transaction must satisfy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "spend_unconfirmed" field.</summary>
    public const int SpendUnconfirmedFieldNumber = 8;
    private bool spendUnconfirmed_;
    /// <summary>
    /// Whether unconfirmed outputs should be used as inputs for the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpendUnconfirmed {
      get { return spendUnconfirmed_; }
      set {
        spendUnconfirmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AddrToAmount.Equals(other.AddrToAmount)) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerVbyte != other.SatPerVbyte) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (Label != other.Label) return false;
      if (MinConfs != other.MinConfs) return false;
      if (SpendUnconfirmed != other.SpendUnconfirmed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AddrToAmount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerVbyte != 0UL) hash ^= SatPerVbyte.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (SpendUnconfirmed != false) hash ^= SpendUnconfirmed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      addrToAmount_.WriteTo(output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Label);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(64);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      addrToAmount_.WriteTo(ref output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Label);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(64);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addrToAmount_.CalculateSize(_map_addrToAmount_codec);
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyRequest other) {
      if (other == null) {
        return;
      }
      addrToAmount_.Add(other.addrToAmount_);
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerVbyte != 0UL) {
        SatPerVbyte = other.SatPerVbyte;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.SpendUnconfirmed != false) {
        SpendUnconfirmed = other.SpendUnconfirmed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(input, _map_addrToAmount_codec);
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 50: {
            Label = input.ReadString();
            break;
          }
          case 56: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 64: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(ref input, _map_addrToAmount_codec);
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 50: {
            Label = input.ReadString();
            break;
          }
          case 56: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 64: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendManyResponse : pb::IMessage<SendManyResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendManyResponse> _parser = new pb::MessageParser<SendManyResponse>(() => new SendManyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse(SendManyResponse other) : this() {
      txid_ = other.txid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse Clone() {
      return new SendManyResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    /// The id of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendCoinsRequest : pb::IMessage<SendCoinsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendCoinsRequest> _parser = new pb::MessageParser<SendCoinsRequest>(() => new SendCoinsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest(SendCoinsRequest other) : this() {
      addr_ = other.addr_;
      amount_ = other.amount_;
      targetConf_ = other.targetConf_;
      satPerVbyte_ = other.satPerVbyte_;
      satPerByte_ = other.satPerByte_;
      sendAll_ = other.sendAll_;
      label_ = other.label_;
      minConfs_ = other.minConfs_;
      spendUnconfirmed_ = other.spendUnconfirmed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest Clone() {
      return new SendCoinsRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    /// <summary>
    /// The address to send coins to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The amount in satoshis to send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    /// The target number of blocks that this transaction should be confirmed
    /// by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_vbyte" field.</summary>
    public const int SatPerVbyteFieldNumber = 4;
    private ulong satPerVbyte_;
    /// <summary>
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SatPerVbyte {
      get { return satPerVbyte_; }
      set {
        satPerVbyte_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    /// Deprecated, use sat_per_vbyte.
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// transaction.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "send_all" field.</summary>
    public const int SendAllFieldNumber = 6;
    private bool sendAll_;
    /// <summary>
    ///
    ///If set, then the amount field will be ignored, and lnd will attempt to
    ///send all the coins under control of the internal wallet to the specified
    ///address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendAll {
      get { return sendAll_; }
      set {
        sendAll_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 7;
    private string label_ = "";
    /// <summary>
    /// An optional label for the transaction, limited to 500 characters.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 8;
    private int minConfs_;
    /// <summary>
    /// The minimum number of confirmations each one of your outputs used for
    /// the transaction must satisfy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "spend_unconfirmed" field.</summary>
    public const int SpendUnconfirmedFieldNumber = 9;
    private bool spendUnconfirmed_;
    /// <summary>
    /// Whether unconfirmed outputs should be used as inputs for the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpendUnconfirmed {
      get { return spendUnconfirmed_; }
      set {
        spendUnconfirmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Amount != other.Amount) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerVbyte != other.SatPerVbyte) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (SendAll != other.SendAll) return false;
      if (Label != other.Label) return false;
      if (MinConfs != other.MinConfs) return false;
      if (SpendUnconfirmed != other.SpendUnconfirmed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerVbyte != 0UL) hash ^= SatPerVbyte.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (SendAll != false) hash ^= SendAll.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (SpendUnconfirmed != false) hash ^= SpendUnconfirmed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (SendAll != false) {
        output.WriteRawTag(48);
        output.WriteBool(SendAll);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Label);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(72);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (SendAll != false) {
        output.WriteRawTag(48);
        output.WriteBool(SendAll);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Label);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(72);
        output.WriteBool(SpendUnconfirmed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerVbyte != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SatPerVbyte);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (SendAll != false) {
        size += 1 + 1;
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerVbyte != 0UL) {
        SatPerVbyte = other.SatPerVbyte;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.SendAll != false) {
        SendAll = other.SendAll;
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.SpendUnconfirmed != false) {
        SpendUnconfirmed = other.SpendUnconfirmed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 48: {
            SendAll = input.ReadBool();
            break;
          }
          case 58: {
            Label = input.ReadString();
            break;
          }
          case 64: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 72: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 48: {
            SendAll = input.ReadBool();
            break;
          }
          case 58: {
            Label = input.ReadString();
            break;
          }
          case 64: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 72: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SendCoinsResponse : pb::IMessage<SendCoinsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendCoinsResponse> _parser = new pb::MessageParser<SendCoinsResponse>(() => new SendCoinsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse(SendCoinsResponse other) : this() {
      txid_ = other.txid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse Clone() {
      return new SendCoinsResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    /// The transaction ID of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListUnspentRequest : pb::IMessage<ListUnspentRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListUnspentRequest> _parser = new pb::MessageParser<ListUnspentRequest>(() => new ListUnspentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnspentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest(ListUnspentRequest other) : this() {
      minConfs_ = other.minConfs_;
      maxConfs_ = other.maxConfs_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest Clone() {
      return new ListUnspentRequest(this);
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 1;
    private int minConfs_;
    /// <summary>
    /// The minimum number of confirmations to be included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "max_confs" field.</summary>
    public const int MaxConfsFieldNumber = 2;
    private int maxConfs_;
    /// <summary>
    /// The maximum number of confirmations to be included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxConfs {
      get { return maxConfs_; }
      set {
        maxConfs_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 3;
    private string account_ = "";
    /// <summary>
    /// An optional filter to only include outputs belonging to an account.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnspentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnspentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinConfs != other.MinConfs) return false;
      if (MaxConfs != other.MaxConfs) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (MaxConfs != 0) hash ^= MaxConfs.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinConfs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinConfs);
      }
      if (MaxConfs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxConfs);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinConfs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinConfs);
      }
      if (MaxConfs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxConfs);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (MaxConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxConfs);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnspentRequest other) {
      if (other == null) {
        return;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.MaxConfs != 0) {
        MaxConfs = other.MaxConfs;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 16: {
            MaxConfs = input.ReadInt32();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 16: {
            MaxConfs = input.ReadInt32();
            break;
          }
          case 26: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListUnspentResponse : pb::IMessage<ListUnspentResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListUnspentResponse> _parser = new pb::MessageParser<ListUnspentResponse>(() => new ListUnspentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnspentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse(ListUnspentResponse other) : this() {
      utxos_ = other.utxos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse Clone() {
      return new ListUnspentResponse(this);
    }

    /// <summary>Field number for the "utxos" field.</summary>
    public const int UtxosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Utxo> _repeated_utxos_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Utxo.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Utxo> utxos_ = new pbc::RepeatedField<global::Lnrpc.Utxo>();
    /// <summary>
    /// A list of utxos
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Utxo> Utxos {
      get { return utxos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnspentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnspentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!utxos_.Equals(other.utxos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= utxos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      utxos_.WriteTo(output, _repeated_utxos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      utxos_.WriteTo(ref output, _repeated_utxos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += utxos_.CalculateSize(_repeated_utxos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnspentResponse other) {
      if (other == null) {
        return;
      }
      utxos_.Add(other.utxos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            utxos_.AddEntriesFrom(input, _repeated_utxos_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            utxos_.AddEntriesFrom(ref input, _repeated_utxos_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NewAddressRequest : pb::IMessage<NewAddressRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewAddressRequest> _parser = new pb::MessageParser<NewAddressRequest>(() => new NewAddressRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest(NewAddressRequest other) : this() {
      type_ = other.type_;
      account_ = other.account_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest Clone() {
      return new NewAddressRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lnrpc.AddressType type_ = global::Lnrpc.AddressType.WitnessPubkeyHash;
    /// <summary>
    /// The type of address to generate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AddressType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    /// <summary>
    ///
    ///The name of the account to generate a new address for. If empty, the
    ///default wallet account is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Account != other.Account) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) hash ^= Type.GetHashCode();
      if (Account.Length != 0) hash ^= Account.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        Type = other.Type;
      }
      if (other.Account.Length != 0) {
        Account = other.Account;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NewAddressResponse : pb::IMessage<NewAddressResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewAddressResponse> _parser = new pb::MessageParser<NewAddressResponse>(() => new NewAddressResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse(NewAddressResponse other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse Clone() {
      return new NewAddressResponse(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    /// The newly generated wallet address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SignMessageRequest : pb::IMessage<SignMessageRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SignMessageRequest> _parser = new pb::MessageParser<SignMessageRequest>(() => new SignMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest(SignMessageRequest other) : this() {
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest Clone() {
      return new SignMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The message to be signed. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class SignMessageResponse : pb::IMessage<SignMessageResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SignMessageResponse> _parser = new pb::MessageParser<SignMessageResponse>(() => new SignMessageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse(SignMessageResponse other) : this() {
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse Clone() {
      return new SignMessageResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private string signature_ = "";
    /// <summary>
    /// The signature for the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VerifyMessageRequest : pb::IMessage<VerifyMessageRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VerifyMessageRequest> _parser = new pb::MessageParser<VerifyMessageRequest>(() => new VerifyMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest(VerifyMessageRequest other) : this() {
      msg_ = other.msg_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest Clone() {
      return new VerifyMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The message over which the signature is to be verified. When using REST,
    ///this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private string signature_ = "";
    /// <summary>
    /// The signature to be verified over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class VerifyMessageResponse : pb::IMessage<VerifyMessageResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VerifyMessageResponse> _parser = new pb::MessageParser<VerifyMessageResponse>(() => new VerifyMessageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse(VerifyMessageResponse other) : this() {
      valid_ = other.valid_;
      pubkey_ = other.pubkey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse Clone() {
      return new VerifyMessageResponse(this);
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    /// <summary>
    /// Whether the signature was valid over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 2;
    private string pubkey_ = "";
    /// <summary>
    /// The pubkey recovered from the signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (Pubkey != other.Pubkey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pubkey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pubkey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            Pubkey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            Pubkey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectPeerRequest : pb::IMessage<ConnectPeerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectPeerRequest> _parser = new pb::MessageParser<ConnectPeerRequest>(() => new ConnectPeerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest(ConnectPeerRequest other) : this() {
      addr_ = other.addr_ != null ? other.addr_.Clone() : null;
      perm_ = other.perm_;
      timeout_ = other.timeout_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest Clone() {
      return new ConnectPeerRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private global::Lnrpc.LightningAddress addr_;
    /// <summary>
    /// Lightning address of the peer, in the format `&lt;pubkey>@host`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningAddress Addr {
      get { return addr_; }
      set {
        addr_ = value;
      }
    }

    /// <summary>Field number for the "perm" field.</summary>
    public const int PermFieldNumber = 2;
    private bool perm_;
    /// <summary>
    /// If set, the daemon will attempt to persistently connect to the target
    /// peer. Otherwise, the call will be synchronous. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Perm {
      get { return perm_; }
      set {
        perm_ = value;
      }
    }

    /// <summary>Field number for the "timeout" field.</summary>
    public const int TimeoutFieldNumber = 3;
    private ulong timeout_;
    /// <summary>
    ///
    ///The connection timeout value (in seconds) for this request. It won't affect
    ///other requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timeout {
      get { return timeout_; }
      set {
        timeout_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Addr, other.Addr)) return false;
      if (Perm != other.Perm) return false;
      if (Timeout != other.Timeout) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (addr_ != null) hash ^= Addr.GetHashCode();
      if (Perm != false) hash ^= Perm.GetHashCode();
      if (Timeout != 0UL) hash ^= Timeout.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (addr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Addr);
      }
      if (Perm != false) {
        output.WriteRawTag(16);
        output.WriteBool(Perm);
      }
      if (Timeout != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (addr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Addr);
      }
      if (Perm != false) {
        output.WriteRawTag(16);
        output.WriteBool(Perm);
      }
      if (Timeout != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(Timeout);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (addr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addr);
      }
      if (Perm != false) {
        size += 1 + 1;
      }
      if (Timeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timeout);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.addr_ != null) {
        if (addr_ == null) {
          Addr = new global::Lnrpc.LightningAddress();
        }
        Addr.MergeFrom(other.Addr);
      }
      if (other.Perm != false) {
        Perm = other.Perm;
      }
      if (other.Timeout != 0UL) {
        Timeout = other.Timeout;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (addr_ == null) {
              Addr = new global::Lnrpc.LightningAddress();
            }
            input.ReadMessage(Addr);
            break;
          }
          case 16: {
            Perm = input.ReadBool();
            break;
          }
          case 24: {
            Timeout = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (addr_ == null) {
              Addr = new global::Lnrpc.LightningAddress();
            }
            input.ReadMessage(Addr);
            break;
          }
          case 16: {
            Perm = input.ReadBool();
            break;
          }
          case 24: {
            Timeout = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectPeerResponse : pb::IMessage<ConnectPeerResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectPeerResponse> _parser = new pb::MessageParser<ConnectPeerResponse>(() => new ConnectPeerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse(ConnectPeerResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse Clone() {
      return new ConnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class DisconnectPeerRequest : pb::IMessage<DisconnectPeerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisconnectPeerRequest> _parser = new pb::MessageParser<DisconnectPeerRequest>(() => new DisconnectPeerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest(DisconnectPeerRequest other) : this() {
      pubKey_ = other.pubKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest Clone() {
      return new DisconnectPeerRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    /// The pubkey of the node to disconnect from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DisconnectPeerResponse : pb::IMessage<DisconnectPeerResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DisconnectPeerResponse> _parser = new pb::MessageParser<DisconnectPeerResponse>(() => new DisconnectPeerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse(DisconnectPeerResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse Clone() {
      return new DisconnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class HTLC : pb::IMessage<HTLC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HTLC> _parser = new pb::MessageParser<HTLC>(() => new HTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC(HTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      hashLock_ = other.hashLock_;
      expirationHeight_ = other.expirationHeight_;
      htlcIndex_ = other.htlcIndex_;
      forwardingChannel_ = other.forwardingChannel_;
      forwardingHtlcIndex_ = other.forwardingHtlcIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC Clone() {
      return new HTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "hash_lock" field.</summary>
    public const int HashLockFieldNumber = 3;
    private pb::ByteString hashLock_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HashLock {
      get { return hashLock_; }
      set {
        hashLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_height" field.</summary>
    public const int ExpirationHeightFieldNumber = 4;
    private uint expirationHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpirationHeight {
      get { return expirationHeight_; }
      set {
        expirationHeight_ = value;
      }
    }

    /// <summary>Field number for the "htlc_index" field.</summary>
    public const int HtlcIndexFieldNumber = 5;
    private ulong htlcIndex_;
    /// <summary>
    /// Index identifying the htlc on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcIndex {
      get { return htlcIndex_; }
      set {
        htlcIndex_ = value;
      }
    }

    /// <summary>Field number for the "forwarding_channel" field.</summary>
    public const int ForwardingChannelFieldNumber = 6;
    private ulong forwardingChannel_;
    /// <summary>
    /// If this HTLC is involved in a forwarding operation, this field indicates
    /// the forwarding channel. For an outgoing htlc, it is the incoming channel.
    /// For an incoming htlc, it is the outgoing channel. When the htlc
    /// originates from this node or this node is the final destination,
    /// forwarding_channel will be zero. The forwarding channel will also be zero
    /// for htlcs that need to be forwarded but don't have a forwarding decision
    /// persisted yet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ForwardingChannel {
      get { return forwardingChannel_; }
      set {
        forwardingChannel_ = value;
      }
    }

    /// <summary>Field number for the "forwarding_htlc_index" field.</summary>
    public const int ForwardingHtlcIndexFieldNumber = 7;
    private ulong forwardingHtlcIndex_;
    /// <summary>
    /// Index identifying the htlc on the forwarding channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ForwardingHtlcIndex {
      get { return forwardingHtlcIndex_; }
      set {
        forwardingHtlcIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (HashLock != other.HashLock) return false;
      if (ExpirationHeight != other.ExpirationHeight) return false;
      if (HtlcIndex != other.HtlcIndex) return false;
      if (ForwardingChannel != other.ForwardingChannel) return false;
      if (ForwardingHtlcIndex != other.ForwardingHtlcIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (HashLock.Length != 0) hash ^= HashLock.GetHashCode();
      if (ExpirationHeight != 0) hash ^= ExpirationHeight.GetHashCode();
      if (HtlcIndex != 0UL) hash ^= HtlcIndex.GetHashCode();
      if (ForwardingChannel != 0UL) hash ^= ForwardingChannel.GetHashCode();
      if (ForwardingHtlcIndex != 0UL) hash ^= ForwardingHtlcIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (HashLock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(HashLock);
      }
      if (ExpirationHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExpirationHeight);
      }
      if (HtlcIndex != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HtlcIndex);
      }
      if (ForwardingChannel != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ForwardingChannel);
      }
      if (ForwardingHtlcIndex != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ForwardingHtlcIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (HashLock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(HashLock);
      }
      if (ExpirationHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExpirationHeight);
      }
      if (HtlcIndex != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(HtlcIndex);
      }
      if (ForwardingChannel != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ForwardingChannel);
      }
      if (ForwardingHtlcIndex != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(ForwardingHtlcIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (HashLock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HashLock);
      }
      if (ExpirationHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpirationHeight);
      }
      if (HtlcIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcIndex);
      }
      if (ForwardingChannel != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ForwardingChannel);
      }
      if (ForwardingHtlcIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ForwardingHtlcIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.HashLock.Length != 0) {
        HashLock = other.HashLock;
      }
      if (other.ExpirationHeight != 0) {
        ExpirationHeight = other.ExpirationHeight;
      }
      if (other.HtlcIndex != 0UL) {
        HtlcIndex = other.HtlcIndex;
      }
      if (other.ForwardingChannel != 0UL) {
        ForwardingChannel = other.ForwardingChannel;
      }
      if (other.ForwardingHtlcIndex != 0UL) {
        ForwardingHtlcIndex = other.ForwardingHtlcIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            HashLock = input.ReadBytes();
            break;
          }
          case 32: {
            ExpirationHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            HtlcIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            ForwardingChannel = input.ReadUInt64();
            break;
          }
          case 56: {
            ForwardingHtlcIndex = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            HashLock = input.ReadBytes();
            break;
          }
          case 32: {
            ExpirationHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            HtlcIndex = input.ReadUInt64();
            break;
          }
          case 48: {
            ForwardingChannel = input.ReadUInt64();
            break;
          }
          case 56: {
            ForwardingHtlcIndex = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelConstraints : pb::IMessage<ChannelConstraints>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelConstraints> _parser = new pb::MessageParser<ChannelConstraints>(() => new ChannelConstraints());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelConstraints> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConstraints() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConstraints(ChannelConstraints other) : this() {
      csvDelay_ = other.csvDelay_;
      chanReserveSat_ = other.chanReserveSat_;
      dustLimitSat_ = other.dustLimitSat_;
      maxPendingAmtMsat_ = other.maxPendingAmtMsat_;
      minHtlcMsat_ = other.minHtlcMsat_;
      maxAcceptedHtlcs_ = other.maxAcceptedHtlcs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelConstraints Clone() {
      return new ChannelConstraints(this);
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 1;
    private uint csvDelay_;
    /// <summary>
    ///
    ///The CSV delay expressed in relative blocks. If the channel is force closed,
    ///we will need to wait for this many blocks before we can regain our funds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "chan_reserve_sat" field.</summary>
    public const int ChanReserveSatFieldNumber = 2;
    private ulong chanReserveSat_;
    /// <summary>
    /// The minimum satoshis this node is required to reserve in its balance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanReserveSat {
      get { return chanReserveSat_; }
      set {
        chanReserveSat_ = value;
      }
    }

    /// <summary>Field number for the "dust_limit_sat" field.</summary>
    public const int DustLimitSatFieldNumber = 3;
    private ulong dustLimitSat_;
    /// <summary>
    /// The dust limit (in satoshis) of the initiator's commitment tx.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DustLimitSat {
      get { return dustLimitSat_; }
      set {
        dustLimitSat_ = value;
      }
    }

    /// <summary>Field number for the "max_pending_amt_msat" field.</summary>
    public const int MaxPendingAmtMsatFieldNumber = 4;
    private ulong maxPendingAmtMsat_;
    /// <summary>
    /// The maximum amount of coins in millisatoshis that can be pending in this
    /// channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPendingAmtMsat {
      get { return maxPendingAmtMsat_; }
      set {
        maxPendingAmtMsat_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 5;
    private ulong minHtlcMsat_;
    /// <summary>
    /// The smallest HTLC in millisatoshis that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "max_accepted_htlcs" field.</summary>
    public const int MaxAcceptedHtlcsFieldNumber = 6;
    private uint maxAcceptedHtlcs_;
    /// <summary>
    /// The total number of incoming HTLC's that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAcceptedHtlcs {
      get { return maxAcceptedHtlcs_; }
      set {
        maxAcceptedHtlcs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelConstraints);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelConstraints other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CsvDelay != other.CsvDelay) return false;
      if (ChanReserveSat != other.ChanReserveSat) return false;
      if (DustLimitSat != other.DustLimitSat) return false;
      if (MaxPendingAmtMsat != other.MaxPendingAmtMsat) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (MaxAcceptedHtlcs != other.MaxAcceptedHtlcs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (ChanReserveSat != 0UL) hash ^= ChanReserveSat.GetHashCode();
      if (DustLimitSat != 0UL) hash ^= DustLimitSat.GetHashCode();
      if (MaxPendingAmtMsat != 0UL) hash ^= MaxPendingAmtMsat.GetHashCode();
      if (MinHtlcMsat != 0UL) hash ^= MinHtlcMsat.GetHashCode();
      if (MaxAcceptedHtlcs != 0) hash ^= MaxAcceptedHtlcs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CsvDelay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CsvDelay);
      }
      if (ChanReserveSat != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanReserveSat);
      }
      if (DustLimitSat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DustLimitSat);
      }
      if (MaxPendingAmtMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxPendingAmtMsat);
      }
      if (MinHtlcMsat != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MinHtlcMsat);
      }
      if (MaxAcceptedHtlcs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxAcceptedHtlcs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CsvDelay != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(CsvDelay);
      }
      if (ChanReserveSat != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanReserveSat);
      }
      if (DustLimitSat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(DustLimitSat);
      }
      if (MaxPendingAmtMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MaxPendingAmtMsat);
      }
      if (MinHtlcMsat != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(MinHtlcMsat);
      }
      if (MaxAcceptedHtlcs != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(MaxAcceptedHtlcs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (ChanReserveSat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanReserveSat);
      }
      if (DustLimitSat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DustLimitSat);
      }
      if (MaxPendingAmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPendingAmtMsat);
      }
      if (MinHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlcMsat);
      }
      if (MaxAcceptedHtlcs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAcceptedHtlcs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelConstraints other) {
      if (other == null) {
        return;
      }
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.ChanReserveSat != 0UL) {
        ChanReserveSat = other.ChanReserveSat;
      }
      if (other.DustLimitSat != 0UL) {
        DustLimitSat = other.DustLimitSat;
      }
      if (other.MaxPendingAmtMsat != 0UL) {
        MaxPendingAmtMsat = other.MaxPendingAmtMsat;
      }
      if (other.MinHtlcMsat != 0UL) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.MaxAcceptedHtlcs != 0) {
        MaxAcceptedHtlcs = other.MaxAcceptedHtlcs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 16: {
            ChanReserveSat = input.ReadUInt64();
            break;
          }
          case 24: {
            DustLimitSat = input.ReadUInt64();
            break;
          }
          case 32: {
            MaxPendingAmtMsat = input.ReadUInt64();
            break;
          }
          case 40: {
            MinHtlcMsat = input.ReadUInt64();
            break;
          }
          case 48: {
            MaxAcceptedHtlcs = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 16: {
            ChanReserveSat = input.ReadUInt64();
            break;
          }
          case 24: {
            DustLimitSat = input.ReadUInt64();
            break;
          }
          case 32: {
            MaxPendingAmtMsat = input.ReadUInt64();
            break;
          }
          case 40: {
            MinHtlcMsat = input.ReadUInt64();
            break;
          }
          case 48: {
            MaxAcceptedHtlcs = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Channel : pb::IMessage<Channel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      active_ = other.active_;
      remotePubkey_ = other.remotePubkey_;
      channelPoint_ = other.channelPoint_;
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      localBalance_ = other.localBalance_;
      remoteBalance_ = other.remoteBalance_;
      commitFee_ = other.commitFee_;
      commitWeight_ = other.commitWeight_;
      feePerKw_ = other.feePerKw_;
      unsettledBalance_ = other.unsettledBalance_;
      totalSatoshisSent_ = other.totalSatoshisSent_;
      totalSatoshisReceived_ = other.totalSatoshisReceived_;
      numUpdates_ = other.numUpdates_;
      pendingHtlcs_ = other.pendingHtlcs_.Clone();
      csvDelay_ = other.csvDelay_;
      private_ = other.private_;
      initiator_ = other.initiator_;
      chanStatusFlags_ = other.chanStatusFlags_;
      localChanReserveSat_ = other.localChanReserveSat_;
      remoteChanReserveSat_ = other.remoteChanReserveSat_;
      staticRemoteKey_ = other.staticRemoteKey_;
      commitmentType_ = other.commitmentType_;
      lifetime_ = other.lifetime_;
      uptime_ = other.uptime_;
      closeAddress_ = other.closeAddress_;
      pushAmountSat_ = other.pushAmountSat_;
      thawHeight_ = other.thawHeight_;
      localConstraints_ = other.localConstraints_ != null ? other.localConstraints_.Clone() : null;
      remoteConstraints_ = other.remoteConstraints_ != null ? other.remoteConstraints_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    /// <summary>
    /// Whether this channel is active or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "remote_pubkey" field.</summary>
    public const int RemotePubkeyFieldNumber = 2;
    private string remotePubkey_ = "";
    /// <summary>
    /// The identity pubkey of the remote node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemotePubkey {
      get { return remotePubkey_; }
      set {
        remotePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 3;
    private string channelPoint_ = "";
    /// <summary>
    ///
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 4;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private long capacity_;
    /// <summary>
    /// The total amount of funds held in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "local_balance" field.</summary>
    public const int LocalBalanceFieldNumber = 6;
    private long localBalance_;
    /// <summary>
    /// This node's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "remote_balance" field.</summary>
    public const int RemoteBalanceFieldNumber = 7;
    private long remoteBalance_;
    /// <summary>
    /// The counterparty's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemoteBalance {
      get { return remoteBalance_; }
      set {
        remoteBalance_ = value;
      }
    }

    /// <summary>Field number for the "commit_fee" field.</summary>
    public const int CommitFeeFieldNumber = 8;
    private long commitFee_;
    /// <summary>
    ///
    ///The amount calculated to be paid in fees for the current set of commitment
    ///transactions. The fee amount is persisted with the channel in order to
    ///allow the fee amount to be removed and recalculated with each channel state
    ///update, including updates that happen after a system restart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitFee {
      get { return commitFee_; }
      set {
        commitFee_ = value;
      }
    }

    /// <summary>Field number for the "commit_weight" field.</summary>
    public const int CommitWeightFieldNumber = 9;
    private long commitWeight_;
    /// <summary>
    /// The weight of the commitment transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitWeight {
      get { return commitWeight_; }
      set {
        commitWeight_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kw" field.</summary>
    public const int FeePerKwFieldNumber = 10;
    private long feePerKw_;
    /// <summary>
    ///
    ///The required number of satoshis per kilo-weight that the requester will pay
    ///at all times, for both the funding transaction and commitment transaction.
    ///This value can later be updated once the channel is open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerKw {
      get { return feePerKw_; }
      set {
        feePerKw_ = value;
      }
    }

    /// <summary>Field number for the "unsettled_balance" field.</summary>
    public const int UnsettledBalanceFieldNumber = 11;
    private long unsettledBalance_;
    /// <summary>
    /// The unsettled balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnsettledBalance {
      get { return unsettledBalance_; }
      set {
        unsettledBalance_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_sent" field.</summary>
    public const int TotalSatoshisSentFieldNumber = 12;
    private long totalSatoshisSent_;
    /// <summary>
    ///
    ///The total number of satoshis we've sent within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisSent {
      get { return totalSatoshisSent_; }
      set {
        totalSatoshisSent_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_received" field.</summary>
    public const int TotalSatoshisReceivedFieldNumber = 13;
    private long totalSatoshisReceived_;
    /// <summary>
    ///
    ///The total number of satoshis we've received within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisReceived {
      get { return totalSatoshisReceived_; }
      set {
        totalSatoshisReceived_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 14;
    private ulong numUpdates_;
    /// <summary>
    ///
    ///The total number of updates conducted within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "pending_htlcs" field.</summary>
    public const int PendingHtlcsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLC> _repeated_pendingHtlcs_codec
        = pb::FieldCodec.ForMessage(122, global::Lnrpc.HTLC.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLC>();
    /// <summary>
    ///
    ///The list of active, uncleared HTLCs currently pending within the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLC> PendingHtlcs {
      get { return pendingHtlcs_; }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 16;
    private uint csvDelay_;
    /// <summary>
    ///
    ///Deprecated. The CSV delay expressed in relative blocks. If the channel is
    ///force closed, we will need to wait for this many blocks before we can regain
    ///our funds.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 17;
    private bool private_;
    /// <summary>
    /// Whether this channel is advertised to the network or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "initiator" field.</summary>
    public const int InitiatorFieldNumber = 18;
    private bool initiator_;
    /// <summary>
    /// True if we were the ones that created the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initiator {
      get { return initiator_; }
      set {
        initiator_ = value;
      }
    }

    /// <summary>Field number for the "chan_status_flags" field.</summary>
    public const int ChanStatusFlagsFieldNumber = 19;
    private string chanStatusFlags_ = "";
    /// <summary>
    /// A set of flags showing the current state of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanStatusFlags {
      get { return chanStatusFlags_; }
      set {
        chanStatusFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_chan_reserve_sat" field.</summary>
    public const int LocalChanReserveSatFieldNumber = 20;
    private long localChanReserveSat_;
    /// <summary>
    /// Deprecated. The minimum satoshis this node is required to reserve in its
    /// balance.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalChanReserveSat {
      get { return localChanReserveSat_; }
      set {
        localChanReserveSat_ = value;
      }
    }

    /// <summary>Field number for the "remote_chan_reserve_sat" field.</summary>
    public const int RemoteChanReserveSatFieldNumber = 21;
    private long remoteChanReserveSat_;
    /// <summary>
    ///
    ///Deprecated. The minimum satoshis the other node is required to reserve in
    ///its balance.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemoteChanReserveSat {
      get { return remoteChanReserveSat_; }
      set {
        remoteChanReserveSat_ = value;
      }
    }

    /// <summary>Field number for the "static_remote_key" field.</summary>
    public const int StaticRemoteKeyFieldNumber = 22;
    private bool staticRemoteKey_;
    /// <summary>
    /// Deprecated. Use commitment_type.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StaticRemoteKey {
      get { return staticRemoteKey_; }
      set {
        staticRemoteKey_ = value;
      }
    }

    /// <summary>Field number for the "commitment_type" field.</summary>
    public const int CommitmentTypeFieldNumber = 26;
    private global::Lnrpc.CommitmentType commitmentType_ = global::Lnrpc.CommitmentType.Legacy;
    /// <summary>
    /// The commitment type used by this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.CommitmentType CommitmentType {
      get { return commitmentType_; }
      set {
        commitmentType_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 23;
    private long lifetime_;
    /// <summary>
    ///
    ///The number of seconds that the channel has been monitored by the channel
    ///scoring system. Scores are currently not persisted, so this value may be
    ///less than the lifetime of the channel [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 24;
    private long uptime_;
    /// <summary>
    ///
    ///The number of seconds that the remote peer has been observed as being online
    ///by the channel scoring system over the lifetime of the channel
    ///[EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uptime {
      get { return uptime_; }
      set {
        uptime_ = value;
      }
    }

    /// <summary>Field number for the "close_address" field.</summary>
    public const int CloseAddressFieldNumber = 25;
    private string closeAddress_ = "";
    /// <summary>
    ///
    ///Close address is the address that we will enforce payout to on cooperative
    ///close if the channel was opened utilizing option upfront shutdown. This
    ///value can be set on channel open by setting close_address in an open channel
    ///request. If this value is not set, you can still choose a payout address by
    ///cooperatively closing with the delivery_address field set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseAddress {
      get { return closeAddress_; }
      set {
        closeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "push_amount_sat" field.</summary>
    public const int PushAmountSatFieldNumber = 27;
    private ulong pushAmountSat_;
    /// <summary>
    ///
    ///The amount that the initiator of the channel optionally pushed to the remote
    ///party on channel open. This amount will be zero if the channel initiator did
    ///not push any funds to the remote peer. If the initiator field is true, we
    ///pushed this amount to our peer, if it is false, the remote peer pushed this
    ///amount to us.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PushAmountSat {
      get { return pushAmountSat_; }
      set {
        pushAmountSat_ = value;
      }
    }

    /// <summary>Field number for the "thaw_height" field.</summary>
    public const int ThawHeightFieldNumber = 28;
    private uint thawHeight_;
    /// <summary>
    ///
    ///This uint32 indicates if this channel is to be considered 'frozen'. A
    ///frozen channel doest not allow a cooperative channel close by the
    ///initiator. The thaw_height is the height that this restriction stops
    ///applying to the channel. This field is optional, not setting it or using a
    ///value of zero will mean the channel has no additional restrictions. The
    ///height can be interpreted in two ways: as a relative height if the value is
    ///less than 500,000, or as an absolute height otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThawHeight {
      get { return thawHeight_; }
      set {
        thawHeight_ = value;
      }
    }

    /// <summary>Field number for the "local_constraints" field.</summary>
    public const int LocalConstraintsFieldNumber = 29;
    private global::Lnrpc.ChannelConstraints localConstraints_;
    /// <summary>
    /// List constraints for the local node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelConstraints LocalConstraints {
      get { return localConstraints_; }
      set {
        localConstraints_ = value;
      }
    }

    /// <summary>Field number for the "remote_constraints" field.</summary>
    public const int RemoteConstraintsFieldNumber = 30;
    private global::Lnrpc.ChannelConstraints remoteConstraints_;
    /// <summary>
    /// List constraints for the remote node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelConstraints RemoteConstraints {
      get { return remoteConstraints_; }
      set {
        remoteConstraints_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (RemotePubkey != other.RemotePubkey) return false;
      if (ChannelPoint != other.ChannelPoint) return false;
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (LocalBalance != other.LocalBalance) return false;
      if (RemoteBalance != other.RemoteBalance) return false;
      if (CommitFee != other.CommitFee) return false;
      if (CommitWeight != other.CommitWeight) return false;
      if (FeePerKw != other.FeePerKw) return false;
      if (UnsettledBalance != other.UnsettledBalance) return false;
      if (TotalSatoshisSent != other.TotalSatoshisSent) return false;
      if (TotalSatoshisReceived != other.TotalSatoshisReceived) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (Private != other.Private) return false;
      if (Initiator != other.Initiator) return false;
      if (ChanStatusFlags != other.ChanStatusFlags) return false;
      if (LocalChanReserveSat != other.LocalChanReserveSat) return false;
      if (RemoteChanReserveSat != other.RemoteChanReserveSat) return false;
      if (StaticRemoteKey != other.StaticRemoteKey) return false;
      if (CommitmentType != other.CommitmentType) return false;
      if (Lifetime != other.Lifetime) return false;
      if (Uptime != other.Uptime) return false;
      if (CloseAddress != other.CloseAddress) return false;
      if (PushAmountSat != other.PushAmountSat) return false;
      if (ThawHeight != other.ThawHeight) return false;
      if (!object.Equals(LocalConstraints, other.LocalConstraints)) return false;
      if (!object.Equals(RemoteConstraints, other.RemoteConstraints)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (RemotePubkey.Length != 0) hash ^= RemotePubkey.GetHashCode();
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
      if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
      if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
      if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
      if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
      if (UnsettledBalance != 0L) hash ^= UnsettledBalance.GetHashCode();
      if (TotalSatoshisSent != 0L) hash ^= TotalSatoshisSent.GetHashCode();
      if (TotalSatoshisReceived != 0L) hash ^= TotalSatoshisReceived.GetHashCode();
      if (NumUpdates != 0UL) hash ^= NumUpdates.GetHashCode();
      hash ^= pendingHtlcs_.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (Initiator != false) hash ^= Initiator.GetHashCode();
      if (ChanStatusFlags.Length != 0) hash ^= ChanStatusFlags.GetHashCode();
      if (LocalChanReserveSat != 0L) hash ^= LocalChanReserveSat.GetHashCode();
      if (RemoteChanReserveSat != 0L) hash ^= RemoteChanReserveSat.GetHashCode();
      if (StaticRemoteKey != false) hash ^= StaticRemoteKey.GetHashCode();
      if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) hash ^= CommitmentType.GetHashCode();
      if (Lifetime != 0L) hash ^= Lifetime.GetHashCode();
      if (Uptime != 0L) hash ^= Uptime.GetHashCode();
      if (CloseAddress.Length != 0) hash ^= CloseAddress.GetHashCode();
      if (PushAmountSat != 0UL) hash ^= PushAmountSat.GetHashCode();
      if (ThawHeight != 0) hash ^= ThawHeight.GetHashCode();
      if (localConstraints_ != null) hash ^= LocalConstraints.GetHashCode();
      if (remoteConstraints_ != null) hash ^= RemoteConstraints.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Capacity);
      }
      if (LocalBalance != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RemoteBalance);
      }
      if (CommitFee != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CommitFee);
      }
      if (CommitWeight != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CommitWeight);
      }
      if (FeePerKw != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(NumUpdates);
      }
      pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CsvDelay);
      }
      if (Private != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Private);
      }
      if (Initiator != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Initiator);
      }
      if (ChanStatusFlags.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChanStatusFlags);
      }
      if (LocalChanReserveSat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(LocalChanReserveSat);
      }
      if (RemoteChanReserveSat != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RemoteChanReserveSat);
      }
      if (StaticRemoteKey != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(StaticRemoteKey);
      }
      if (Lifetime != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(Lifetime);
      }
      if (Uptime != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(Uptime);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CloseAddress);
      }
      if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) CommitmentType);
      }
      if (PushAmountSat != 0UL) {
        output.WriteRawTag(216, 1);
        output.WriteUInt64(PushAmountSat);
      }
      if (ThawHeight != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ThawHeight);
      }
      if (localConstraints_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(LocalConstraints);
      }
      if (remoteConstraints_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(RemoteConstraints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Capacity);
      }
      if (LocalBalance != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RemoteBalance);
      }
      if (CommitFee != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CommitFee);
      }
      if (CommitWeight != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CommitWeight);
      }
      if (FeePerKw != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(NumUpdates);
      }
      pendingHtlcs_.WriteTo(ref output, _repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CsvDelay);
      }
      if (Private != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Private);
      }
      if (Initiator != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Initiator);
      }
      if (ChanStatusFlags.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChanStatusFlags);
      }
      if (LocalChanReserveSat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(LocalChanReserveSat);
      }
      if (RemoteChanReserveSat != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RemoteChanReserveSat);
      }
      if (StaticRemoteKey != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(StaticRemoteKey);
      }
      if (Lifetime != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(Lifetime);
      }
      if (Uptime != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(Uptime);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CloseAddress);
      }
      if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
        output.WriteRawTag(208, 1);
        output.WriteEnum((int) CommitmentType);
      }
      if (PushAmountSat != 0UL) {
        output.WriteRawTag(216, 1);
        output.WriteUInt64(PushAmountSat);
      }
      if (ThawHeight != 0) {
        output.WriteRawTag(224, 1);
        output.WriteUInt32(ThawHeight);
      }
      if (localConstraints_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(LocalConstraints);
      }
      if (remoteConstraints_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(RemoteConstraints);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (RemotePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (LocalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
      }
      if (CommitFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
      }
      if (CommitWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
      }
      if (FeePerKw != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumUpdates);
      }
      size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (Private != false) {
        size += 2 + 1;
      }
      if (Initiator != false) {
        size += 2 + 1;
      }
      if (ChanStatusFlags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChanStatusFlags);
      }
      if (LocalChanReserveSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LocalChanReserveSat);
      }
      if (RemoteChanReserveSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RemoteChanReserveSat);
      }
      if (StaticRemoteKey != false) {
        size += 2 + 1;
      }
      if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) CommitmentType);
      }
      if (Lifetime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Lifetime);
      }
      if (Uptime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Uptime);
      }
      if (CloseAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloseAddress);
      }
      if (PushAmountSat != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(PushAmountSat);
      }
      if (ThawHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ThawHeight);
      }
      if (localConstraints_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LocalConstraints);
      }
      if (remoteConstraints_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RemoteConstraints);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.RemotePubkey.Length != 0) {
        RemotePubkey = other.RemotePubkey;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.LocalBalance != 0L) {
        LocalBalance = other.LocalBalance;
      }
      if (other.RemoteBalance != 0L) {
        RemoteBalance = other.RemoteBalance;
      }
      if (other.CommitFee != 0L) {
        CommitFee = other.CommitFee;
      }
      if (other.CommitWeight != 0L) {
        CommitWeight = other.CommitWeight;
      }
      if (other.FeePerKw != 0L) {
        FeePerKw = other.FeePerKw;
      }
      if (other.UnsettledBalance != 0L) {
        UnsettledBalance = other.UnsettledBalance;
      }
      if (other.TotalSatoshisSent != 0L) {
        TotalSatoshisSent = other.TotalSatoshisSent;
      }
      if (other.TotalSatoshisReceived != 0L) {
        TotalSatoshisReceived = other.TotalSatoshisReceived;
      }
      if (other.NumUpdates != 0UL) {
        NumUpdates = other.NumUpdates;
      }
      pendingHtlcs_.Add(other.pendingHtlcs_);
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.Initiator != false) {
        Initiator = other.Initiator;
      }
      if (other.ChanStatusFlags.Length != 0) {
        ChanStatusFlags = other.ChanStatusFlags;
      }
      if (other.LocalChanReserveSat != 0L) {
        LocalChanReserveSat = other.LocalChanReserveSat;
      }
      if (other.RemoteChanReserveSat != 0L) {
        RemoteChanReserveSat = other.RemoteChanReserveSat;
      }
      if (other.StaticRemoteKey != false) {
        StaticRemoteKey = other.StaticRemoteKey;
      }
      if (other.CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
        CommitmentType = other.CommitmentType;
      }
      if (other.Lifetime != 0L) {
        Lifetime = other.Lifetime;
      }
      if (other.Uptime != 0L) {
        Uptime = other.Uptime;
      }
      if (other.CloseAddress.Length != 0) {
        CloseAddress = other.CloseAddress;
      }
      if (other.PushAmountSat != 0UL) {
        PushAmountSat = other.PushAmountSat;
      }
      if (other.ThawHeight != 0) {
        ThawHeight = other.ThawHeight;
      }
      if (other.localConstraints_ != null) {
        if (localConstraints_ == null) {
          LocalConstraints = new global::Lnrpc.ChannelConstraints();
        }
        LocalConstraints.MergeFrom(other.LocalConstraints);
      }
      if (other.remoteConstraints_ != null) {
        if (remoteConstraints_ == null) {
          RemoteConstraints = new global::Lnrpc.ChannelConstraints();
        }
        RemoteConstraints.MergeFrom(other.RemoteConstraints);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 26: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 32: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 40: {
            Capacity = input.ReadInt64();
            break;
          }
          case 48: {
            LocalBalance = input.ReadInt64();
            break;
          }
          case 56: {
            RemoteBalance = input.ReadInt64();
            break;
          }
          case 64: {
            CommitFee = input.ReadInt64();
            break;
          }
          case 72: {
            CommitWeight = input.ReadInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadInt64();
            break;
          }
          case 88: {
            UnsettledBalance = input.ReadInt64();
            break;
          }
          case 96: {
            TotalSatoshisSent = input.ReadInt64();
            break;
          }
          case 104: {
            TotalSatoshisReceived = input.ReadInt64();
            break;
          }
          case 112: {
            NumUpdates = input.ReadUInt64();
            break;
          }
          case 122: {
            pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
            break;
          }
          case 128: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 136: {
            Private = input.ReadBool();
            break;
          }
          case 144: {
            Initiator = input.ReadBool();
            break;
          }
          case 154: {
            ChanStatusFlags = input.ReadString();
            break;
          }
          case 160: {
            LocalChanReserveSat = input.ReadInt64();
            break;
          }
          case 168: {
            RemoteChanReserveSat = input.ReadInt64();
            break;
          }
          case 176: {
            StaticRemoteKey = input.ReadBool();
            break;
          }
          case 184: {
            Lifetime = input.ReadInt64();
            break;
          }
          case 192: {
            Uptime = input.ReadInt64();
            break;
          }
          case 202: {
            CloseAddress = input.ReadString();
            break;
          }
          case 208: {
            CommitmentType = (global::Lnrpc.CommitmentType) input.ReadEnum();
            break;
          }
          case 216: {
            PushAmountSat = input.ReadUInt64();
            break;
          }
          case 224: {
            ThawHeight = input.ReadUInt32();
            break;
          }
          case 234: {
            if (localConstraints_ == null) {
              LocalConstraints = new global::Lnrpc.ChannelConstraints();
            }
            input.ReadMessage(LocalConstraints);
            break;
          }
          case 242: {
            if (remoteConstraints_ == null) {
              RemoteConstraints = new global::Lnrpc.ChannelConstraints();
            }
            input.ReadMessage(RemoteConstraints);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 26: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 32: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 40: {
            Capacity = input.ReadInt64();
            break;
          }
          case 48: {
            LocalBalance = input.ReadInt64();
            break;
          }
          case 56: {
            RemoteBalance = input.ReadInt64();
            break;
          }
          case 64: {
            CommitFee = input.ReadInt64();
            break;
          }
          case 72: {
            CommitWeight = input.ReadInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadInt64();
            break;
          }
          case 88: {
            UnsettledBalance = input.ReadInt64();
            break;
          }
          case 96: {
            TotalSatoshisSent = input.ReadInt64();
            break;
          }
          case 104: {
            TotalSatoshisReceived = input.ReadInt64();
            break;
          }
          case 112: {
            NumUpdates = input.ReadUInt64();
            break;
          }
          case 122: {
            pendingHtlcs_.AddEntriesFrom(ref input, _repeated_pendingHtlcs_codec);
            break;
          }
          case 128: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 136: {
            Private = input.ReadBool();
            break;
          }
          case 144: {
            Initiator = input.ReadBool();
            break;
          }
          case 154: {
            ChanStatusFlags = input.ReadString();
            break;
          }
          case 160: {
            LocalChanReserveSat = input.ReadInt64();
            break;
          }
          case 168: {
            RemoteChanReserveSat = input.ReadInt64();
            break;
          }
          case 176: {
            StaticRemoteKey = input.ReadBool();
            break;
          }
          case 184: {
            Lifetime = input.ReadInt64();
            break;
          }
          case 192: {
            Uptime = input.ReadInt64();
            break;
          }
          case 202: {
            CloseAddress = input.ReadString();
            break;
          }
          case 208: {
            CommitmentType = (global::Lnrpc.CommitmentType) input.ReadEnum();
            break;
          }
          case 216: {
            PushAmountSat = input.ReadUInt64();
            break;
          }
          case 224: {
            ThawHeight = input.ReadUInt32();
            break;
          }
          case 234: {
            if (localConstraints_ == null) {
              LocalConstraints = new global::Lnrpc.ChannelConstraints();
            }
            input.ReadMessage(LocalConstraints);
            break;
          }
          case 242: {
            if (remoteConstraints_ == null) {
              RemoteConstraints = new global::Lnrpc.ChannelConstraints();
            }
            input.ReadMessage(RemoteConstraints);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListChannelsRequest : pb::IMessage<ListChannelsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListChannelsRequest> _parser = new pb::MessageParser<ListChannelsRequest>(() => new ListChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest(ListChannelsRequest other) : this() {
      activeOnly_ = other.activeOnly_;
      inactiveOnly_ = other.inactiveOnly_;
      publicOnly_ = other.publicOnly_;
      privateOnly_ = other.privateOnly_;
      peer_ = other.peer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest Clone() {
      return new ListChannelsRequest(this);
    }

    /// <summary>Field number for the "active_only" field.</summary>
    public const int ActiveOnlyFieldNumber = 1;
    private bool activeOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ActiveOnly {
      get { return activeOnly_; }
      set {
        activeOnly_ = value;
      }
    }

    /// <summary>Field number for the "inactive_only" field.</summary>
    public const int InactiveOnlyFieldNumber = 2;
    private bool inactiveOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InactiveOnly {
      get { return inactiveOnly_; }
      set {
        inactiveOnly_ = value;
      }
    }

    /// <summary>Field number for the "public_only" field.</summary>
    public const int PublicOnlyFieldNumber = 3;
    private bool publicOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublicOnly {
      get { return publicOnly_; }
      set {
        publicOnly_ = value;
      }
    }

    /// <summary>Field number for the "private_only" field.</summary>
    public const int PrivateOnlyFieldNumber = 4;
    private bool privateOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrivateOnly {
      get { return privateOnly_; }
      set {
        privateOnly_ = value;
      }
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 5;
    private pb::ByteString peer_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///Filters the response for channels with a target peer's pubkey. If peer is
    ///empty, all channels will be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveOnly != other.ActiveOnly) return false;
      if (InactiveOnly != other.InactiveOnly) return false;
      if (PublicOnly != other.PublicOnly) return false;
      if (PrivateOnly != other.PrivateOnly) return false;
      if (Peer != other.Peer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveOnly != false) hash ^= ActiveOnly.GetHashCode();
      if (InactiveOnly != false) hash ^= InactiveOnly.GetHashCode();
      if (PublicOnly != false) hash ^= PublicOnly.GetHashCode();
      if (PrivateOnly != false) hash ^= PrivateOnly.GetHashCode();
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ActiveOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(ActiveOnly);
      }
      if (InactiveOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(InactiveOnly);
      }
      if (PublicOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(PublicOnly);
      }
      if (PrivateOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(PrivateOnly);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Peer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ActiveOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(ActiveOnly);
      }
      if (InactiveOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(InactiveOnly);
      }
      if (PublicOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(PublicOnly);
      }
      if (PrivateOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(PrivateOnly);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Peer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveOnly != false) {
        size += 1 + 1;
      }
      if (InactiveOnly != false) {
        size += 1 + 1;
      }
      if (PublicOnly != false) {
        size += 1 + 1;
      }
      if (PrivateOnly != false) {
        size += 1 + 1;
      }
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Peer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ActiveOnly != false) {
        ActiveOnly = other.ActiveOnly;
      }
      if (other.InactiveOnly != false) {
        InactiveOnly = other.InactiveOnly;
      }
      if (other.PublicOnly != false) {
        PublicOnly = other.PublicOnly;
      }
      if (other.PrivateOnly != false) {
        PrivateOnly = other.PrivateOnly;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActiveOnly = input.ReadBool();
            break;
          }
          case 16: {
            InactiveOnly = input.ReadBool();
            break;
          }
          case 24: {
            PublicOnly = input.ReadBool();
            break;
          }
          case 32: {
            PrivateOnly = input.ReadBool();
            break;
          }
          case 42: {
            Peer = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ActiveOnly = input.ReadBool();
            break;
          }
          case 16: {
            InactiveOnly = input.ReadBool();
            break;
          }
          case 24: {
            PublicOnly = input.ReadBool();
            break;
          }
          case 32: {
            PrivateOnly = input.ReadBool();
            break;
          }
          case 42: {
            Peer = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListChannelsResponse : pb::IMessage<ListChannelsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListChannelsResponse> _parser = new pb::MessageParser<ListChannelsResponse>(() => new ListChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse(ListChannelsResponse other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse Clone() {
      return new ListChannelsResponse(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Lnrpc.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(90, global::Lnrpc.Channel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Channel> channels_ = new pbc::RepeatedField<global::Lnrpc.Channel>();
    /// <summary>
    /// The list of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Channel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      channels_.WriteTo(ref output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsResponse other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 90: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 90: {
            channels_.AddEntriesFrom(ref input, _repeated_channels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelCloseSummary : pb::IMessage<ChannelCloseSummary>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelCloseSummary> _parser = new pb::MessageParser<ChannelCloseSummary>(() => new ChannelCloseSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCloseSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary(ChannelCloseSummary other) : this() {
      channelPoint_ = other.channelPoint_;
      chanId_ = other.chanId_;
      chainHash_ = other.chainHash_;
      closingTxHash_ = other.closingTxHash_;
      remotePubkey_ = other.remotePubkey_;
      capacity_ = other.capacity_;
      closeHeight_ = other.closeHeight_;
      settledBalance_ = other.settledBalance_;
      timeLockedBalance_ = other.timeLockedBalance_;
      closeType_ = other.closeType_;
      openInitiator_ = other.openInitiator_;
      closeInitiator_ = other.closeInitiator_;
      resolutions_ = other.resolutions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary Clone() {
      return new ChannelCloseSummary(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private string channelPoint_ = "";
    /// <summary>
    /// The outpoint (txid:index) of the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 2;
    private ulong chanId_;
    /// <summary>
    ///  The unique channel ID for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 3;
    private string chainHash_ = "";
    /// <summary>
    /// The hash of the genesis block that this channel resides within.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closing_tx_hash" field.</summary>
    public const int ClosingTxHashFieldNumber = 4;
    private string closingTxHash_ = "";
    /// <summary>
    /// The txid of the transaction which ultimately closed this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClosingTxHash {
      get { return closingTxHash_; }
      set {
        closingTxHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remote_pubkey" field.</summary>
    public const int RemotePubkeyFieldNumber = 5;
    private string remotePubkey_ = "";
    /// <summary>
    /// Public key of the remote peer that we formerly had a channel with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemotePubkey {
      get { return remotePubkey_; }
      set {
        remotePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private long capacity_;
    /// <summary>
    /// Total capacity of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "close_height" field.</summary>
    public const int CloseHeightFieldNumber = 7;
    private uint closeHeight_;
    /// <summary>
    /// Height at which the funding transaction was spent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CloseHeight {
      get { return closeHeight_; }
      set {
        closeHeight_ = value;
      }
    }

    /// <summary>Field number for the "settled_balance" field.</summary>
    public const int SettledBalanceFieldNumber = 8;
    private long settledBalance_;
    /// <summary>
    /// Settled balance at the time of channel closure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettledBalance {
      get { return settledBalance_; }
      set {
        settledBalance_ = value;
      }
    }

    /// <summary>Field number for the "time_locked_balance" field.</summary>
    public const int TimeLockedBalanceFieldNumber = 9;
    private long timeLockedBalance_;
    /// <summary>
    /// The sum of all the time-locked outputs at the time of channel closure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeLockedBalance {
      get { return timeLockedBalance_; }
      set {
        timeLockedBalance_ = value;
      }
    }

    /// <summary>Field number for the "close_type" field.</summary>
    public const int CloseTypeFieldNumber = 10;
    private global::Lnrpc.ChannelCloseSummary.Types.ClosureType closeType_ = global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose;
    /// <summary>
    /// Details on how the channel was closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseSummary.Types.ClosureType CloseType {
      get { return closeType_; }
      set {
        closeType_ = value;
      }
    }

    /// <summary>Field number for the "open_initiator" field.</summary>
    public const int OpenInitiatorFieldNumber = 11;
    private global::Lnrpc.Initiator openInitiator_ = global::Lnrpc.Initiator.Unknown;
    /// <summary>
    ///
    ///Open initiator is the party that initiated opening the channel. Note that
    ///this value may be unknown if the channel was closed before we migrated to
    ///store open channel information after close.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Initiator OpenInitiator {
      get { return openInitiator_; }
      set {
        openInitiator_ = value;
      }
    }

    /// <summary>Field number for the "close_initiator" field.</summary>
    public const int CloseInitiatorFieldNumber = 12;
    private global::Lnrpc.Initiator closeInitiator_ = global::Lnrpc.Initiator.Unknown;
    /// <summary>
    ///
    ///Close initiator indicates which party initiated the close. This value will
    ///be unknown for channels that were cooperatively closed before we started
    ///tracking cooperative close initiators. Note that this indicates which party
    ///initiated a close, and it is possible for both to initiate cooperative or
    ///force closes, although only one party's close will be confirmed on chain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Initiator CloseInitiator {
      get { return closeInitiator_; }
      set {
        closeInitiator_ = value;
      }
    }

    /// <summary>Field number for the "resolutions" field.</summary>
    public const int ResolutionsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::Lnrpc.Resolution> _repeated_resolutions_codec
        = pb::FieldCodec.ForMessage(106, global::Lnrpc.Resolution.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Resolution> resolutions_ = new pbc::RepeatedField<global::Lnrpc.Resolution>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Resolution> Resolutions {
      get { return resolutions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCloseSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCloseSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelPoint != other.ChannelPoint) return false;
      if (ChanId != other.ChanId) return false;
      if (ChainHash != other.ChainHash) return false;
      if (ClosingTxHash != other.ClosingTxHash) return false;
      if (RemotePubkey != other.RemotePubkey) return false;
      if (Capacity != other.Capacity) return false;
      if (CloseHeight != other.CloseHeight) return false;
      if (SettledBalance != other.SettledBalance) return false;
      if (TimeLockedBalance != other.TimeLockedBalance) return false;
      if (CloseType != other.CloseType) return false;
      if (OpenInitiator != other.OpenInitiator) return false;
      if (CloseInitiator != other.CloseInitiator) return false;
      if(!resolutions_.Equals(other.resolutions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (ClosingTxHash.Length != 0) hash ^= ClosingTxHash.GetHashCode();
      if (RemotePubkey.Length != 0) hash ^= RemotePubkey.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (CloseHeight != 0) hash ^= CloseHeight.GetHashCode();
      if (SettledBalance != 0L) hash ^= SettledBalance.GetHashCode();
      if (TimeLockedBalance != 0L) hash ^= TimeLockedBalance.GetHashCode();
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) hash ^= CloseType.GetHashCode();
      if (OpenInitiator != global::Lnrpc.Initiator.Unknown) hash ^= OpenInitiator.GetHashCode();
      if (CloseInitiator != global::Lnrpc.Initiator.Unknown) hash ^= CloseInitiator.GetHashCode();
      hash ^= resolutions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChainHash);
      }
      if (ClosingTxHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClosingTxHash);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RemotePubkey);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (CloseHeight != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CloseHeight);
      }
      if (SettledBalance != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettledBalance);
      }
      if (TimeLockedBalance != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TimeLockedBalance);
      }
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CloseType);
      }
      if (OpenInitiator != global::Lnrpc.Initiator.Unknown) {
        output.WriteRawTag(88);
        output.WriteEnum((int) OpenInitiator);
      }
      if (CloseInitiator != global::Lnrpc.Initiator.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CloseInitiator);
      }
      resolutions_.WriteTo(output, _repeated_resolutions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChainHash);
      }
      if (ClosingTxHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClosingTxHash);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RemotePubkey);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (CloseHeight != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CloseHeight);
      }
      if (SettledBalance != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettledBalance);
      }
      if (TimeLockedBalance != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TimeLockedBalance);
      }
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CloseType);
      }
      if (OpenInitiator != global::Lnrpc.Initiator.Unknown) {
        output.WriteRawTag(88);
        output.WriteEnum((int) OpenInitiator);
      }
      if (CloseInitiator != global::Lnrpc.Initiator.Unknown) {
        output.WriteRawTag(96);
        output.WriteEnum((int) CloseInitiator);
      }
      resolutions_.WriteTo(ref output, _repeated_resolutions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainHash);
      }
      if (ClosingTxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxHash);
      }
      if (RemotePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePubkey);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (CloseHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CloseHeight);
      }
      if (SettledBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettledBalance);
      }
      if (TimeLockedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLockedBalance);
      }
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloseType);
      }
      if (OpenInitiator != global::Lnrpc.Initiator.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OpenInitiator);
      }
      if (CloseInitiator != global::Lnrpc.Initiator.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloseInitiator);
      }
      size += resolutions_.CalculateSize(_repeated_resolutions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCloseSummary other) {
      if (other == null) {
        return;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.ClosingTxHash.Length != 0) {
        ClosingTxHash = other.ClosingTxHash;
      }
      if (other.RemotePubkey.Length != 0) {
        RemotePubkey = other.RemotePubkey;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.CloseHeight != 0) {
        CloseHeight = other.CloseHeight;
      }
      if (other.SettledBalance != 0L) {
        SettledBalance = other.SettledBalance;
      }
      if (other.TimeLockedBalance != 0L) {
        TimeLockedBalance = other.TimeLockedBalance;
      }
      if (other.CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        CloseType = other.CloseType;
      }
      if (other.OpenInitiator != global::Lnrpc.Initiator.Unknown) {
        OpenInitiator = other.OpenInitiator;
      }
      if (other.CloseInitiator != global::Lnrpc.Initiator.Unknown) {
        CloseInitiator = other.CloseInitiator;
      }
      resolutions_.Add(other.resolutions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 26: {
            ChainHash = input.ReadString();
            break;
          }
          case 34: {
            ClosingTxHash = input.ReadString();
            break;
          }
          case 42: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 56: {
            CloseHeight = input.ReadUInt32();
            break;
          }
          case 64: {
            SettledBalance = input.ReadInt64();
            break;
          }
          case 72: {
            TimeLockedBalance = input.ReadInt64();
            break;
          }
          case 80: {
            CloseType = (global::Lnrpc.ChannelCloseSummary.Types.ClosureType) input.ReadEnum();
            break;
          }
          case 88: {
            OpenInitiator = (global::Lnrpc.Initiator) input.ReadEnum();
            break;
          }
          case 96: {
            CloseInitiator = (global::Lnrpc.Initiator) input.ReadEnum();
            break;
          }
          case 106: {
            resolutions_.AddEntriesFrom(input, _repeated_resolutions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 26: {
            ChainHash = input.ReadString();
            break;
          }
          case 34: {
            ClosingTxHash = input.ReadString();
            break;
          }
          case 42: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 56: {
            CloseHeight = input.ReadUInt32();
            break;
          }
          case 64: {
            SettledBalance = input.ReadInt64();
            break;
          }
          case 72: {
            TimeLockedBalance = input.ReadInt64();
            break;
          }
          case 80: {
            CloseType = (global::Lnrpc.ChannelCloseSummary.Types.ClosureType) input.ReadEnum();
            break;
          }
          case 88: {
            OpenInitiator = (global::Lnrpc.Initiator) input.ReadEnum();
            break;
          }
          case 96: {
            CloseInitiator = (global::Lnrpc.Initiator) input.ReadEnum();
            break;
          }
          case 106: {
            resolutions_.AddEntriesFrom(ref input, _repeated_resolutions_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelCloseSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ClosureType {
        [pbr::OriginalName("COOPERATIVE_CLOSE")] CooperativeClose = 0,
        [pbr::OriginalName("LOCAL_FORCE_CLOSE")] LocalForceClose = 1,
        [pbr::OriginalName("REMOTE_FORCE_CLOSE")] RemoteForceClose = 2,
        [pbr::OriginalName("BREACH_CLOSE")] BreachClose = 3,
        [pbr::OriginalName("FUNDING_CANCELED")] FundingCanceled = 4,
        [pbr::OriginalName("ABANDONED")] Abandoned = 5,
      }

    }
    #endregion

  }

  public sealed partial class Resolution : pb::IMessage<Resolution>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Resolution> _parser = new pb::MessageParser<Resolution>(() => new Resolution());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Resolution> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution(Resolution other) : this() {
      resolutionType_ = other.resolutionType_;
      outcome_ = other.outcome_;
      outpoint_ = other.outpoint_ != null ? other.outpoint_.Clone() : null;
      amountSat_ = other.amountSat_;
      sweepTxid_ = other.sweepTxid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Resolution Clone() {
      return new Resolution(this);
    }

    /// <summary>Field number for the "resolution_type" field.</summary>
    public const int ResolutionTypeFieldNumber = 1;
    private global::Lnrpc.ResolutionType resolutionType_ = global::Lnrpc.ResolutionType.TypeUnknown;
    /// <summary>
    /// The type of output we are resolving.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ResolutionType ResolutionType {
      get { return resolutionType_; }
      set {
        resolutionType_ = value;
      }
    }

    /// <summary>Field number for the "outcome" field.</summary>
    public const int OutcomeFieldNumber = 2;
    private global::Lnrpc.ResolutionOutcome outcome_ = global::Lnrpc.ResolutionOutcome.OutcomeUnknown;
    /// <summary>
    /// The outcome of our on chain action that resolved the outpoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ResolutionOutcome Outcome {
      get { return outcome_; }
      set {
        outcome_ = value;
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 3;
    private global::Lnrpc.OutPoint outpoint_;
    /// <summary>
    /// The outpoint that was spent by the resolution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.OutPoint Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = value;
      }
    }

    /// <summary>Field number for the "amount_sat" field.</summary>
    public const int AmountSatFieldNumber = 4;
    private ulong amountSat_;
    /// <summary>
    /// The amount that was claimed by the resolution.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmountSat {
      get { return amountSat_; }
      set {
        amountSat_ = value;
      }
    }

    /// <summary>Field number for the "sweep_txid" field.</summary>
    public const int SweepTxidFieldNumber = 5;
    private string sweepTxid_ = "";
    /// <summary>
    /// The hex-encoded transaction ID of the sweep transaction that spent the
    /// output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SweepTxid {
      get { return sweepTxid_; }
      set {
        sweepTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Resolution);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Resolution other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResolutionType != other.ResolutionType) return false;
      if (Outcome != other.Outcome) return false;
      if (!object.Equals(Outpoint, other.Outpoint)) return false;
      if (AmountSat != other.AmountSat) return false;
      if (SweepTxid != other.SweepTxid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResolutionType != global::Lnrpc.ResolutionType.TypeUnknown) hash ^= ResolutionType.GetHashCode();
      if (Outcome != global::Lnrpc.ResolutionOutcome.OutcomeUnknown) hash ^= Outcome.GetHashCode();
      if (outpoint_ != null) hash ^= Outpoint.GetHashCode();
      if (AmountSat != 0UL) hash ^= AmountSat.GetHashCode();
      if (SweepTxid.Length != 0) hash ^= SweepTxid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ResolutionType != global::Lnrpc.ResolutionType.TypeUnknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResolutionType);
      }
      if (Outcome != global::Lnrpc.ResolutionOutcome.OutcomeUnknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Outcome);
      }
      if (outpoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Outpoint);
      }
      if (AmountSat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AmountSat);
      }
      if (SweepTxid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SweepTxid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ResolutionType != global::Lnrpc.ResolutionType.TypeUnknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResolutionType);
      }
      if (Outcome != global::Lnrpc.ResolutionOutcome.OutcomeUnknown) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Outcome);
      }
      if (outpoint_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Outpoint);
      }
      if (AmountSat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AmountSat);
      }
      if (SweepTxid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SweepTxid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResolutionType != global::Lnrpc.ResolutionType.TypeUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResolutionType);
      }
      if (Outcome != global::Lnrpc.ResolutionOutcome.OutcomeUnknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Outcome);
      }
      if (outpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outpoint);
      }
      if (AmountSat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmountSat);
      }
      if (SweepTxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SweepTxid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Resolution other) {
      if (other == null) {
        return;
      }
      if (other.ResolutionType != global::Lnrpc.ResolutionType.TypeUnknown) {
        ResolutionType = other.ResolutionType;
      }
      if (other.Outcome != global::Lnrpc.ResolutionOutcome.OutcomeUnknown) {
        Outcome = other.Outcome;
      }
      if (other.outpoint_ != null) {
        if (outpoint_ == null) {
          Outpoint = new global::Lnrpc.OutPoint();
        }
        Outpoint.MergeFrom(other.Outpoint);
      }
      if (other.AmountSat != 0UL) {
        AmountSat = other.AmountSat;
      }
      if (other.SweepTxid.Length != 0) {
        SweepTxid = other.SweepTxid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResolutionType = (global::Lnrpc.ResolutionType) input.ReadEnum();
            break;
          }
          case 16: {
            Outcome = (global::Lnrpc.ResolutionOutcome) input.ReadEnum();
            break;
          }
          case 26: {
            if (outpoint_ == null) {
              Outpoint = new global::Lnrpc.OutPoint();
            }
            input.ReadMessage(Outpoint);
            break;
          }
          case 32: {
            AmountSat = input.ReadUInt64();
            break;
          }
          case 42: {
            SweepTxid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ResolutionType = (global::Lnrpc.ResolutionType) input.ReadEnum();
            break;
          }
          case 16: {
            Outcome = (global::Lnrpc.ResolutionOutcome) input.ReadEnum();
            break;
          }
          case 26: {
            if (outpoint_ == null) {
              Outpoint = new global::Lnrpc.OutPoint();
            }
            input.ReadMessage(Outpoint);
            break;
          }
          case 32: {
            AmountSat = input.ReadUInt64();
            break;
          }
          case 42: {
            SweepTxid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClosedChannelsRequest : pb::IMessage<ClosedChannelsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClosedChannelsRequest> _parser = new pb::MessageParser<ClosedChannelsRequest>(() => new ClosedChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest(ClosedChannelsRequest other) : this() {
      cooperative_ = other.cooperative_;
      localForce_ = other.localForce_;
      remoteForce_ = other.remoteForce_;
      breach_ = other.breach_;
      fundingCanceled_ = other.fundingCanceled_;
      abandoned_ = other.abandoned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest Clone() {
      return new ClosedChannelsRequest(this);
    }

    /// <summary>Field number for the "cooperative" field.</summary>
    public const int CooperativeFieldNumber = 1;
    private bool cooperative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cooperative {
      get { return cooperative_; }
      set {
        cooperative_ = value;
      }
    }

    /// <summary>Field number for the "local_force" field.</summary>
    public const int LocalForceFieldNumber = 2;
    private bool localForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalForce {
      get { return localForce_; }
      set {
        localForce_ = value;
      }
    }

    /// <summary>Field number for the "remote_force" field.</summary>
    public const int RemoteForceFieldNumber = 3;
    private bool remoteForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoteForce {
      get { return remoteForce_; }
      set {
        remoteForce_ = value;
      }
    }

    /// <summary>Field number for the "breach" field.</summary>
    public const int BreachFieldNumber = 4;
    private bool breach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Breach {
      get { return breach_; }
      set {
        breach_ = value;
      }
    }

    /// <summary>Field number for the "funding_canceled" field.</summary>
    public const int FundingCanceledFieldNumber = 5;
    private bool fundingCanceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FundingCanceled {
      get { return fundingCanceled_; }
      set {
        fundingCanceled_ = value;
      }
    }

    /// <summary>Field number for the "abandoned" field.</summary>
    public const int AbandonedFieldNumber = 6;
    private bool abandoned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Abandoned {
      get { return abandoned_; }
      set {
        abandoned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cooperative != other.Cooperative) return false;
      if (LocalForce != other.LocalForce) return false;
      if (RemoteForce != other.RemoteForce) return false;
      if (Breach != other.Breach) return false;
      if (FundingCanceled != other.FundingCanceled) return false;
      if (Abandoned != other.Abandoned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cooperative != false) hash ^= Cooperative.GetHashCode();
      if (LocalForce != false) hash ^= LocalForce.GetHashCode();
      if (RemoteForce != false) hash ^= RemoteForce.GetHashCode();
      if (Breach != false) hash ^= Breach.GetHashCode();
      if (FundingCanceled != false) hash ^= FundingCanceled.GetHashCode();
      if (Abandoned != false) hash ^= Abandoned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Cooperative != false) {
        output.WriteRawTag(8);
        output.WriteBool(Cooperative);
      }
      if (LocalForce != false) {
        output.WriteRawTag(16);
        output.WriteBool(LocalForce);
      }
      if (RemoteForce != false) {
        output.WriteRawTag(24);
        output.WriteBool(RemoteForce);
      }
      if (Breach != false) {
        output.WriteRawTag(32);
        output.WriteBool(Breach);
      }
      if (FundingCanceled != false) {
        output.WriteRawTag(40);
        output.WriteBool(FundingCanceled);
      }
      if (Abandoned != false) {
        output.WriteRawTag(48);
        output.WriteBool(Abandoned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Cooperative != false) {
        output.WriteRawTag(8);
        output.WriteBool(Cooperative);
      }
      if (LocalForce != false) {
        output.WriteRawTag(16);
        output.WriteBool(LocalForce);
      }
      if (RemoteForce != false) {
        output.WriteRawTag(24);
        output.WriteBool(RemoteForce);
      }
      if (Breach != false) {
        output.WriteRawTag(32);
        output.WriteBool(Breach);
      }
      if (FundingCanceled != false) {
        output.WriteRawTag(40);
        output.WriteBool(FundingCanceled);
      }
      if (Abandoned != false) {
        output.WriteRawTag(48);
        output.WriteBool(Abandoned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cooperative != false) {
        size += 1 + 1;
      }
      if (LocalForce != false) {
        size += 1 + 1;
      }
      if (RemoteForce != false) {
        size += 1 + 1;
      }
      if (Breach != false) {
        size += 1 + 1;
      }
      if (FundingCanceled != false) {
        size += 1 + 1;
      }
      if (Abandoned != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cooperative != false) {
        Cooperative = other.Cooperative;
      }
      if (other.LocalForce != false) {
        LocalForce = other.LocalForce;
      }
      if (other.RemoteForce != false) {
        RemoteForce = other.RemoteForce;
      }
      if (other.Breach != false) {
        Breach = other.Breach;
      }
      if (other.FundingCanceled != false) {
        FundingCanceled = other.FundingCanceled;
      }
      if (other.Abandoned != false) {
        Abandoned = other.Abandoned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cooperative = input.ReadBool();
            break;
          }
          case 16: {
            LocalForce = input.ReadBool();
            break;
          }
          case 24: {
            RemoteForce = input.ReadBool();
            break;
          }
          case 32: {
            Breach = input.ReadBool();
            break;
          }
          case 40: {
            FundingCanceled = input.ReadBool();
            break;
          }
          case 48: {
            Abandoned = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Cooperative = input.ReadBool();
            break;
          }
          case 16: {
            LocalForce = input.ReadBool();
            break;
          }
          case 24: {
            RemoteForce = input.ReadBool();
            break;
          }
          case 32: {
            Breach = input.ReadBool();
            break;
          }
          case 40: {
            FundingCanceled = input.ReadBool();
            break;
          }
          case 48: {
            Abandoned = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClosedChannelsResponse : pb::IMessage<ClosedChannelsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClosedChannelsResponse> _parser = new pb::MessageParser<ClosedChannelsResponse>(() => new ClosedChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse(ClosedChannelsResponse other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse Clone() {
      return new ClosedChannelsResponse(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelCloseSummary> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelCloseSummary.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary> channels_ = new pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      channels_.WriteTo(ref output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelsResponse other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            channels_.AddEntriesFrom(ref input, _repeated_channels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Peer : pb::IMessage<Peer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Peer> _parser = new pb::MessageParser<Peer>(() => new Peer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Peer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer(Peer other) : this() {
      pubKey_ = other.pubKey_;
      address_ = other.address_;
      bytesSent_ = other.bytesSent_;
      bytesRecv_ = other.bytesRecv_;
      satSent_ = other.satSent_;
      satRecv_ = other.satRecv_;
      inbound_ = other.inbound_;
      pingTime_ = other.pingTime_;
      syncType_ = other.syncType_;
      features_ = other.features_.Clone();
      errors_ = other.errors_.Clone();
      flapCount_ = other.flapCount_;
      lastFlapNs_ = other.lastFlapNs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer Clone() {
      return new Peer(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    /// The identity pubkey of the peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    /// Network address of the peer; eg `127.0.0.1:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_sent" field.</summary>
    public const int BytesSentFieldNumber = 4;
    private ulong bytesSent_;
    /// <summary>
    /// Bytes of data transmitted to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesSent {
      get { return bytesSent_; }
      set {
        bytesSent_ = value;
      }
    }

    /// <summary>Field number for the "bytes_recv" field.</summary>
    public const int BytesRecvFieldNumber = 5;
    private ulong bytesRecv_;
    /// <summary>
    /// Bytes of data transmitted from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesRecv {
      get { return bytesRecv_; }
      set {
        bytesRecv_ = value;
      }
    }

    /// <summary>Field number for the "sat_sent" field.</summary>
    public const int SatSentFieldNumber = 6;
    private long satSent_;
    /// <summary>
    /// Satoshis sent to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatSent {
      get { return satSent_; }
      set {
        satSent_ = value;
      }
    }

    /// <summary>Field number for the "sat_recv" field.</summary>
    public const int SatRecvFieldNumber = 7;
    private long satRecv_;
    /// <summary>
    /// Satoshis received from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatRecv {
      get { return satRecv_; }
      set {
        satRecv_ = value;
      }
    }

    /// <summary>Field number for the "inbound" field.</summary>
    public const int InboundFieldNumber = 8;
    private bool inbound_;
    /// <summary>
    /// A channel is inbound if the counterparty initiated the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inbound {
      get { return inbound_; }
      set {
        inbound_ = value;
      }
    }

    /// <summary>Field number for the "ping_time" field.</summary>
    public const int PingTimeFieldNumber = 9;
    private long pingTime_;
    /// <summary>
    /// Ping time to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PingTime {
      get { return pingTime_; }
      set {
        pingTime_ = value;
      }
    }

    /// <summary>Field number for the "sync_type" field.</summary>
    public const int SyncTypeFieldNumber = 10;
    private global::Lnrpc.Peer.Types.SyncType syncType_ = global::Lnrpc.Peer.Types.SyncType.UnknownSync;
    /// <summary>
    /// The type of sync we are currently performing with this peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Peer.Types.SyncType SyncType {
      get { return syncType_; }
      set {
        syncType_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 11;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 90);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    /// Features advertised by the remote peer in their init message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Lnrpc.TimestampedError> _repeated_errors_codec
        = pb::FieldCodec.ForMessage(98, global::Lnrpc.TimestampedError.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.TimestampedError> errors_ = new pbc::RepeatedField<global::Lnrpc.TimestampedError>();
    /// <summary>
    ///
    ///The latest errors received from our peer with timestamps, limited to the 10
    ///most recent errors. These errors are tracked across peer connections, but
    ///are not persisted across lnd restarts. Note that these errors are only
    ///stored for peers that we have channels open with, to prevent peers from
    ///spamming us with errors at no cost.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.TimestampedError> Errors {
      get { return errors_; }
    }

    /// <summary>Field number for the "flap_count" field.</summary>
    public const int FlapCountFieldNumber = 13;
    private int flapCount_;
    /// <summary>
    ///
    ///The number of times we have recorded this peer going offline or coming
    ///online, recorded across restarts. Note that this value is decreased over
    ///time if the peer has not recently flapped, so that we can forgive peers
    ///with historically high flap counts.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FlapCount {
      get { return flapCount_; }
      set {
        flapCount_ = value;
      }
    }

    /// <summary>Field number for the "last_flap_ns" field.</summary>
    public const int LastFlapNsFieldNumber = 14;
    private long lastFlapNs_;
    /// <summary>
    ///
    ///The timestamp of the last flap we observed for this peer. If this value is
    ///zero, we have not observed any flaps for this peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastFlapNs {
      get { return lastFlapNs_; }
      set {
        lastFlapNs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Peer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Peer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Address != other.Address) return false;
      if (BytesSent != other.BytesSent) return false;
      if (BytesRecv != other.BytesRecv) return false;
      if (SatSent != other.SatSent) return false;
      if (SatRecv != other.SatRecv) return false;
      if (Inbound != other.Inbound) return false;
      if (PingTime != other.PingTime) return false;
      if (SyncType != other.SyncType) return false;
      if (!Features.Equals(other.Features)) return false;
      if(!errors_.Equals(other.errors_)) return false;
      if (FlapCount != other.FlapCount) return false;
      if (LastFlapNs != other.LastFlapNs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (BytesSent != 0UL) hash ^= BytesSent.GetHashCode();
      if (BytesRecv != 0UL) hash ^= BytesRecv.GetHashCode();
      if (SatSent != 0L) hash ^= SatSent.GetHashCode();
      if (SatRecv != 0L) hash ^= SatRecv.GetHashCode();
      if (Inbound != false) hash ^= Inbound.GetHashCode();
      if (PingTime != 0L) hash ^= PingTime.GetHashCode();
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) hash ^= SyncType.GetHashCode();
      hash ^= Features.GetHashCode();
      hash ^= errors_.GetHashCode();
      if (FlapCount != 0) hash ^= FlapCount.GetHashCode();
      if (LastFlapNs != 0L) hash ^= LastFlapNs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (BytesSent != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BytesSent);
      }
      if (BytesRecv != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BytesRecv);
      }
      if (SatSent != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SatSent);
      }
      if (SatRecv != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatRecv);
      }
      if (Inbound != false) {
        output.WriteRawTag(64);
        output.WriteBool(Inbound);
      }
      if (PingTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PingTime);
      }
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SyncType);
      }
      features_.WriteTo(output, _map_features_codec);
      errors_.WriteTo(output, _repeated_errors_codec);
      if (FlapCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FlapCount);
      }
      if (LastFlapNs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LastFlapNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (BytesSent != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BytesSent);
      }
      if (BytesRecv != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BytesRecv);
      }
      if (SatSent != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SatSent);
      }
      if (SatRecv != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatRecv);
      }
      if (Inbound != false) {
        output.WriteRawTag(64);
        output.WriteBool(Inbound);
      }
      if (PingTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PingTime);
      }
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SyncType);
      }
      features_.WriteTo(ref output, _map_features_codec);
      errors_.WriteTo(ref output, _repeated_errors_codec);
      if (FlapCount != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FlapCount);
      }
      if (LastFlapNs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LastFlapNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (BytesSent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesSent);
      }
      if (BytesRecv != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesRecv);
      }
      if (SatSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatSent);
      }
      if (SatRecv != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatRecv);
      }
      if (Inbound != false) {
        size += 1 + 1;
      }
      if (PingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PingTime);
      }
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncType);
      }
      size += features_.CalculateSize(_map_features_codec);
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (FlapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FlapCount);
      }
      if (LastFlapNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastFlapNs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Peer other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.BytesSent != 0UL) {
        BytesSent = other.BytesSent;
      }
      if (other.BytesRecv != 0UL) {
        BytesRecv = other.BytesRecv;
      }
      if (other.SatSent != 0L) {
        SatSent = other.SatSent;
      }
      if (other.SatRecv != 0L) {
        SatRecv = other.SatRecv;
      }
      if (other.Inbound != false) {
        Inbound = other.Inbound;
      }
      if (other.PingTime != 0L) {
        PingTime = other.PingTime;
      }
      if (other.SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        SyncType = other.SyncType;
      }
      features_.Add(other.features_);
      errors_.Add(other.errors_);
      if (other.FlapCount != 0) {
        FlapCount = other.FlapCount;
      }
      if (other.LastFlapNs != 0L) {
        LastFlapNs = other.LastFlapNs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            BytesSent = input.ReadUInt64();
            break;
          }
          case 40: {
            BytesRecv = input.ReadUInt64();
            break;
          }
          case 48: {
            SatSent = input.ReadInt64();
            break;
          }
          case 56: {
            SatRecv = input.ReadInt64();
            break;
          }
          case 64: {
            Inbound = input.ReadBool();
            break;
          }
          case 72: {
            PingTime = input.ReadInt64();
            break;
          }
          case 80: {
            SyncType = (global::Lnrpc.Peer.Types.SyncType) input.ReadEnum();
            break;
          }
          case 90: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
          case 98: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
          case 104: {
            FlapCount = input.ReadInt32();
            break;
          }
          case 112: {
            LastFlapNs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            BytesSent = input.ReadUInt64();
            break;
          }
          case 40: {
            BytesRecv = input.ReadUInt64();
            break;
          }
          case 48: {
            SatSent = input.ReadInt64();
            break;
          }
          case 56: {
            SatRecv = input.ReadInt64();
            break;
          }
          case 64: {
            Inbound = input.ReadBool();
            break;
          }
          case 72: {
            PingTime = input.ReadInt64();
            break;
          }
          case 80: {
            SyncType = (global::Lnrpc.Peer.Types.SyncType) input.ReadEnum();
            break;
          }
          case 90: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
          case 98: {
            errors_.AddEntriesFrom(ref input, _repeated_errors_codec);
            break;
          }
          case 104: {
            FlapCount = input.ReadInt32();
            break;
          }
          case 112: {
            LastFlapNs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Peer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SyncType {
        /// <summary>
        ///
        ///Denotes that we cannot determine the peer's current sync type.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_SYNC")] UnknownSync = 0,
        /// <summary>
        ///
        ///Denotes that we are actively receiving new graph updates from the peer.
        /// </summary>
        [pbr::OriginalName("ACTIVE_SYNC")] ActiveSync = 1,
        /// <summary>
        ///
        ///Denotes that we are not receiving new graph updates from the peer.
        /// </summary>
        [pbr::OriginalName("PASSIVE_SYNC")] PassiveSync = 2,
        /// <summary>
        ///
        ///Denotes that this peer is pinned into an active sync.
        /// </summary>
        [pbr::OriginalName("PINNED_SYNC")] PinnedSync = 3,
      }

    }
    #endregion

  }

  public sealed partial class TimestampedError : pb::IMessage<TimestampedError>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimestampedError> _parser = new pb::MessageParser<TimestampedError>(() => new TimestampedError());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimestampedError> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampedError() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampedError(TimestampedError other) : this() {
      timestamp_ = other.timestamp_;
      error_ = other.error_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampedError Clone() {
      return new TimestampedError(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    /// The unix timestamp in seconds when the error occurred.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    /// <summary>
    /// The string representation of the error sent by our peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimestampedError);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimestampedError other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Error != other.Error) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimestampedError other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListPeersRequest : pb::IMessage<ListPeersRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPeersRequest> _parser = new pb::MessageParser<ListPeersRequest>(() => new ListPeersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest(ListPeersRequest other) : this() {
      latestError_ = other.latestError_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest Clone() {
      return new ListPeersRequest(this);
    }

    /// <summary>Field number for the "latest_error" field.</summary>
    public const int LatestErrorFieldNumber = 1;
    private bool latestError_;
    /// <summary>
    ///
    ///If true, only the last error that our peer sent us will be returned with
    ///the peer's information, rather than the full set of historic errors we have
    ///stored.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LatestError {
      get { return latestError_; }
      set {
        latestError_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LatestError != other.LatestError) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LatestError != false) hash ^= LatestError.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LatestError != false) {
        output.WriteRawTag(8);
        output.WriteBool(LatestError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LatestError != false) {
        output.WriteRawTag(8);
        output.WriteBool(LatestError);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LatestError != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersRequest other) {
      if (other == null) {
        return;
      }
      if (other.LatestError != false) {
        LatestError = other.LatestError;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LatestError = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LatestError = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListPeersResponse : pb::IMessage<ListPeersResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPeersResponse> _parser = new pb::MessageParser<ListPeersResponse>(() => new ListPeersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse(ListPeersResponse other) : this() {
      peers_ = other.peers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse Clone() {
      return new ListPeersResponse(this);
    }

    /// <summary>Field number for the "peers" field.</summary>
    public const int PeersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Peer> _repeated_peers_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Peer.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Peer> peers_ = new pbc::RepeatedField<global::Lnrpc.Peer>();
    /// <summary>
    /// The list of currently connected peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Peer> Peers {
      get { return peers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peers_.Equals(other.peers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      peers_.WriteTo(output, _repeated_peers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      peers_.WriteTo(ref output, _repeated_peers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peers_.CalculateSize(_repeated_peers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersResponse other) {
      if (other == null) {
        return;
      }
      peers_.Add(other.peers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            peers_.AddEntriesFrom(input, _repeated_peers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            peers_.AddEntriesFrom(ref input, _repeated_peers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PeerEventSubscription : pb::IMessage<PeerEventSubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeerEventSubscription> _parser = new pb::MessageParser<PeerEventSubscription>(() => new PeerEventSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerEventSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription(PeerEventSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription Clone() {
      return new PeerEventSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerEventSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerEventSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerEventSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PeerEvent : pb::IMessage<PeerEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PeerEvent> _parser = new pb::MessageParser<PeerEvent>(() => new PeerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent(PeerEvent other) : this() {
      pubKey_ = other.pubKey_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent Clone() {
      return new PeerEvent(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    /// The identity pubkey of the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Lnrpc.PeerEvent.Types.EventType type_ = global::Lnrpc.PeerEvent.Types.EventType.PeerOnline;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PeerEvent.Types.EventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerEvent other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Lnrpc.PeerEvent.Types.EventType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Lnrpc.PeerEvent.Types.EventType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PeerEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EventType {
        [pbr::OriginalName("PEER_ONLINE")] PeerOnline = 0,
        [pbr::OriginalName("PEER_OFFLINE")] PeerOffline = 1,
      }

    }
    #endregion

  }

  public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest(GetInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest Clone() {
      return new GetInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GetInfoResponse : pb::IMessage<GetInfoResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetInfoResponse> _parser = new pb::MessageParser<GetInfoResponse>(() => new GetInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse(GetInfoResponse other) : this() {
      version_ = other.version_;
      commitHash_ = other.commitHash_;
      identityPubkey_ = other.identityPubkey_;
      alias_ = other.alias_;
      color_ = other.color_;
      numPendingChannels_ = other.numPendingChannels_;
      numActiveChannels_ = other.numActiveChannels_;
      numInactiveChannels_ = other.numInactiveChannels_;
      numPeers_ = other.numPeers_;
      blockHeight_ = other.blockHeight_;
      blockHash_ = other.blockHash_;
      bestHeaderTimestamp_ = other.bestHeaderTimestamp_;
      syncedToChain_ = other.syncedToChain_;
      syncedToGraph_ = other.syncedToGraph_;
      testnet_ = other.testnet_;
      chains_ = other.chains_.Clone();
      uris_ = other.uris_.Clone();
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse Clone() {
      return new GetInfoResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 14;
    private string version_ = "";
    /// <summary>
    /// The version of the LND software that the node is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "commit_hash" field.</summary>
    public const int CommitHashFieldNumber = 20;
    private string commitHash_ = "";
    /// <summary>
    /// The SHA1 commit hash that the daemon is compiled with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommitHash {
      get { return commitHash_; }
      set {
        commitHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity_pubkey" field.</summary>
    public const int IdentityPubkeyFieldNumber = 1;
    private string identityPubkey_ = "";
    /// <summary>
    /// The identity pubkey of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityPubkey {
      get { return identityPubkey_; }
      set {
        identityPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private string alias_ = "";
    /// <summary>
    /// If applicable, the alias of the current node, e.g. "bob"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 17;
    private string color_ = "";
    /// <summary>
    /// The color of the current node in hex code format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_pending_channels" field.</summary>
    public const int NumPendingChannelsFieldNumber = 3;
    private uint numPendingChannels_;
    /// <summary>
    /// Number of pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPendingChannels {
      get { return numPendingChannels_; }
      set {
        numPendingChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_active_channels" field.</summary>
    public const int NumActiveChannelsFieldNumber = 4;
    private uint numActiveChannels_;
    /// <summary>
    /// Number of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumActiveChannels {
      get { return numActiveChannels_; }
      set {
        numActiveChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_inactive_channels" field.</summary>
    public const int NumInactiveChannelsFieldNumber = 15;
    private uint numInactiveChannels_;
    /// <summary>
    /// Number of inactive channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumInactiveChannels {
      get { return numInactiveChannels_; }
      set {
        numInactiveChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_peers" field.</summary>
    public const int NumPeersFieldNumber = 5;
    private uint numPeers_;
    /// <summary>
    /// Number of peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPeers {
      get { return numPeers_; }
      set {
        numPeers_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 6;
    private uint blockHeight_;
    /// <summary>
    /// The node's current view of the height of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 8;
    private string blockHash_ = "";
    /// <summary>
    /// The node's current view of the hash of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "best_header_timestamp" field.</summary>
    public const int BestHeaderTimestampFieldNumber = 13;
    private long bestHeaderTimestamp_;
    /// <summary>
    /// Timestamp of the block best known to the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BestHeaderTimestamp {
      get { return bestHeaderTimestamp_; }
      set {
        bestHeaderTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "synced_to_chain" field.</summary>
    public const int SyncedToChainFieldNumber = 9;
    private bool syncedToChain_;
    /// <summary>
    /// Whether the wallet's view is synced to the main chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncedToChain {
      get { return syncedToChain_; }
      set {
        syncedToChain_ = value;
      }
    }

    /// <summary>Field number for the "synced_to_graph" field.</summary>
    public const int SyncedToGraphFieldNumber = 18;
    private bool syncedToGraph_;
    /// <summary>
    /// Whether we consider ourselves synced with the public channel graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncedToGraph {
      get { return syncedToGraph_; }
      set {
        syncedToGraph_ = value;
      }
    }

    /// <summary>Field number for the "testnet" field.</summary>
    public const int TestnetFieldNumber = 10;
    private bool testnet_;
    /// <summary>
    ///
    ///Whether the current node is connected to testnet. This field is
    ///deprecated and the network field should be used instead
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Testnet {
      get { return testnet_; }
      set {
        testnet_ = value;
      }
    }

    /// <summary>Field number for the "chains" field.</summary>
    public const int ChainsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.Chain> _repeated_chains_codec
        = pb::FieldCodec.ForMessage(130, global::Lnrpc.Chain.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Chain> chains_ = new pbc::RepeatedField<global::Lnrpc.Chain>();
    /// <summary>
    /// A list of active chains the node is connected to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Chain> Chains {
      get { return chains_; }
    }

    /// <summary>Field number for the "uris" field.</summary>
    public const int UrisFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_uris_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> uris_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The URIs of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uris {
      get { return uris_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 19;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 154);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    ///
    ///Features that our node has advertised in our init message, node
    ///announcements and invoices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (CommitHash != other.CommitHash) return false;
      if (IdentityPubkey != other.IdentityPubkey) return false;
      if (Alias != other.Alias) return false;
      if (Color != other.Color) return false;
      if (NumPendingChannels != other.NumPendingChannels) return false;
      if (NumActiveChannels != other.NumActiveChannels) return false;
      if (NumInactiveChannels != other.NumInactiveChannels) return false;
      if (NumPeers != other.NumPeers) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BestHeaderTimestamp != other.BestHeaderTimestamp) return false;
      if (SyncedToChain != other.SyncedToChain) return false;
      if (SyncedToGraph != other.SyncedToGraph) return false;
      if (Testnet != other.Testnet) return false;
      if(!chains_.Equals(other.chains_)) return false;
      if(!uris_.Equals(other.uris_)) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (CommitHash.Length != 0) hash ^= CommitHash.GetHashCode();
      if (IdentityPubkey.Length != 0) hash ^= IdentityPubkey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (NumPendingChannels != 0) hash ^= NumPendingChannels.GetHashCode();
      if (NumActiveChannels != 0) hash ^= NumActiveChannels.GetHashCode();
      if (NumInactiveChannels != 0) hash ^= NumInactiveChannels.GetHashCode();
      if (NumPeers != 0) hash ^= NumPeers.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BestHeaderTimestamp != 0L) hash ^= BestHeaderTimestamp.GetHashCode();
      if (SyncedToChain != false) hash ^= SyncedToChain.GetHashCode();
      if (SyncedToGraph != false) hash ^= SyncedToGraph.GetHashCode();
      if (Testnet != false) hash ^= Testnet.GetHashCode();
      hash ^= chains_.GetHashCode();
      hash ^= uris_.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IdentityPubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (NumPendingChannels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumActiveChannels);
      }
      if (NumPeers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPeers);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BlockHash);
      }
      if (SyncedToChain != false) {
        output.WriteRawTag(72);
        output.WriteBool(SyncedToChain);
      }
      if (Testnet != false) {
        output.WriteRawTag(80);
        output.WriteBool(Testnet);
      }
      uris_.WriteTo(output, _repeated_uris_codec);
      if (BestHeaderTimestamp != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BestHeaderTimestamp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Version);
      }
      if (NumInactiveChannels != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(NumInactiveChannels);
      }
      chains_.WriteTo(output, _repeated_chains_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Color);
      }
      if (SyncedToGraph != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SyncedToGraph);
      }
      features_.WriteTo(output, _map_features_codec);
      if (CommitHash.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CommitHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IdentityPubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (NumPendingChannels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumActiveChannels);
      }
      if (NumPeers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPeers);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BlockHash);
      }
      if (SyncedToChain != false) {
        output.WriteRawTag(72);
        output.WriteBool(SyncedToChain);
      }
      if (Testnet != false) {
        output.WriteRawTag(80);
        output.WriteBool(Testnet);
      }
      uris_.WriteTo(ref output, _repeated_uris_codec);
      if (BestHeaderTimestamp != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BestHeaderTimestamp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Version);
      }
      if (NumInactiveChannels != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(NumInactiveChannels);
      }
      chains_.WriteTo(ref output, _repeated_chains_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Color);
      }
      if (SyncedToGraph != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SyncedToGraph);
      }
      features_.WriteTo(ref output, _map_features_codec);
      if (CommitHash.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CommitHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (CommitHash.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommitHash);
      }
      if (IdentityPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (Color.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (NumPendingChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumActiveChannels);
      }
      if (NumInactiveChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumInactiveChannels);
      }
      if (NumPeers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPeers);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BestHeaderTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BestHeaderTimestamp);
      }
      if (SyncedToChain != false) {
        size += 1 + 1;
      }
      if (SyncedToGraph != false) {
        size += 2 + 1;
      }
      if (Testnet != false) {
        size += 1 + 1;
      }
      size += chains_.CalculateSize(_repeated_chains_codec);
      size += uris_.CalculateSize(_repeated_uris_codec);
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.CommitHash.Length != 0) {
        CommitHash = other.CommitHash;
      }
      if (other.IdentityPubkey.Length != 0) {
        IdentityPubkey = other.IdentityPubkey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.NumPendingChannels != 0) {
        NumPendingChannels = other.NumPendingChannels;
      }
      if (other.NumActiveChannels != 0) {
        NumActiveChannels = other.NumActiveChannels;
      }
      if (other.NumInactiveChannels != 0) {
        NumInactiveChannels = other.NumInactiveChannels;
      }
      if (other.NumPeers != 0) {
        NumPeers = other.NumPeers;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BestHeaderTimestamp != 0L) {
        BestHeaderTimestamp = other.BestHeaderTimestamp;
      }
      if (other.SyncedToChain != false) {
        SyncedToChain = other.SyncedToChain;
      }
      if (other.SyncedToGraph != false) {
        SyncedToGraph = other.SyncedToGraph;
      }
      if (other.Testnet != false) {
        Testnet = other.Testnet;
      }
      chains_.Add(other.chains_);
      uris_.Add(other.uris_);
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IdentityPubkey = input.ReadString();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 24: {
            NumPendingChannels = input.ReadUInt32();
            break;
          }
          case 32: {
            NumActiveChannels = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPeers = input.ReadUInt32();
            break;
          }
          case 48: {
            BlockHeight = input.ReadUInt32();
            break;
          }
          case 66: {
            BlockHash = input.ReadString();
            break;
          }
          case 72: {
            SyncedToChain = input.ReadBool();
            break;
          }
          case 80: {
            Testnet = input.ReadBool();
            break;
          }
          case 98: {
            uris_.AddEntriesFrom(input, _repeated_uris_codec);
            break;
          }
          case 104: {
            BestHeaderTimestamp = input.ReadInt64();
            break;
          }
          case 114: {
            Version = input.ReadString();
            break;
          }
          case 120: {
            NumInactiveChannels = input.ReadUInt32();
            break;
          }
          case 130: {
            chains_.AddEntriesFrom(input, _repeated_chains_codec);
            break;
          }
          case 138: {
            Color = input.ReadString();
            break;
          }
          case 144: {
            SyncedToGraph = input.ReadBool();
            break;
          }
          case 154: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
          case 162: {
            CommitHash = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            IdentityPubkey = input.ReadString();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 24: {
            NumPendingChannels = input.ReadUInt32();
            break;
          }
          case 32: {
            NumActiveChannels = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPeers = input.ReadUInt32();
            break;
          }
          case 48: {
            BlockHeight = input.ReadUInt32();
            break;
          }
          case 66: {
            BlockHash = input.ReadString();
            break;
          }
          case 72: {
            SyncedToChain = input.ReadBool();
            break;
          }
          case 80: {
            Testnet = input.ReadBool();
            break;
          }
          case 98: {
            uris_.AddEntriesFrom(ref input, _repeated_uris_codec);
            break;
          }
          case 104: {
            BestHeaderTimestamp = input.ReadInt64();
            break;
          }
          case 114: {
            Version = input.ReadString();
            break;
          }
          case 120: {
            NumInactiveChannels = input.ReadUInt32();
            break;
          }
          case 130: {
            chains_.AddEntriesFrom(ref input, _repeated_chains_codec);
            break;
          }
          case 138: {
            Color = input.ReadString();
            break;
          }
          case 144: {
            SyncedToGraph = input.ReadBool();
            break;
          }
          case 154: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
          case 162: {
            CommitHash = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GetRecoveryInfoRequest : pb::IMessage<GetRecoveryInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetRecoveryInfoRequest> _parser = new pb::MessageParser<GetRecoveryInfoRequest>(() => new GetRecoveryInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecoveryInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoRequest(GetRecoveryInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoRequest Clone() {
      return new GetRecoveryInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecoveryInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecoveryInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecoveryInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GetRecoveryInfoResponse : pb::IMessage<GetRecoveryInfoResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GetRecoveryInfoResponse> _parser = new pb::MessageParser<GetRecoveryInfoResponse>(() => new GetRecoveryInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetRecoveryInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoResponse(GetRecoveryInfoResponse other) : this() {
      recoveryMode_ = other.recoveryMode_;
      recoveryFinished_ = other.recoveryFinished_;
      progress_ = other.progress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetRecoveryInfoResponse Clone() {
      return new GetRecoveryInfoResponse(this);
    }

    /// <summary>Field number for the "recovery_mode" field.</summary>
    public const int RecoveryModeFieldNumber = 1;
    private bool recoveryMode_;
    /// <summary>
    /// Whether the wallet is in recovery mode
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecoveryMode {
      get { return recoveryMode_; }
      set {
        recoveryMode_ = value;
      }
    }

    /// <summary>Field number for the "recovery_finished" field.</summary>
    public const int RecoveryFinishedFieldNumber = 2;
    private bool recoveryFinished_;
    /// <summary>
    /// Whether the wallet recovery progress is finished
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecoveryFinished {
      get { return recoveryFinished_; }
      set {
        recoveryFinished_ = value;
      }
    }

    /// <summary>Field number for the "progress" field.</summary>
    public const int ProgressFieldNumber = 3;
    private double progress_;
    /// <summary>
    /// The recovery progress, ranging from 0 to 1.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetRecoveryInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetRecoveryInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecoveryMode != other.RecoveryMode) return false;
      if (RecoveryFinished != other.RecoveryFinished) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Progress, other.Progress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecoveryMode != false) hash ^= RecoveryMode.GetHashCode();
      if (RecoveryFinished != false) hash ^= RecoveryFinished.GetHashCode();
      if (Progress != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Progress);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RecoveryMode != false) {
        output.WriteRawTag(8);
        output.WriteBool(RecoveryMode);
      }
      if (RecoveryFinished != false) {
        output.WriteRawTag(16);
        output.WriteBool(RecoveryFinished);
      }
      if (Progress != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RecoveryMode != false) {
        output.WriteRawTag(8);
        output.WriteBool(RecoveryMode);
      }
      if (RecoveryFinished != false) {
        output.WriteRawTag(16);
        output.WriteBool(RecoveryFinished);
      }
      if (Progress != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Progress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecoveryMode != false) {
        size += 1 + 1;
      }
      if (RecoveryFinished != false) {
        size += 1 + 1;
      }
      if (Progress != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetRecoveryInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.RecoveryMode != false) {
        RecoveryMode = other.RecoveryMode;
      }
      if (other.RecoveryFinished != false) {
        RecoveryFinished = other.RecoveryFinished;
      }
      if (other.Progress != 0D) {
        Progress = other.Progress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RecoveryMode = input.ReadBool();
            break;
          }
          case 16: {
            RecoveryFinished = input.ReadBool();
            break;
          }
          case 25: {
            Progress = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RecoveryMode = input.ReadBool();
            break;
          }
          case 16: {
            RecoveryFinished = input.ReadBool();
            break;
          }
          case 25: {
            Progress = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Chain : pb::IMessage<Chain>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Chain> _parser = new pb::MessageParser<Chain>(() => new Chain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain(Chain other) : this() {
      chain_ = other.chain_;
      network_ = other.network_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain Clone() {
      return new Chain(this);
    }

    /// <summary>Field number for the "chain" field.</summary>
    public const int Chain_FieldNumber = 1;
    private string chain_ = "";
    /// <summary>
    /// The blockchain the node is on (eg bitcoin, litecoin)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chain_ {
      get { return chain_; }
      set {
        chain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 2;
    private string network_ = "";
    /// <summary>
    /// The network the node is on (eg regtest, testnet, mainnet)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chain_ != other.Chain_) return false;
      if (Network != other.Network) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chain_.Length != 0) hash ^= Chain_.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Chain_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Chain_);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Chain_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Chain_);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chain_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chain_);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chain other) {
      if (other == null) {
        return;
      }
      if (other.Chain_.Length != 0) {
        Chain_ = other.Chain_;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Chain_ = input.ReadString();
            break;
          }
          case 18: {
            Network = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Chain_ = input.ReadString();
            break;
          }
          case 18: {
            Network = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConfirmationUpdate : pb::IMessage<ConfirmationUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConfirmationUpdate> _parser = new pb::MessageParser<ConfirmationUpdate>(() => new ConfirmationUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmationUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate(ConfirmationUpdate other) : this() {
      blockSha_ = other.blockSha_;
      blockHeight_ = other.blockHeight_;
      numConfsLeft_ = other.numConfsLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate Clone() {
      return new ConfirmationUpdate(this);
    }

    /// <summary>Field number for the "block_sha" field.</summary>
    public const int BlockShaFieldNumber = 1;
    private pb::ByteString blockSha_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockSha {
      get { return blockSha_; }
      set {
        blockSha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 2;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "num_confs_left" field.</summary>
    public const int NumConfsLeftFieldNumber = 3;
    private uint numConfsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumConfsLeft {
      get { return numConfsLeft_; }
      set {
        numConfsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmationUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmationUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockSha != other.BlockSha) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (NumConfsLeft != other.NumConfsLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockSha.Length != 0) hash ^= BlockSha.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (NumConfsLeft != 0) hash ^= NumConfsLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (BlockSha.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockSha);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumConfsLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (BlockSha.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockSha);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumConfsLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockSha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockSha);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumConfsLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmationUpdate other) {
      if (other == null) {
        return;
      }
      if (other.BlockSha.Length != 0) {
        BlockSha = other.BlockSha;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.NumConfsLeft != 0) {
        NumConfsLeft = other.NumConfsLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BlockSha = input.ReadBytes();
            break;
          }
          case 16: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 24: {
            NumConfsLeft = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            BlockSha = input.ReadBytes();
            break;
          }
          case 16: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 24: {
            NumConfsLeft = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelOpenUpdate : pb::IMessage<ChannelOpenUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelOpenUpdate> _parser = new pb::MessageParser<ChannelOpenUpdate>(() => new ChannelOpenUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelOpenUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate(ChannelOpenUpdate other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate Clone() {
      return new ChannelOpenUpdate(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelOpenUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelOpenUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelOpenUpdate other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelCloseUpdate : pb::IMessage<ChannelCloseUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelCloseUpdate> _parser = new pb::MessageParser<ChannelCloseUpdate>(() => new ChannelCloseUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCloseUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate(ChannelCloseUpdate other) : this() {
      closingTxid_ = other.closingTxid_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate Clone() {
      return new ChannelCloseUpdate(this);
    }

    /// <summary>Field number for the "closing_txid" field.</summary>
    public const int ClosingTxidFieldNumber = 1;
    private pb::ByteString closingTxid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClosingTxid {
      get { return closingTxid_; }
      set {
        closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCloseUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCloseUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClosingTxid != other.ClosingTxid) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClosingTxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClosingTxid);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClosingTxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClosingTxid);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClosingTxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClosingTxid);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCloseUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ClosingTxid.Length != 0) {
        ClosingTxid = other.ClosingTxid;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClosingTxid = input.ReadBytes();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClosingTxid = input.ReadBytes();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CloseChannelRequest : pb::IMessage<CloseChannelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseChannelRequest> _parser = new pb::MessageParser<CloseChannelRequest>(() => new CloseChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest(CloseChannelRequest other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      force_ = other.force_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      deliveryAddress_ = other.deliveryAddress_;
      satPerVbyte_ = other.satPerVbyte_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest Clone() {
      return new CloseChannelRequest(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    /// <summary>
    ///
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 2;
    private bool force_;
    /// <summary>
    /// If true, then the channel will be closed forcibly. This means the
    /// current commitment transaction will be signed and broadcast.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    /// The target number of blocks that the closure transaction should be
    /// confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 4;
    private long satPerByte_;
    /// <summary>
    /// Deprecated, use sat_per_vbyte.
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// closure transaction.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "delivery_address" field.</summary>
    public const int DeliveryAddressFieldNumber = 5;
    private string deliveryAddress_ = "";
    /// <summary>
    ///
    ///An optional address to send funds to in the case of a cooperative close.
    ///If the channel was opened with an upfront shutdown script and this field
    ///is set, the request to close will fail because the channel must pay out
    ///to the upfront shutdown addresss.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveryAddress {
      get { return deliveryAddress_; }
      set {
        deliveryAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sat_per_vbyte" field.</summary>
    public const int SatPerVbyteFieldNumber = 6;
    private ulong satPerVbyte_;
    /// <summary>
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// closure transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SatPerVbyte {
      get { return satPerVbyte_; }
      set {
        satPerVbyte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      if (Force != other.Force) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (DeliveryAddress != other.DeliveryAddress) return false;
      if (SatPerVbyte != other.SatPerVbyte) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (DeliveryAddress.Length != 0) hash ^= DeliveryAddress.GetHashCode();
      if (SatPerVbyte != 0UL) hash ^= SatPerVbyte.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (Force != false) {
        output.WriteRawTag(16);
        output.WriteBool(Force);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SatPerByte);
      }
      if (DeliveryAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeliveryAddress);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SatPerVbyte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (Force != false) {
        output.WriteRawTag(16);
        output.WriteBool(Force);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SatPerByte);
      }
      if (DeliveryAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeliveryAddress);
      }
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SatPerVbyte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (DeliveryAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveryAddress);
      }
      if (SatPerVbyte != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SatPerVbyte);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.DeliveryAddress.Length != 0) {
        DeliveryAddress = other.DeliveryAddress;
      }
      if (other.SatPerVbyte != 0UL) {
        SatPerVbyte = other.SatPerVbyte;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
          case 16: {
            Force = input.ReadBool();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 42: {
            DeliveryAddress = input.ReadString();
            break;
          }
          case 48: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
          case 16: {
            Force = input.ReadBool();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 42: {
            DeliveryAddress = input.ReadString();
            break;
          }
          case 48: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CloseStatusUpdate : pb::IMessage<CloseStatusUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CloseStatusUpdate> _parser = new pb::MessageParser<CloseStatusUpdate>(() => new CloseStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate(CloseStatusUpdate other) : this() {
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          ClosePending = other.ClosePending.Clone();
          break;
        case UpdateOneofCase.ChanClose:
          ChanClose = other.ChanClose.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate Clone() {
      return new CloseStatusUpdate(this);
    }

    /// <summary>Field number for the "close_pending" field.</summary>
    public const int ClosePendingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ClosePending {
      get { return updateCase_ == UpdateOneofCase.ClosePending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ClosePending;
      }
    }

    /// <summary>Field number for the "chan_close" field.</summary>
    public const int ChanCloseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseUpdate ChanClose {
      get { return updateCase_ == UpdateOneofCase.ChanClose ? (global::Lnrpc.ChannelCloseUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanClose;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ClosePending = 1,
      ChanClose = 3,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClosePending, other.ClosePending)) return false;
      if (!object.Equals(ChanClose, other.ChanClose)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ClosePending) hash ^= ClosePending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanClose) hash ^= ChanClose.GetHashCode();
      hash ^= (int) updateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        output.WriteRawTag(10);
        output.WriteMessage(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanClose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        output.WriteRawTag(10);
        output.WriteMessage(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanClose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanClose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStatusUpdate other) {
      if (other == null) {
        return;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          if (ClosePending == null) {
            ClosePending = new global::Lnrpc.PendingUpdate();
          }
          ClosePending.MergeFrom(other.ClosePending);
          break;
        case UpdateOneofCase.ChanClose:
          if (ChanClose == null) {
            ChanClose = new global::Lnrpc.ChannelCloseUpdate();
          }
          ChanClose.MergeFrom(other.ChanClose);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ClosePending) {
              subBuilder.MergeFrom(ClosePending);
            }
            input.ReadMessage(subBuilder);
            ClosePending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelCloseUpdate subBuilder = new global::Lnrpc.ChannelCloseUpdate();
            if (updateCase_ == UpdateOneofCase.ChanClose) {
              subBuilder.MergeFrom(ChanClose);
            }
            input.ReadMessage(subBuilder);
            ChanClose = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ClosePending) {
              subBuilder.MergeFrom(ClosePending);
            }
            input.ReadMessage(subBuilder);
            ClosePending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelCloseUpdate subBuilder = new global::Lnrpc.ChannelCloseUpdate();
            if (updateCase_ == UpdateOneofCase.ChanClose) {
              subBuilder.MergeFrom(ChanClose);
            }
            input.ReadMessage(subBuilder);
            ChanClose = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PendingUpdate : pb::IMessage<PendingUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingUpdate> _parser = new pb::MessageParser<PendingUpdate>(() => new PendingUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate(PendingUpdate other) : this() {
      txid_ = other.txid_;
      outputIndex_ = other.outputIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate Clone() {
      return new PendingUpdate(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 2;
    private uint outputIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Txid);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Txid);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadBytes();
            break;
          }
          case 16: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Txid = input.ReadBytes();
            break;
          }
          case 16: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ReadyForPsbtFunding : pb::IMessage<ReadyForPsbtFunding>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReadyForPsbtFunding> _parser = new pb::MessageParser<ReadyForPsbtFunding>(() => new ReadyForPsbtFunding());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReadyForPsbtFunding> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForPsbtFunding() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForPsbtFunding(ReadyForPsbtFunding other) : this() {
      fundingAddress_ = other.fundingAddress_;
      fundingAmount_ = other.fundingAmount_;
      psbt_ = other.psbt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReadyForPsbtFunding Clone() {
      return new ReadyForPsbtFunding(this);
    }

    /// <summary>Field number for the "funding_address" field.</summary>
    public const int FundingAddressFieldNumber = 1;
    private string fundingAddress_ = "";
    /// <summary>
    ///
    ///The P2WSH address of the channel funding multisig address that the below
    ///specified amount in satoshis needs to be sent to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FundingAddress {
      get { return fundingAddress_; }
      set {
        fundingAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funding_amount" field.</summary>
    public const int FundingAmountFieldNumber = 2;
    private long fundingAmount_;
    /// <summary>
    ///
    ///The exact amount in satoshis that needs to be sent to the above address to
    ///fund the pending channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FundingAmount {
      get { return fundingAmount_; }
      set {
        fundingAmount_ = value;
      }
    }

    /// <summary>Field number for the "psbt" field.</summary>
    public const int PsbtFieldNumber = 3;
    private pb::ByteString psbt_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///A raw PSBT that contains the pending channel output. If a base PSBT was
    ///provided in the PsbtShim, this is the base PSBT with one additional output.
    ///If no base PSBT was specified, this is an otherwise empty PSBT with exactly
    ///one output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Psbt {
      get { return psbt_; }
      set {
        psbt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReadyForPsbtFunding);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReadyForPsbtFunding other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundingAddress != other.FundingAddress) return false;
      if (FundingAmount != other.FundingAmount) return false;
      if (Psbt != other.Psbt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FundingAddress.Length != 0) hash ^= FundingAddress.GetHashCode();
      if (FundingAmount != 0L) hash ^= FundingAmount.GetHashCode();
      if (Psbt.Length != 0) hash ^= Psbt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FundingAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FundingAddress);
      }
      if (FundingAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FundingAmount);
      }
      if (Psbt.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Psbt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FundingAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FundingAddress);
      }
      if (FundingAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FundingAmount);
      }
      if (Psbt.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Psbt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FundingAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FundingAddress);
      }
      if (FundingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FundingAmount);
      }
      if (Psbt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Psbt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReadyForPsbtFunding other) {
      if (other == null) {
        return;
      }
      if (other.FundingAddress.Length != 0) {
        FundingAddress = other.FundingAddress;
      }
      if (other.FundingAmount != 0L) {
        FundingAmount = other.FundingAmount;
      }
      if (other.Psbt.Length != 0) {
        Psbt = other.Psbt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FundingAddress = input.ReadString();
            break;
          }
          case 16: {
            FundingAmount = input.ReadInt64();
            break;
          }
          case 26: {
            Psbt = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FundingAddress = input.ReadString();
            break;
          }
          case 16: {
            FundingAmount = input.ReadInt64();
            break;
          }
          case 26: {
            Psbt = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpenChannelRequest : pb::IMessage<OpenChannelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenChannelRequest> _parser = new pb::MessageParser<OpenChannelRequest>(() => new OpenChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest(OpenChannelRequest other) : this() {
      satPerVbyte_ = other.satPerVbyte_;
      nodePubkey_ = other.nodePubkey_;
      nodePubkeyString_ = other.nodePubkeyString_;
      localFundingAmount_ = other.localFundingAmount_;
      pushSat_ = other.pushSat_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      private_ = other.private_;
      minHtlcMsat_ = other.minHtlcMsat_;
      remoteCsvDelay_ = other.remoteCsvDelay_;
      minConfs_ = other.minConfs_;
      spendUnconfirmed_ = other.spendUnconfirmed_;
      closeAddress_ = other.closeAddress_;
      fundingShim_ = other.fundingShim_ != null ? other.fundingShim_.Clone() : null;
      remoteMaxValueInFlightMsat_ = other.remoteMaxValueInFlightMsat_;
      remoteMaxHtlcs_ = other.remoteMaxHtlcs_;
      maxLocalCsv_ = other.maxLocalCsv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest Clone() {
      return new OpenChannelRequest(this);
    }

    /// <summary>Field number for the "sat_per_vbyte" field.</summary>
    public const int SatPerVbyteFieldNumber = 1;
    private ulong satPerVbyte_;
    /// <summary>
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SatPerVbyte {
      get { return satPerVbyte_; }
      set {
        satPerVbyte_ = value;
      }
    }

    /// <summary>Field number for the "node_pubkey" field.</summary>
    public const int NodePubkeyFieldNumber = 2;
    private pb::ByteString nodePubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The pubkey of the node to open a channel with. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodePubkey {
      get { return nodePubkey_; }
      set {
        nodePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_pubkey_string" field.</summary>
    public const int NodePubkeyStringFieldNumber = 3;
    private string nodePubkeyString_ = "";
    /// <summary>
    ///
    ///The hex encoded pubkey of the node to open a channel with. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodePubkeyString {
      get { return nodePubkeyString_; }
      set {
        nodePubkeyString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_funding_amount" field.</summary>
    public const int LocalFundingAmountFieldNumber = 4;
    private long localFundingAmount_;
    /// <summary>
    /// The number of satoshis the wallet should commit to the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalFundingAmount {
      get { return localFundingAmount_; }
      set {
        localFundingAmount_ = value;
      }
    }

    /// <summary>Field number for the "push_sat" field.</summary>
    public const int PushSatFieldNumber = 5;
    private long pushSat_;
    /// <summary>
    /// The number of satoshis to push to the remote side as part of the initial
    /// commitment state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PushSat {
      get { return pushSat_; }
      set {
        pushSat_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 6;
    private int targetConf_;
    /// <summary>
    /// The target number of blocks that the funding transaction should be
    /// confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 7;
    private long satPerByte_;
    /// <summary>
    /// Deprecated, use sat_per_vbyte.
    /// A manual fee rate set in sat/vbyte that should be used when crafting the
    /// funding transaction.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 8;
    private bool private_;
    /// <summary>
    /// Whether this channel should be private, not announced to the greater
    /// network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 9;
    private long minHtlcMsat_;
    /// <summary>
    /// The minimum value in millisatoshi we will require for incoming HTLCs on
    /// the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "remote_csv_delay" field.</summary>
    public const int RemoteCsvDelayFieldNumber = 10;
    private uint remoteCsvDelay_;
    /// <summary>
    /// The delay we require on the remote's commitment transaction. If this is
    /// not set, it will be scaled automatically with the channel size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoteCsvDelay {
      get { return remoteCsvDelay_; }
      set {
        remoteCsvDelay_ = value;
      }
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 11;
    private int minConfs_;
    /// <summary>
    /// The minimum number of confirmations each one of your outputs used for
    /// the funding transaction must satisfy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "spend_unconfirmed" field.</summary>
    public const int SpendUnconfirmedFieldNumber = 12;
    private bool spendUnconfirmed_;
    /// <summary>
    /// Whether unconfirmed outputs should be used as inputs for the funding
    /// transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpendUnconfirmed {
      get { return spendUnconfirmed_; }
      set {
        spendUnconfirmed_ = value;
      }
    }

    /// <summary>Field number for the "close_address" field.</summary>
    public const int CloseAddressFieldNumber = 13;
    private string closeAddress_ = "";
    /// <summary>
    ///
    ///Close address is an optional address which specifies the address to which
    ///funds should be paid out to upon cooperative close. This field may only be
    ///set if the peer supports the option upfront feature bit (call listpeers
    ///to check). The remote peer will only accept cooperative closes to this
    ///address if it is set.
    ///
    ///Note: If this value is set on channel creation, you will *not* be able to
    ///cooperatively close out to a different address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseAddress {
      get { return closeAddress_; }
      set {
        closeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funding_shim" field.</summary>
    public const int FundingShimFieldNumber = 14;
    private global::Lnrpc.FundingShim fundingShim_;
    /// <summary>
    ///
    ///Funding shims are an optional argument that allow the caller to intercept
    ///certain funding functionality. For example, a shim can be provided to use a
    ///particular key for the commitment key (ideally cold) rather than use one
    ///that is generated by the wallet as normal, or signal that signing will be
    ///carried out in an interactive manner (PSBT based).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShim FundingShim {
      get { return fundingShim_; }
      set {
        fundingShim_ = value;
      }
    }

    /// <summary>Field number for the "remote_max_value_in_flight_msat" field.</summary>
    public const int RemoteMaxValueInFlightMsatFieldNumber = 15;
    private ulong remoteMaxValueInFlightMsat_;
    /// <summary>
    ///
    ///The maximum amount of coins in millisatoshi that can be pending within
    ///the channel. It only applies to the remote party.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RemoteMaxValueInFlightMsat {
      get { return remoteMaxValueInFlightMsat_; }
      set {
        remoteMaxValueInFlightMsat_ = value;
      }
    }

    /// <summary>Field number for the "remote_max_htlcs" field.</summary>
    public const int RemoteMaxHtlcsFieldNumber = 16;
    private uint remoteMaxHtlcs_;
    /// <summary>
    ///
    ///The maximum number of concurrent HTLCs we will allow the remote party to add
    ///to the commitment transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoteMaxHtlcs {
      get { return remoteMaxHtlcs_; }
      set {
        remoteMaxHtlcs_ = value;
      }
    }

    /// <summary>Field number for the "max_local_csv" field.</summary>
    public const int MaxLocalCsvFieldNumber = 17;
    private uint maxLocalCsv_;
    /// <summary>
    ///
    ///Max local csv is the maximum csv delay we will allow for our own commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLocalCsv {
      get { return maxLocalCsv_; }
      set {
        maxLocalCsv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SatPerVbyte != other.SatPerVbyte) return false;
      if (NodePubkey != other.NodePubkey) return false;
      if (NodePubkeyString != other.NodePubkeyString) return false;
      if (LocalFundingAmount != other.LocalFundingAmount) return false;
      if (PushSat != other.PushSat) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (Private != other.Private) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (RemoteCsvDelay != other.RemoteCsvDelay) return false;
      if (MinConfs != other.MinConfs) return false;
      if (SpendUnconfirmed != other.SpendUnconfirmed) return false;
      if (CloseAddress != other.CloseAddress) return false;
      if (!object.Equals(FundingShim, other.FundingShim)) return false;
      if (RemoteMaxValueInFlightMsat != other.RemoteMaxValueInFlightMsat) return false;
      if (RemoteMaxHtlcs != other.RemoteMaxHtlcs) return false;
      if (MaxLocalCsv != other.MaxLocalCsv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SatPerVbyte != 0UL) hash ^= SatPerVbyte.GetHashCode();
      if (NodePubkey.Length != 0) hash ^= NodePubkey.GetHashCode();
      if (NodePubkeyString.Length != 0) hash ^= NodePubkeyString.GetHashCode();
      if (LocalFundingAmount != 0L) hash ^= LocalFundingAmount.GetHashCode();
      if (PushSat != 0L) hash ^= PushSat.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (MinHtlcMsat != 0L) hash ^= MinHtlcMsat.GetHashCode();
      if (RemoteCsvDelay != 0) hash ^= RemoteCsvDelay.GetHashCode();
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (SpendUnconfirmed != false) hash ^= SpendUnconfirmed.GetHashCode();
      if (CloseAddress.Length != 0) hash ^= CloseAddress.GetHashCode();
      if (fundingShim_ != null) hash ^= FundingShim.GetHashCode();
      if (RemoteMaxValueInFlightMsat != 0UL) hash ^= RemoteMaxValueInFlightMsat.GetHashCode();
      if (RemoteMaxHtlcs != 0) hash ^= RemoteMaxHtlcs.GetHashCode();
      if (MaxLocalCsv != 0) hash ^= MaxLocalCsv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SatPerVbyte);
      }
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PushSat);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatPerByte);
      }
      if (Private != false) {
        output.WriteRawTag(64);
        output.WriteBool(Private);
      }
      if (MinHtlcMsat != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RemoteCsvDelay);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(96);
        output.WriteBool(SpendUnconfirmed);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CloseAddress);
      }
      if (fundingShim_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(FundingShim);
      }
      if (RemoteMaxValueInFlightMsat != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(RemoteMaxValueInFlightMsat);
      }
      if (RemoteMaxHtlcs != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(RemoteMaxHtlcs);
      }
      if (MaxLocalCsv != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxLocalCsv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SatPerVbyte != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(SatPerVbyte);
      }
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PushSat);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatPerByte);
      }
      if (Private != false) {
        output.WriteRawTag(64);
        output.WriteBool(Private);
      }
      if (MinHtlcMsat != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RemoteCsvDelay);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(96);
        output.WriteBool(SpendUnconfirmed);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CloseAddress);
      }
      if (fundingShim_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(FundingShim);
      }
      if (RemoteMaxValueInFlightMsat != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(RemoteMaxValueInFlightMsat);
      }
      if (RemoteMaxHtlcs != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(RemoteMaxHtlcs);
      }
      if (MaxLocalCsv != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxLocalCsv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SatPerVbyte != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SatPerVbyte);
      }
      if (NodePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushSat);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (MinHtlcMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoteCsvDelay);
      }
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        size += 1 + 1;
      }
      if (CloseAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseAddress);
      }
      if (fundingShim_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FundingShim);
      }
      if (RemoteMaxValueInFlightMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemoteMaxValueInFlightMsat);
      }
      if (RemoteMaxHtlcs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RemoteMaxHtlcs);
      }
      if (MaxLocalCsv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxLocalCsv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.SatPerVbyte != 0UL) {
        SatPerVbyte = other.SatPerVbyte;
      }
      if (other.NodePubkey.Length != 0) {
        NodePubkey = other.NodePubkey;
      }
      if (other.NodePubkeyString.Length != 0) {
        NodePubkeyString = other.NodePubkeyString;
      }
      if (other.LocalFundingAmount != 0L) {
        LocalFundingAmount = other.LocalFundingAmount;
      }
      if (other.PushSat != 0L) {
        PushSat = other.PushSat;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.MinHtlcMsat != 0L) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.RemoteCsvDelay != 0) {
        RemoteCsvDelay = other.RemoteCsvDelay;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.SpendUnconfirmed != false) {
        SpendUnconfirmed = other.SpendUnconfirmed;
      }
      if (other.CloseAddress.Length != 0) {
        CloseAddress = other.CloseAddress;
      }
      if (other.fundingShim_ != null) {
        if (fundingShim_ == null) {
          FundingShim = new global::Lnrpc.FundingShim();
        }
        FundingShim.MergeFrom(other.FundingShim);
      }
      if (other.RemoteMaxValueInFlightMsat != 0UL) {
        RemoteMaxValueInFlightMsat = other.RemoteMaxValueInFlightMsat;
      }
      if (other.RemoteMaxHtlcs != 0) {
        RemoteMaxHtlcs = other.RemoteMaxHtlcs;
      }
      if (other.MaxLocalCsv != 0) {
        MaxLocalCsv = other.MaxLocalCsv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 18: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 26: {
            NodePubkeyString = input.ReadString();
            break;
          }
          case 32: {
            LocalFundingAmount = input.ReadInt64();
            break;
          }
          case 40: {
            PushSat = input.ReadInt64();
            break;
          }
          case 48: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 56: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 64: {
            Private = input.ReadBool();
            break;
          }
          case 72: {
            MinHtlcMsat = input.ReadInt64();
            break;
          }
          case 80: {
            RemoteCsvDelay = input.ReadUInt32();
            break;
          }
          case 88: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 96: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
          case 106: {
            CloseAddress = input.ReadString();
            break;
          }
          case 114: {
            if (fundingShim_ == null) {
              FundingShim = new global::Lnrpc.FundingShim();
            }
            input.ReadMessage(FundingShim);
            break;
          }
          case 120: {
            RemoteMaxValueInFlightMsat = input.ReadUInt64();
            break;
          }
          case 128: {
            RemoteMaxHtlcs = input.ReadUInt32();
            break;
          }
          case 136: {
            MaxLocalCsv = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SatPerVbyte = input.ReadUInt64();
            break;
          }
          case 18: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 26: {
            NodePubkeyString = input.ReadString();
            break;
          }
          case 32: {
            LocalFundingAmount = input.ReadInt64();
            break;
          }
          case 40: {
            PushSat = input.ReadInt64();
            break;
          }
          case 48: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 56: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 64: {
            Private = input.ReadBool();
            break;
          }
          case 72: {
            MinHtlcMsat = input.ReadInt64();
            break;
          }
          case 80: {
            RemoteCsvDelay = input.ReadUInt32();
            break;
          }
          case 88: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 96: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
          case 106: {
            CloseAddress = input.ReadString();
            break;
          }
          case 114: {
            if (fundingShim_ == null) {
              FundingShim = new global::Lnrpc.FundingShim();
            }
            input.ReadMessage(FundingShim);
            break;
          }
          case 120: {
            RemoteMaxValueInFlightMsat = input.ReadUInt64();
            break;
          }
          case 128: {
            RemoteMaxHtlcs = input.ReadUInt32();
            break;
          }
          case 136: {
            MaxLocalCsv = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class OpenStatusUpdate : pb::IMessage<OpenStatusUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenStatusUpdate> _parser = new pb::MessageParser<OpenStatusUpdate>(() => new OpenStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate(OpenStatusUpdate other) : this() {
      pendingChanId_ = other.pendingChanId_;
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          ChanPending = other.ChanPending.Clone();
          break;
        case UpdateOneofCase.ChanOpen:
          ChanOpen = other.ChanOpen.Clone();
          break;
        case UpdateOneofCase.PsbtFund:
          PsbtFund = other.PsbtFund.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate Clone() {
      return new OpenStatusUpdate(this);
    }

    /// <summary>Field number for the "chan_pending" field.</summary>
    public const int ChanPendingFieldNumber = 1;
    /// <summary>
    ///
    ///Signals that the channel is now fully negotiated and the funding
    ///transaction published.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ChanPending {
      get { return updateCase_ == UpdateOneofCase.ChanPending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanPending;
      }
    }

    /// <summary>Field number for the "chan_open" field.</summary>
    public const int ChanOpenFieldNumber = 3;
    /// <summary>
    ///
    ///Signals that the channel's funding transaction has now reached the
    ///required number of confirmations on chain and can be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelOpenUpdate ChanOpen {
      get { return updateCase_ == UpdateOneofCase.ChanOpen ? (global::Lnrpc.ChannelOpenUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanOpen;
      }
    }

    /// <summary>Field number for the "psbt_fund" field.</summary>
    public const int PsbtFundFieldNumber = 5;
    /// <summary>
    ///
    ///Signals that the funding process has been suspended and the construction
    ///of a PSBT that funds the channel PK script is now required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ReadyForPsbtFunding PsbtFund {
      get { return updateCase_ == UpdateOneofCase.PsbtFund ? (global::Lnrpc.ReadyForPsbtFunding) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.PsbtFund;
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 4;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The pending channel ID of the created channel. This value may be used to
    ///further the funding flow manually via the FundingStateStep method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ChanPending = 1,
      ChanOpen = 3,
      PsbtFund = 5,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPending, other.ChanPending)) return false;
      if (!object.Equals(ChanOpen, other.ChanOpen)) return false;
      if (!object.Equals(PsbtFund, other.PsbtFund)) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ChanPending) hash ^= ChanPending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanOpen) hash ^= ChanOpen.GetHashCode();
      if (updateCase_ == UpdateOneofCase.PsbtFund) hash ^= PsbtFund.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      hash ^= (int) updateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanOpen);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PendingChanId);
      }
      if (updateCase_ == UpdateOneofCase.PsbtFund) {
        output.WriteRawTag(42);
        output.WriteMessage(PsbtFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanOpen);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PendingChanId);
      }
      if (updateCase_ == UpdateOneofCase.PsbtFund) {
        output.WriteRawTag(42);
        output.WriteMessage(PsbtFund);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanOpen);
      }
      if (updateCase_ == UpdateOneofCase.PsbtFund) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PsbtFund);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenStatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          if (ChanPending == null) {
            ChanPending = new global::Lnrpc.PendingUpdate();
          }
          ChanPending.MergeFrom(other.ChanPending);
          break;
        case UpdateOneofCase.ChanOpen:
          if (ChanOpen == null) {
            ChanOpen = new global::Lnrpc.ChannelOpenUpdate();
          }
          ChanOpen.MergeFrom(other.ChanOpen);
          break;
        case UpdateOneofCase.PsbtFund:
          if (PsbtFund == null) {
            PsbtFund = new global::Lnrpc.ReadyForPsbtFunding();
          }
          PsbtFund.MergeFrom(other.PsbtFund);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ChanPending) {
              subBuilder.MergeFrom(ChanPending);
            }
            input.ReadMessage(subBuilder);
            ChanPending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelOpenUpdate subBuilder = new global::Lnrpc.ChannelOpenUpdate();
            if (updateCase_ == UpdateOneofCase.ChanOpen) {
              subBuilder.MergeFrom(ChanOpen);
            }
            input.ReadMessage(subBuilder);
            ChanOpen = subBuilder;
            break;
          }
          case 34: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 42: {
            global::Lnrpc.ReadyForPsbtFunding subBuilder = new global::Lnrpc.ReadyForPsbtFunding();
            if (updateCase_ == UpdateOneofCase.PsbtFund) {
              subBuilder.MergeFrom(PsbtFund);
            }
            input.ReadMessage(subBuilder);
            PsbtFund = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ChanPending) {
              subBuilder.MergeFrom(ChanPending);
            }
            input.ReadMessage(subBuilder);
            ChanPending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelOpenUpdate subBuilder = new global::Lnrpc.ChannelOpenUpdate();
            if (updateCase_ == UpdateOneofCase.ChanOpen) {
              subBuilder.MergeFrom(ChanOpen);
            }
            input.ReadMessage(subBuilder);
            ChanOpen = subBuilder;
            break;
          }
          case 34: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 42: {
            global::Lnrpc.ReadyForPsbtFunding subBuilder = new global::Lnrpc.ReadyForPsbtFunding();
            if (updateCase_ == UpdateOneofCase.PsbtFund) {
              subBuilder.MergeFrom(PsbtFund);
            }
            input.ReadMessage(subBuilder);
            PsbtFund = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KeyLocator : pb::IMessage<KeyLocator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeyLocator> _parser = new pb::MessageParser<KeyLocator>(() => new KeyLocator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator(KeyLocator other) : this() {
      keyFamily_ = other.keyFamily_;
      keyIndex_ = other.keyIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator Clone() {
      return new KeyLocator(this);
    }

    /// <summary>Field number for the "key_family" field.</summary>
    public const int KeyFamilyFieldNumber = 1;
    private int keyFamily_;
    /// <summary>
    /// The family of key being identified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyFamily {
      get { return keyFamily_; }
      set {
        keyFamily_ = value;
      }
    }

    /// <summary>Field number for the "key_index" field.</summary>
    public const int KeyIndexFieldNumber = 2;
    private int keyIndex_;
    /// <summary>
    /// The precise index of the key being identified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyIndex {
      get { return keyIndex_; }
      set {
        keyIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyFamily != other.KeyFamily) return false;
      if (KeyIndex != other.KeyIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyFamily != 0) hash ^= KeyFamily.GetHashCode();
      if (KeyIndex != 0) hash ^= KeyIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (KeyFamily != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KeyFamily);
      }
      if (KeyIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KeyIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (KeyFamily != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KeyFamily);
      }
      if (KeyIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KeyIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyFamily != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyFamily);
      }
      if (KeyIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyLocator other) {
      if (other == null) {
        return;
      }
      if (other.KeyFamily != 0) {
        KeyFamily = other.KeyFamily;
      }
      if (other.KeyIndex != 0) {
        KeyIndex = other.KeyIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KeyFamily = input.ReadInt32();
            break;
          }
          case 16: {
            KeyIndex = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KeyFamily = input.ReadInt32();
            break;
          }
          case 16: {
            KeyIndex = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KeyDescriptor : pb::IMessage<KeyDescriptor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KeyDescriptor> _parser = new pb::MessageParser<KeyDescriptor>(() => new KeyDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor(KeyDescriptor other) : this() {
      rawKeyBytes_ = other.rawKeyBytes_;
      keyLoc_ = other.keyLoc_ != null ? other.keyLoc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor Clone() {
      return new KeyDescriptor(this);
    }

    /// <summary>Field number for the "raw_key_bytes" field.</summary>
    public const int RawKeyBytesFieldNumber = 1;
    private pb::ByteString rawKeyBytes_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The raw bytes of the key being identified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RawKeyBytes {
      get { return rawKeyBytes_; }
      set {
        rawKeyBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_loc" field.</summary>
    public const int KeyLocFieldNumber = 2;
    private global::Lnrpc.KeyLocator keyLoc_;
    /// <summary>
    ///
    ///The key locator that identifies which key to use for signing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.KeyLocator KeyLoc {
      get { return keyLoc_; }
      set {
        keyLoc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawKeyBytes != other.RawKeyBytes) return false;
      if (!object.Equals(KeyLoc, other.KeyLoc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawKeyBytes.Length != 0) hash ^= RawKeyBytes.GetHashCode();
      if (keyLoc_ != null) hash ^= KeyLoc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RawKeyBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RawKeyBytes);
      }
      if (keyLoc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KeyLoc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RawKeyBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RawKeyBytes);
      }
      if (keyLoc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KeyLoc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawKeyBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RawKeyBytes);
      }
      if (keyLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyLoc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.RawKeyBytes.Length != 0) {
        RawKeyBytes = other.RawKeyBytes;
      }
      if (other.keyLoc_ != null) {
        if (keyLoc_ == null) {
          KeyLoc = new global::Lnrpc.KeyLocator();
        }
        KeyLoc.MergeFrom(other.KeyLoc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RawKeyBytes = input.ReadBytes();
            break;
          }
          case 18: {
            if (keyLoc_ == null) {
              KeyLoc = new global::Lnrpc.KeyLocator();
            }
            input.ReadMessage(KeyLoc);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RawKeyBytes = input.ReadBytes();
            break;
          }
          case 18: {
            if (keyLoc_ == null) {
              KeyLoc = new global::Lnrpc.KeyLocator();
            }
            input.ReadMessage(KeyLoc);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChanPointShim : pb::IMessage<ChanPointShim>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChanPointShim> _parser = new pb::MessageParser<ChanPointShim>(() => new ChanPointShim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanPointShim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim(ChanPointShim other) : this() {
      amt_ = other.amt_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      localKey_ = other.localKey_ != null ? other.localKey_.Clone() : null;
      remoteKey_ = other.remoteKey_;
      pendingChanId_ = other.pendingChanId_;
      thawHeight_ = other.thawHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim Clone() {
      return new ChanPointShim(this);
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 1;
    private long amt_;
    /// <summary>
    ///
    ///The size of the pre-crafted output to be used as the channel point for this
    ///channel funding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    /// The target channel point to refrence in created commitment transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "local_key" field.</summary>
    public const int LocalKeyFieldNumber = 3;
    private global::Lnrpc.KeyDescriptor localKey_;
    /// <summary>
    /// Our local key to use when creating the multi-sig output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.KeyDescriptor LocalKey {
      get { return localKey_; }
      set {
        localKey_ = value;
      }
    }

    /// <summary>Field number for the "remote_key" field.</summary>
    public const int RemoteKeyFieldNumber = 4;
    private pb::ByteString remoteKey_ = pb::ByteString.Empty;
    /// <summary>
    /// The key of the remote party to use when creating the multi-sig output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RemoteKey {
      get { return remoteKey_; }
      set {
        remoteKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 5;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///If non-zero, then this will be used as the pending channel ID on the wire
    ///protocol to initate the funding request. This is an optional field, and
    ///should only be set if the responder is already expecting a specific pending
    ///channel ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "thaw_height" field.</summary>
    public const int ThawHeightFieldNumber = 6;
    private uint thawHeight_;
    /// <summary>
    ///
    ///This uint32 indicates if this channel is to be considered 'frozen'. A frozen
    ///channel does not allow a cooperative channel close by the initiator. The
    ///thaw_height is the height that this restriction stops applying to the
    ///channel. The height can be interpreted in two ways: as a relative height if
    ///the value is less than 500,000, or as an absolute height otherwise.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ThawHeight {
      get { return thawHeight_; }
      set {
        thawHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanPointShim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanPointShim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amt != other.Amt) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (!object.Equals(LocalKey, other.LocalKey)) return false;
      if (RemoteKey != other.RemoteKey) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (ThawHeight != other.ThawHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (localKey_ != null) hash ^= LocalKey.GetHashCode();
      if (RemoteKey.Length != 0) hash ^= RemoteKey.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (ThawHeight != 0) hash ^= ThawHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amt);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (localKey_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalKey);
      }
      if (RemoteKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RemoteKey);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PendingChanId);
      }
      if (ThawHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ThawHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amt);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (localKey_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalKey);
      }
      if (RemoteKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RemoteKey);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PendingChanId);
      }
      if (ThawHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ThawHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (localKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalKey);
      }
      if (RemoteKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RemoteKey);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (ThawHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ThawHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanPointShim other) {
      if (other == null) {
        return;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.localKey_ != null) {
        if (localKey_ == null) {
          LocalKey = new global::Lnrpc.KeyDescriptor();
        }
        LocalKey.MergeFrom(other.LocalKey);
      }
      if (other.RemoteKey.Length != 0) {
        RemoteKey = other.RemoteKey;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.ThawHeight != 0) {
        ThawHeight = other.ThawHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amt = input.ReadInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 26: {
            if (localKey_ == null) {
              LocalKey = new global::Lnrpc.KeyDescriptor();
            }
            input.ReadMessage(LocalKey);
            break;
          }
          case 34: {
            RemoteKey = input.ReadBytes();
            break;
          }
          case 42: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 48: {
            ThawHeight = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Amt = input.ReadInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 26: {
            if (localKey_ == null) {
              LocalKey = new global::Lnrpc.KeyDescriptor();
            }
            input.ReadMessage(LocalKey);
            break;
          }
          case 34: {
            RemoteKey = input.ReadBytes();
            break;
          }
          case 42: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 48: {
            ThawHeight = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PsbtShim : pb::IMessage<PsbtShim>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PsbtShim> _parser = new pb::MessageParser<PsbtShim>(() => new PsbtShim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PsbtShim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PsbtShim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PsbtShim(PsbtShim other) : this() {
      pendingChanId_ = other.pendingChanId_;
      basePsbt_ = other.basePsbt_;
      noPublish_ = other.noPublish_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PsbtShim Clone() {
      return new PsbtShim(this);
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 1;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///A unique identifier of 32 random bytes that will be used as the pending
    ///channel ID to identify the PSBT state machine when interacting with it and
    ///on the wire protocol to initiate the funding request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_psbt" field.</summary>
    public const int BasePsbtFieldNumber = 2;
    private pb::ByteString basePsbt_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///An optional base PSBT the new channel output will be added to. If this is
    ///non-empty, it must be a binary serialized PSBT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BasePsbt {
      get { return basePsbt_; }
      set {
        basePsbt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "no_publish" field.</summary>
    public const int NoPublishFieldNumber = 3;
    private bool noPublish_;
    /// <summary>
    ///
    ///If a channel should be part of a batch (multiple channel openings in one
    ///transaction), it can be dangerous if the whole batch transaction is
    ///published too early before all channel opening negotiations are completed.
    ///This flag prevents this particular channel from broadcasting the transaction
    ///after the negotiation with the remote peer. In a batch of channel openings
    ///this flag should be set to true for every channel but the very last.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoPublish {
      get { return noPublish_; }
      set {
        noPublish_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PsbtShim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PsbtShim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingChanId != other.PendingChanId) return false;
      if (BasePsbt != other.BasePsbt) return false;
      if (NoPublish != other.NoPublish) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (BasePsbt.Length != 0) hash ^= BasePsbt.GetHashCode();
      if (NoPublish != false) hash ^= NoPublish.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PendingChanId);
      }
      if (BasePsbt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BasePsbt);
      }
      if (NoPublish != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoPublish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PendingChanId);
      }
      if (BasePsbt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BasePsbt);
      }
      if (NoPublish != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoPublish);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (BasePsbt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BasePsbt);
      }
      if (NoPublish != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PsbtShim other) {
      if (other == null) {
        return;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.BasePsbt.Length != 0) {
        BasePsbt = other.BasePsbt;
      }
      if (other.NoPublish != false) {
        NoPublish = other.NoPublish;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 18: {
            BasePsbt = input.ReadBytes();
            break;
          }
          case 24: {
            NoPublish = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 18: {
            BasePsbt = input.ReadBytes();
            break;
          }
          case 24: {
            NoPublish = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingShim : pb::IMessage<FundingShim>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingShim> _parser = new pb::MessageParser<FundingShim>(() => new FundingShim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingShim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim(FundingShim other) : this() {
      switch (other.ShimCase) {
        case ShimOneofCase.ChanPointShim:
          ChanPointShim = other.ChanPointShim.Clone();
          break;
        case ShimOneofCase.PsbtShim:
          PsbtShim = other.PsbtShim.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim Clone() {
      return new FundingShim(this);
    }

    /// <summary>Field number for the "chan_point_shim" field.</summary>
    public const int ChanPointShimFieldNumber = 1;
    /// <summary>
    ///
    ///A channel shim where the channel point was fully constructed outside
    ///of lnd's wallet and the transaction might already be published.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChanPointShim ChanPointShim {
      get { return shimCase_ == ShimOneofCase.ChanPointShim ? (global::Lnrpc.ChanPointShim) shim_ : null; }
      set {
        shim_ = value;
        shimCase_ = value == null ? ShimOneofCase.None : ShimOneofCase.ChanPointShim;
      }
    }

    /// <summary>Field number for the "psbt_shim" field.</summary>
    public const int PsbtShimFieldNumber = 2;
    /// <summary>
    ///
    ///A channel shim that uses a PSBT to fund and sign the channel funding
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PsbtShim PsbtShim {
      get { return shimCase_ == ShimOneofCase.PsbtShim ? (global::Lnrpc.PsbtShim) shim_ : null; }
      set {
        shim_ = value;
        shimCase_ = value == null ? ShimOneofCase.None : ShimOneofCase.PsbtShim;
      }
    }

    private object shim_;
    /// <summary>Enum of possible cases for the "shim" oneof.</summary>
    public enum ShimOneofCase {
      None = 0,
      ChanPointShim = 1,
      PsbtShim = 2,
    }
    private ShimOneofCase shimCase_ = ShimOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShimOneofCase ShimCase {
      get { return shimCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShim() {
      shimCase_ = ShimOneofCase.None;
      shim_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingShim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingShim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPointShim, other.ChanPointShim)) return false;
      if (!object.Equals(PsbtShim, other.PsbtShim)) return false;
      if (ShimCase != other.ShimCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shimCase_ == ShimOneofCase.ChanPointShim) hash ^= ChanPointShim.GetHashCode();
      if (shimCase_ == ShimOneofCase.PsbtShim) hash ^= PsbtShim.GetHashCode();
      hash ^= (int) shimCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (shimCase_ == ShimOneofCase.ChanPointShim) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPointShim);
      }
      if (shimCase_ == ShimOneofCase.PsbtShim) {
        output.WriteRawTag(18);
        output.WriteMessage(PsbtShim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (shimCase_ == ShimOneofCase.ChanPointShim) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPointShim);
      }
      if (shimCase_ == ShimOneofCase.PsbtShim) {
        output.WriteRawTag(18);
        output.WriteMessage(PsbtShim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shimCase_ == ShimOneofCase.ChanPointShim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPointShim);
      }
      if (shimCase_ == ShimOneofCase.PsbtShim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PsbtShim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingShim other) {
      if (other == null) {
        return;
      }
      switch (other.ShimCase) {
        case ShimOneofCase.ChanPointShim:
          if (ChanPointShim == null) {
            ChanPointShim = new global::Lnrpc.ChanPointShim();
          }
          ChanPointShim.MergeFrom(other.ChanPointShim);
          break;
        case ShimOneofCase.PsbtShim:
          if (PsbtShim == null) {
            PsbtShim = new global::Lnrpc.PsbtShim();
          }
          PsbtShim.MergeFrom(other.PsbtShim);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.ChanPointShim subBuilder = new global::Lnrpc.ChanPointShim();
            if (shimCase_ == ShimOneofCase.ChanPointShim) {
              subBuilder.MergeFrom(ChanPointShim);
            }
            input.ReadMessage(subBuilder);
            ChanPointShim = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.PsbtShim subBuilder = new global::Lnrpc.PsbtShim();
            if (shimCase_ == ShimOneofCase.PsbtShim) {
              subBuilder.MergeFrom(PsbtShim);
            }
            input.ReadMessage(subBuilder);
            PsbtShim = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.ChanPointShim subBuilder = new global::Lnrpc.ChanPointShim();
            if (shimCase_ == ShimOneofCase.ChanPointShim) {
              subBuilder.MergeFrom(ChanPointShim);
            }
            input.ReadMessage(subBuilder);
            ChanPointShim = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.PsbtShim subBuilder = new global::Lnrpc.PsbtShim();
            if (shimCase_ == ShimOneofCase.PsbtShim) {
              subBuilder.MergeFrom(PsbtShim);
            }
            input.ReadMessage(subBuilder);
            PsbtShim = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingShimCancel : pb::IMessage<FundingShimCancel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingShimCancel> _parser = new pb::MessageParser<FundingShimCancel>(() => new FundingShimCancel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingShimCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel(FundingShimCancel other) : this() {
      pendingChanId_ = other.pendingChanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel Clone() {
      return new FundingShimCancel(this);
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 1;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The pending channel ID of the channel to cancel the funding shim for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingShimCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingShimCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingChanId != other.PendingChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingShimCancel other) {
      if (other == null) {
        return;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingPsbtVerify : pb::IMessage<FundingPsbtVerify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingPsbtVerify> _parser = new pb::MessageParser<FundingPsbtVerify>(() => new FundingPsbtVerify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingPsbtVerify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtVerify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtVerify(FundingPsbtVerify other) : this() {
      fundedPsbt_ = other.fundedPsbt_;
      pendingChanId_ = other.pendingChanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtVerify Clone() {
      return new FundingPsbtVerify(this);
    }

    /// <summary>Field number for the "funded_psbt" field.</summary>
    public const int FundedPsbtFieldNumber = 1;
    private pb::ByteString fundedPsbt_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The funded but not yet signed PSBT that sends the exact channel capacity
    ///amount to the PK script returned in the open channel message in a previous
    ///step.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FundedPsbt {
      get { return fundedPsbt_; }
      set {
        fundedPsbt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 2;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The pending channel ID of the channel to get the PSBT for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingPsbtVerify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingPsbtVerify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundedPsbt != other.FundedPsbt) return false;
      if (PendingChanId != other.PendingChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FundedPsbt.Length != 0) hash ^= FundedPsbt.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FundedPsbt.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FundedPsbt);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FundedPsbt.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FundedPsbt);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FundedPsbt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FundedPsbt);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingPsbtVerify other) {
      if (other == null) {
        return;
      }
      if (other.FundedPsbt.Length != 0) {
        FundedPsbt = other.FundedPsbt;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FundedPsbt = input.ReadBytes();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FundedPsbt = input.ReadBytes();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingPsbtFinalize : pb::IMessage<FundingPsbtFinalize>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingPsbtFinalize> _parser = new pb::MessageParser<FundingPsbtFinalize>(() => new FundingPsbtFinalize());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingPsbtFinalize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtFinalize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtFinalize(FundingPsbtFinalize other) : this() {
      signedPsbt_ = other.signedPsbt_;
      pendingChanId_ = other.pendingChanId_;
      finalRawTx_ = other.finalRawTx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingPsbtFinalize Clone() {
      return new FundingPsbtFinalize(this);
    }

    /// <summary>Field number for the "signed_psbt" field.</summary>
    public const int SignedPsbtFieldNumber = 1;
    private pb::ByteString signedPsbt_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The funded PSBT that contains all witness data to send the exact channel
    ///capacity amount to the PK script returned in the open channel message in a
    ///previous step. Cannot be set at the same time as final_raw_tx.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignedPsbt {
      get { return signedPsbt_; }
      set {
        signedPsbt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 2;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    /// The pending channel ID of the channel to get the PSBT for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_raw_tx" field.</summary>
    public const int FinalRawTxFieldNumber = 3;
    private pb::ByteString finalRawTx_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///As an alternative to the signed PSBT with all witness data, the final raw
    ///wire format transaction can also be specified directly. Cannot be set at the
    ///same time as signed_psbt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FinalRawTx {
      get { return finalRawTx_; }
      set {
        finalRawTx_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingPsbtFinalize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingPsbtFinalize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SignedPsbt != other.SignedPsbt) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (FinalRawTx != other.FinalRawTx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SignedPsbt.Length != 0) hash ^= SignedPsbt.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (FinalRawTx.Length != 0) hash ^= FinalRawTx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SignedPsbt.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignedPsbt);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (FinalRawTx.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FinalRawTx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SignedPsbt.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SignedPsbt);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (FinalRawTx.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(FinalRawTx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SignedPsbt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedPsbt);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (FinalRawTx.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FinalRawTx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingPsbtFinalize other) {
      if (other == null) {
        return;
      }
      if (other.SignedPsbt.Length != 0) {
        SignedPsbt = other.SignedPsbt;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.FinalRawTx.Length != 0) {
        FinalRawTx = other.FinalRawTx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SignedPsbt = input.ReadBytes();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 26: {
            FinalRawTx = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SignedPsbt = input.ReadBytes();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 26: {
            FinalRawTx = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingTransitionMsg : pb::IMessage<FundingTransitionMsg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingTransitionMsg> _parser = new pb::MessageParser<FundingTransitionMsg>(() => new FundingTransitionMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingTransitionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg(FundingTransitionMsg other) : this() {
      switch (other.TriggerCase) {
        case TriggerOneofCase.ShimRegister:
          ShimRegister = other.ShimRegister.Clone();
          break;
        case TriggerOneofCase.ShimCancel:
          ShimCancel = other.ShimCancel.Clone();
          break;
        case TriggerOneofCase.PsbtVerify:
          PsbtVerify = other.PsbtVerify.Clone();
          break;
        case TriggerOneofCase.PsbtFinalize:
          PsbtFinalize = other.PsbtFinalize.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg Clone() {
      return new FundingTransitionMsg(this);
    }

    /// <summary>Field number for the "shim_register" field.</summary>
    public const int ShimRegisterFieldNumber = 1;
    /// <summary>
    ///
    ///The funding shim to register. This should be used before any
    ///channel funding has began by the remote party, as it is intended as a
    ///preparatory step for the full channel funding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShim ShimRegister {
      get { return triggerCase_ == TriggerOneofCase.ShimRegister ? (global::Lnrpc.FundingShim) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.ShimRegister;
      }
    }

    /// <summary>Field number for the "shim_cancel" field.</summary>
    public const int ShimCancelFieldNumber = 2;
    /// <summary>
    /// Used to cancel an existing registered funding shim.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShimCancel ShimCancel {
      get { return triggerCase_ == TriggerOneofCase.ShimCancel ? (global::Lnrpc.FundingShimCancel) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.ShimCancel;
      }
    }

    /// <summary>Field number for the "psbt_verify" field.</summary>
    public const int PsbtVerifyFieldNumber = 3;
    /// <summary>
    ///
    ///Used to continue a funding flow that was initiated to be executed
    ///through a PSBT. This step verifies that the PSBT contains the correct
    ///outputs to fund the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingPsbtVerify PsbtVerify {
      get { return triggerCase_ == TriggerOneofCase.PsbtVerify ? (global::Lnrpc.FundingPsbtVerify) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.PsbtVerify;
      }
    }

    /// <summary>Field number for the "psbt_finalize" field.</summary>
    public const int PsbtFinalizeFieldNumber = 4;
    /// <summary>
    ///
    ///Used to continue a funding flow that was initiated to be executed
    ///through a PSBT. This step finalizes the funded and signed PSBT, finishes
    ///negotiation with the peer and finally publishes the resulting funding
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingPsbtFinalize PsbtFinalize {
      get { return triggerCase_ == TriggerOneofCase.PsbtFinalize ? (global::Lnrpc.FundingPsbtFinalize) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.PsbtFinalize;
      }
    }

    private object trigger_;
    /// <summary>Enum of possible cases for the "trigger" oneof.</summary>
    public enum TriggerOneofCase {
      None = 0,
      ShimRegister = 1,
      ShimCancel = 2,
      PsbtVerify = 3,
      PsbtFinalize = 4,
    }
    private TriggerOneofCase triggerCase_ = TriggerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerOneofCase TriggerCase {
      get { return triggerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrigger() {
      triggerCase_ = TriggerOneofCase.None;
      trigger_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingTransitionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingTransitionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShimRegister, other.ShimRegister)) return false;
      if (!object.Equals(ShimCancel, other.ShimCancel)) return false;
      if (!object.Equals(PsbtVerify, other.PsbtVerify)) return false;
      if (!object.Equals(PsbtFinalize, other.PsbtFinalize)) return false;
      if (TriggerCase != other.TriggerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (triggerCase_ == TriggerOneofCase.ShimRegister) hash ^= ShimRegister.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.ShimCancel) hash ^= ShimCancel.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.PsbtVerify) hash ^= PsbtVerify.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.PsbtFinalize) hash ^= PsbtFinalize.GetHashCode();
      hash ^= (int) triggerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (triggerCase_ == TriggerOneofCase.ShimRegister) {
        output.WriteRawTag(10);
        output.WriteMessage(ShimRegister);
      }
      if (triggerCase_ == TriggerOneofCase.ShimCancel) {
        output.WriteRawTag(18);
        output.WriteMessage(ShimCancel);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtVerify) {
        output.WriteRawTag(26);
        output.WriteMessage(PsbtVerify);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtFinalize) {
        output.WriteRawTag(34);
        output.WriteMessage(PsbtFinalize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (triggerCase_ == TriggerOneofCase.ShimRegister) {
        output.WriteRawTag(10);
        output.WriteMessage(ShimRegister);
      }
      if (triggerCase_ == TriggerOneofCase.ShimCancel) {
        output.WriteRawTag(18);
        output.WriteMessage(ShimCancel);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtVerify) {
        output.WriteRawTag(26);
        output.WriteMessage(PsbtVerify);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtFinalize) {
        output.WriteRawTag(34);
        output.WriteMessage(PsbtFinalize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (triggerCase_ == TriggerOneofCase.ShimRegister) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShimRegister);
      }
      if (triggerCase_ == TriggerOneofCase.ShimCancel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShimCancel);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtVerify) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PsbtVerify);
      }
      if (triggerCase_ == TriggerOneofCase.PsbtFinalize) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PsbtFinalize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingTransitionMsg other) {
      if (other == null) {
        return;
      }
      switch (other.TriggerCase) {
        case TriggerOneofCase.ShimRegister:
          if (ShimRegister == null) {
            ShimRegister = new global::Lnrpc.FundingShim();
          }
          ShimRegister.MergeFrom(other.ShimRegister);
          break;
        case TriggerOneofCase.ShimCancel:
          if (ShimCancel == null) {
            ShimCancel = new global::Lnrpc.FundingShimCancel();
          }
          ShimCancel.MergeFrom(other.ShimCancel);
          break;
        case TriggerOneofCase.PsbtVerify:
          if (PsbtVerify == null) {
            PsbtVerify = new global::Lnrpc.FundingPsbtVerify();
          }
          PsbtVerify.MergeFrom(other.PsbtVerify);
          break;
        case TriggerOneofCase.PsbtFinalize:
          if (PsbtFinalize == null) {
            PsbtFinalize = new global::Lnrpc.FundingPsbtFinalize();
          }
          PsbtFinalize.MergeFrom(other.PsbtFinalize);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.FundingShim subBuilder = new global::Lnrpc.FundingShim();
            if (triggerCase_ == TriggerOneofCase.ShimRegister) {
              subBuilder.MergeFrom(ShimRegister);
            }
            input.ReadMessage(subBuilder);
            ShimRegister = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.FundingShimCancel subBuilder = new global::Lnrpc.FundingShimCancel();
            if (triggerCase_ == TriggerOneofCase.ShimCancel) {
              subBuilder.MergeFrom(ShimCancel);
            }
            input.ReadMessage(subBuilder);
            ShimCancel = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.FundingPsbtVerify subBuilder = new global::Lnrpc.FundingPsbtVerify();
            if (triggerCase_ == TriggerOneofCase.PsbtVerify) {
              subBuilder.MergeFrom(PsbtVerify);
            }
            input.ReadMessage(subBuilder);
            PsbtVerify = subBuilder;
            break;
          }
          case 34: {
            global::Lnrpc.FundingPsbtFinalize subBuilder = new global::Lnrpc.FundingPsbtFinalize();
            if (triggerCase_ == TriggerOneofCase.PsbtFinalize) {
              subBuilder.MergeFrom(PsbtFinalize);
            }
            input.ReadMessage(subBuilder);
            PsbtFinalize = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.FundingShim subBuilder = new global::Lnrpc.FundingShim();
            if (triggerCase_ == TriggerOneofCase.ShimRegister) {
              subBuilder.MergeFrom(ShimRegister);
            }
            input.ReadMessage(subBuilder);
            ShimRegister = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.FundingShimCancel subBuilder = new global::Lnrpc.FundingShimCancel();
            if (triggerCase_ == TriggerOneofCase.ShimCancel) {
              subBuilder.MergeFrom(ShimCancel);
            }
            input.ReadMessage(subBuilder);
            ShimCancel = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.FundingPsbtVerify subBuilder = new global::Lnrpc.FundingPsbtVerify();
            if (triggerCase_ == TriggerOneofCase.PsbtVerify) {
              subBuilder.MergeFrom(PsbtVerify);
            }
            input.ReadMessage(subBuilder);
            PsbtVerify = subBuilder;
            break;
          }
          case 34: {
            global::Lnrpc.FundingPsbtFinalize subBuilder = new global::Lnrpc.FundingPsbtFinalize();
            if (triggerCase_ == TriggerOneofCase.PsbtFinalize) {
              subBuilder.MergeFrom(PsbtFinalize);
            }
            input.ReadMessage(subBuilder);
            PsbtFinalize = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FundingStateStepResp : pb::IMessage<FundingStateStepResp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FundingStateStepResp> _parser = new pb::MessageParser<FundingStateStepResp>(() => new FundingStateStepResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingStateStepResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp(FundingStateStepResp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp Clone() {
      return new FundingStateStepResp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingStateStepResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingStateStepResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingStateStepResp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PendingHTLC : pb::IMessage<PendingHTLC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingHTLC> _parser = new pb::MessageParser<PendingHTLC>(() => new PendingHTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingHTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC(PendingHTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      outpoint_ = other.outpoint_;
      maturityHeight_ = other.maturityHeight_;
      blocksTilMaturity_ = other.blocksTilMaturity_;
      stage_ = other.stage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC Clone() {
      return new PendingHTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    /// <summary>
    /// The direction within the channel that the htlc was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The total value of the htlc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 3;
    private string outpoint_ = "";
    /// <summary>
    /// The final output to be swept back to the user's wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturity_height" field.</summary>
    public const int MaturityHeightFieldNumber = 4;
    private uint maturityHeight_;
    /// <summary>
    /// The next block height at which we can spend the current stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaturityHeight {
      get { return maturityHeight_; }
      set {
        maturityHeight_ = value;
      }
    }

    /// <summary>Field number for the "blocks_til_maturity" field.</summary>
    public const int BlocksTilMaturityFieldNumber = 5;
    private int blocksTilMaturity_;
    /// <summary>
    ///
    ///The number of blocks remaining until the current stage can be swept.
    ///Negative values indicate how many blocks have passed since becoming
    ///mature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlocksTilMaturity {
      get { return blocksTilMaturity_; }
      set {
        blocksTilMaturity_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 6;
    private uint stage_;
    /// <summary>
    /// Indicates whether the htlc is in its first or second stage of recovery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingHTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingHTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (Outpoint != other.Outpoint) return false;
      if (MaturityHeight != other.MaturityHeight) return false;
      if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
      if (Stage != other.Stage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Outpoint.Length != 0) hash ^= Outpoint.GetHashCode();
      if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
      if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Outpoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Outpoint);
      }
      if (MaturityHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlocksTilMaturity);
      }
      if (Stage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Outpoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Outpoint);
      }
      if (MaturityHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlocksTilMaturity);
      }
      if (Stage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Outpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Outpoint);
      }
      if (MaturityHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingHTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Outpoint.Length != 0) {
        Outpoint = other.Outpoint;
      }
      if (other.MaturityHeight != 0) {
        MaturityHeight = other.MaturityHeight;
      }
      if (other.BlocksTilMaturity != 0) {
        BlocksTilMaturity = other.BlocksTilMaturity;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Outpoint = input.ReadString();
            break;
          }
          case 32: {
            MaturityHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            BlocksTilMaturity = input.ReadInt32();
            break;
          }
          case 48: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Outpoint = input.ReadString();
            break;
          }
          case 32: {
            MaturityHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            BlocksTilMaturity = input.ReadInt32();
            break;
          }
          case 48: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PendingChannelsRequest : pb::IMessage<PendingChannelsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingChannelsRequest> _parser = new pb::MessageParser<PendingChannelsRequest>(() => new PendingChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest(PendingChannelsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest Clone() {
      return new PendingChannelsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class PendingChannelsResponse : pb::IMessage<PendingChannelsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PendingChannelsResponse> _parser = new pb::MessageParser<PendingChannelsResponse>(() => new PendingChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse(PendingChannelsResponse other) : this() {
      totalLimboBalance_ = other.totalLimboBalance_;
      pendingOpenChannels_ = other.pendingOpenChannels_.Clone();
      pendingClosingChannels_ = other.pendingClosingChannels_.Clone();
      pendingForceClosingChannels_ = other.pendingForceClosingChannels_.Clone();
      waitingCloseChannels_ = other.waitingCloseChannels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse Clone() {
      return new PendingChannelsResponse(this);
    }

    /// <summary>Field number for the "total_limbo_balance" field.</summary>
    public const int TotalLimboBalanceFieldNumber = 1;
    private long totalLimboBalance_;
    /// <summary>
    /// The balance in satoshis encumbered in pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalLimboBalance {
      get { return totalLimboBalance_; }
      set {
        totalLimboBalance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_channels" field.</summary>
    public const int PendingOpenChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> _repeated_pendingOpenChannels_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> pendingOpenChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel>();
    /// <summary>
    /// Channels pending opening
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> PendingOpenChannels {
      get { return pendingOpenChannels_; }
    }

    /// <summary>Field number for the "pending_closing_channels" field.</summary>
    public const int PendingClosingChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> _repeated_pendingClosingChannels_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> pendingClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel>();
    /// <summary>
    ///
    ///Deprecated: Channels pending closing previously contained cooperatively
    ///closed channels with a single confirmation. These channels are now
    ///considered closed from the time we see them on chain.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> PendingClosingChannels {
      get { return pendingClosingChannels_; }
    }

    /// <summary>Field number for the "pending_force_closing_channels" field.</summary>
    public const int PendingForceClosingChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> _repeated_pendingForceClosingChannels_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> pendingForceClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel>();
    /// <summary>
    /// Channels pending force closing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> PendingForceClosingChannels {
      get { return pendingForceClosingChannels_; }
    }

    /// <summary>Field number for the "waiting_close_channels" field.</summary>
    public const int WaitingCloseChannelsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> _repeated_waitingCloseChannels_codec
        = pb::FieldCodec.ForMessage(42, global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> waitingCloseChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel>();
    /// <summary>
    /// Channels waiting for closing tx to confirm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> WaitingCloseChannels {
      get { return waitingCloseChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalLimboBalance != other.TotalLimboBalance) return false;
      if(!pendingOpenChannels_.Equals(other.pendingOpenChannels_)) return false;
      if(!pendingClosingChannels_.Equals(other.pendingClosingChannels_)) return false;
      if(!pendingForceClosingChannels_.Equals(other.pendingForceClosingChannels_)) return false;
      if(!waitingCloseChannels_.Equals(other.waitingCloseChannels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalLimboBalance != 0L) hash ^= TotalLimboBalance.GetHashCode();
      hash ^= pendingOpenChannels_.GetHashCode();
      hash ^= pendingClosingChannels_.GetHashCode();
      hash ^= pendingForceClosingChannels_.GetHashCode();
      hash ^= waitingCloseChannels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalLimboBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalLimboBalance);
      }
      pendingOpenChannels_.WriteTo(output, _repeated_pendingOpenChannels_codec);
      pendingClosingChannels_.WriteTo(output, _repeated_pendingClosingChannels_codec);
      pendingForceClosingChannels_.WriteTo(output, _repeated_pendingForceClosingChannels_codec);
      waitingCloseChannels_.WriteTo(output, _repeated_waitingCloseChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalLimboBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalLimboBalance);
      }
      pendingOpenChannels_.WriteTo(ref output, _repeated_pendingOpenChannels_codec);
      pendingClosingChannels_.WriteTo(ref output, _repeated_pendingClosingChannels_codec);
      pendingForceClosingChannels_.WriteTo(ref output, _repeated_pendingForceClosingChannels_codec);
      waitingCloseChannels_.WriteTo(ref output, _repeated_waitingCloseChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalLimboBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalLimboBalance);
      }
      size += pendingOpenChannels_.CalculateSize(_repeated_pendingOpenChannels_codec);
      size += pendingClosingChannels_.CalculateSize(_repeated_pendingClosingChannels_codec);
      size += pendingForceClosingChannels_.CalculateSize(_repeated_pendingForceClosingChannels_codec);
      size += waitingCloseChannels_.CalculateSize(_repeated_waitingCloseChannels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalLimboBalance != 0L) {
        TotalLimboBalance = other.TotalLimboBalance;
      }
      pendingOpenChannels_.Add(other.pendingOpenChannels_);
      pendingClosingChannels_.Add(other.pendingClosingChannels_);
      pendingForceClosingChannels_.Add(other.pendingForceClosingChannels_);
      waitingCloseChannels_.Add(other.waitingCloseChannels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalLimboBalance = input.ReadInt64();
            break;
          }
          case 18: {
            pendingOpenChannels_.AddEntriesFrom(input, _repeated_pendingOpenChannels_codec);
            break;
          }
          case 26: {
            pendingClosingChannels_.AddEntriesFrom(input, _repeated_pendingClosingChannels_codec);
            break;
          }
          case 34: {
            pendingForceClosingChannels_.AddEntriesFrom(input, _repeated_pendingForceClosingChannels_codec);
            break;
          }
          case 42: {
            waitingCloseChannels_.AddEntriesFrom(input, _repeated_waitingCloseChannels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalLimboBalance = input.ReadInt64();
            break;
          }
          case 18: {
            pendingOpenChannels_.AddEntriesFrom(ref input, _repeated_pendingOpenChannels_codec);
            break;
          }
          case 26: {
            pendingClosingChannels_.AddEntriesFrom(ref input, _repeated_pendingClosingChannels_codec);
            break;
          }
          case 34: {
            pendingForceClosingChannels_.AddEntriesFrom(ref input, _repeated_pendingForceClosingChannels_codec);
            break;
          }
          case 42: {
            waitingCloseChannels_.AddEntriesFrom(ref input, _repeated_waitingCloseChannels_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the PendingChannelsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PendingChannel : pb::IMessage<PendingChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PendingChannel> _parser = new pb::MessageParser<PendingChannel>(() => new PendingChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel(PendingChannel other) : this() {
          remoteNodePub_ = other.remoteNodePub_;
          channelPoint_ = other.channelPoint_;
          capacity_ = other.capacity_;
          localBalance_ = other.localBalance_;
          remoteBalance_ = other.remoteBalance_;
          localChanReserveSat_ = other.localChanReserveSat_;
          remoteChanReserveSat_ = other.remoteChanReserveSat_;
          initiator_ = other.initiator_;
          commitmentType_ = other.commitmentType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel Clone() {
          return new PendingChannel(this);
        }

        /// <summary>Field number for the "remote_node_pub" field.</summary>
        public const int RemoteNodePubFieldNumber = 1;
        private string remoteNodePub_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteNodePub {
          get { return remoteNodePub_; }
          set {
            remoteNodePub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "channel_point" field.</summary>
        public const int ChannelPointFieldNumber = 2;
        private string channelPoint_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChannelPoint {
          get { return channelPoint_; }
          set {
            channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "capacity" field.</summary>
        public const int CapacityFieldNumber = 3;
        private long capacity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Capacity {
          get { return capacity_; }
          set {
            capacity_ = value;
          }
        }

        /// <summary>Field number for the "local_balance" field.</summary>
        public const int LocalBalanceFieldNumber = 4;
        private long localBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LocalBalance {
          get { return localBalance_; }
          set {
            localBalance_ = value;
          }
        }

        /// <summary>Field number for the "remote_balance" field.</summary>
        public const int RemoteBalanceFieldNumber = 5;
        private long remoteBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteBalance {
          get { return remoteBalance_; }
          set {
            remoteBalance_ = value;
          }
        }

        /// <summary>Field number for the "local_chan_reserve_sat" field.</summary>
        public const int LocalChanReserveSatFieldNumber = 6;
        private long localChanReserveSat_;
        /// <summary>
        /// The minimum satoshis this node is required to reserve in its
        /// balance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LocalChanReserveSat {
          get { return localChanReserveSat_; }
          set {
            localChanReserveSat_ = value;
          }
        }

        /// <summary>Field number for the "remote_chan_reserve_sat" field.</summary>
        public const int RemoteChanReserveSatFieldNumber = 7;
        private long remoteChanReserveSat_;
        /// <summary>
        ///
        ///The minimum satoshis the other node is required to reserve in its
        ///balance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteChanReserveSat {
          get { return remoteChanReserveSat_; }
          set {
            remoteChanReserveSat_ = value;
          }
        }

        /// <summary>Field number for the "initiator" field.</summary>
        public const int InitiatorFieldNumber = 8;
        private global::Lnrpc.Initiator initiator_ = global::Lnrpc.Initiator.Unknown;
        /// <summary>
        /// The party that initiated opening the channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.Initiator Initiator {
          get { return initiator_; }
          set {
            initiator_ = value;
          }
        }

        /// <summary>Field number for the "commitment_type" field.</summary>
        public const int CommitmentTypeFieldNumber = 9;
        private global::Lnrpc.CommitmentType commitmentType_ = global::Lnrpc.CommitmentType.Legacy;
        /// <summary>
        /// The commitment type used by this channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.CommitmentType CommitmentType {
          get { return commitmentType_; }
          set {
            commitmentType_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RemoteNodePub != other.RemoteNodePub) return false;
          if (ChannelPoint != other.ChannelPoint) return false;
          if (Capacity != other.Capacity) return false;
          if (LocalBalance != other.LocalBalance) return false;
          if (RemoteBalance != other.RemoteBalance) return false;
          if (LocalChanReserveSat != other.LocalChanReserveSat) return false;
          if (RemoteChanReserveSat != other.RemoteChanReserveSat) return false;
          if (Initiator != other.Initiator) return false;
          if (CommitmentType != other.CommitmentType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RemoteNodePub.Length != 0) hash ^= RemoteNodePub.GetHashCode();
          if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
          if (Capacity != 0L) hash ^= Capacity.GetHashCode();
          if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
          if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
          if (LocalChanReserveSat != 0L) hash ^= LocalChanReserveSat.GetHashCode();
          if (RemoteChanReserveSat != 0L) hash ^= RemoteChanReserveSat.GetHashCode();
          if (Initiator != global::Lnrpc.Initiator.Unknown) hash ^= Initiator.GetHashCode();
          if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) hash ^= CommitmentType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (RemoteNodePub.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChannelPoint);
          }
          if (Capacity != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Capacity);
          }
          if (LocalBalance != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(RemoteBalance);
          }
          if (LocalChanReserveSat != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(LocalChanReserveSat);
          }
          if (RemoteChanReserveSat != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(RemoteChanReserveSat);
          }
          if (Initiator != global::Lnrpc.Initiator.Unknown) {
            output.WriteRawTag(64);
            output.WriteEnum((int) Initiator);
          }
          if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
            output.WriteRawTag(72);
            output.WriteEnum((int) CommitmentType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (RemoteNodePub.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChannelPoint);
          }
          if (Capacity != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Capacity);
          }
          if (LocalBalance != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(RemoteBalance);
          }
          if (LocalChanReserveSat != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(LocalChanReserveSat);
          }
          if (RemoteChanReserveSat != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(RemoteChanReserveSat);
          }
          if (Initiator != global::Lnrpc.Initiator.Unknown) {
            output.WriteRawTag(64);
            output.WriteEnum((int) Initiator);
          }
          if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
            output.WriteRawTag(72);
            output.WriteEnum((int) CommitmentType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RemoteNodePub.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
          }
          if (Capacity != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
          }
          if (LocalBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
          }
          if (LocalChanReserveSat != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalChanReserveSat);
          }
          if (RemoteChanReserveSat != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteChanReserveSat);
          }
          if (Initiator != global::Lnrpc.Initiator.Unknown) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Initiator);
          }
          if (CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommitmentType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingChannel other) {
          if (other == null) {
            return;
          }
          if (other.RemoteNodePub.Length != 0) {
            RemoteNodePub = other.RemoteNodePub;
          }
          if (other.ChannelPoint.Length != 0) {
            ChannelPoint = other.ChannelPoint;
          }
          if (other.Capacity != 0L) {
            Capacity = other.Capacity;
          }
          if (other.LocalBalance != 0L) {
            LocalBalance = other.LocalBalance;
          }
          if (other.RemoteBalance != 0L) {
            RemoteBalance = other.RemoteBalance;
          }
          if (other.LocalChanReserveSat != 0L) {
            LocalChanReserveSat = other.LocalChanReserveSat;
          }
          if (other.RemoteChanReserveSat != 0L) {
            RemoteChanReserveSat = other.RemoteChanReserveSat;
          }
          if (other.Initiator != global::Lnrpc.Initiator.Unknown) {
            Initiator = other.Initiator;
          }
          if (other.CommitmentType != global::Lnrpc.CommitmentType.Legacy) {
            CommitmentType = other.CommitmentType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RemoteNodePub = input.ReadString();
                break;
              }
              case 18: {
                ChannelPoint = input.ReadString();
                break;
              }
              case 24: {
                Capacity = input.ReadInt64();
                break;
              }
              case 32: {
                LocalBalance = input.ReadInt64();
                break;
              }
              case 40: {
                RemoteBalance = input.ReadInt64();
                break;
              }
              case 48: {
                LocalChanReserveSat = input.ReadInt64();
                break;
              }
              case 56: {
                RemoteChanReserveSat = input.ReadInt64();
                break;
              }
              case 64: {
                Initiator = (global::Lnrpc.Initiator) input.ReadEnum();
                break;
              }
              case 72: {
                CommitmentType = (global::Lnrpc.CommitmentType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                RemoteNodePub = input.ReadString();
                break;
              }
              case 18: {
                ChannelPoint = input.ReadString();
                break;
              }
              case 24: {
                Capacity = input.ReadInt64();
                break;
              }
              case 32: {
                LocalBalance = input.ReadInt64();
                break;
              }
              case 40: {
                RemoteBalance = input.ReadInt64();
                break;
              }
              case 48: {
                LocalChanReserveSat = input.ReadInt64();
                break;
              }
              case 56: {
                RemoteChanReserveSat = input.ReadInt64();
                break;
              }
              case 64: {
                Initiator = (global::Lnrpc.Initiator) input.ReadEnum();
                break;
              }
              case 72: {
                CommitmentType = (global::Lnrpc.CommitmentType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class PendingOpenChannel : pb::IMessage<PendingOpenChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<PendingOpenChannel> _parser = new pb::MessageParser<PendingOpenChannel>(() => new PendingOpenChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingOpenChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel(PendingOpenChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          confirmationHeight_ = other.confirmationHeight_;
          commitFee_ = other.commitFee_;
          commitWeight_ = other.commitWeight_;
          feePerKw_ = other.feePerKw_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel Clone() {
          return new PendingOpenChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        /// The pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "confirmation_height" field.</summary>
        public const int ConfirmationHeightFieldNumber = 2;
        private uint confirmationHeight_;
        /// <summary>
        /// The height at which this channel will be confirmed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ConfirmationHeight {
          get { return confirmationHeight_; }
          set {
            confirmationHeight_ = value;
          }
        }

        /// <summary>Field number for the "commit_fee" field.</summary>
        public const int CommitFeeFieldNumber = 4;
        private long commitFee_;
        /// <summary>
        ///
        ///The amount calculated to be paid in fees for the current set of
        ///commitment transactions. The fee amount is persisted with the channel
        ///in order to allow the fee amount to be removed and recalculated with
        ///each channel state update, including updates that happen after a system
        ///restart.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitFee {
          get { return commitFee_; }
          set {
            commitFee_ = value;
          }
        }

        /// <summary>Field number for the "commit_weight" field.</summary>
        public const int CommitWeightFieldNumber = 5;
        private long commitWeight_;
        /// <summary>
        /// The weight of the commitment transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitWeight {
          get { return commitWeight_; }
          set {
            commitWeight_ = value;
          }
        }

        /// <summary>Field number for the "fee_per_kw" field.</summary>
        public const int FeePerKwFieldNumber = 6;
        private long feePerKw_;
        /// <summary>
        ///
        ///The required number of satoshis per kilo-weight that the requester will
        ///pay at all times, for both the funding transaction and commitment
        ///transaction. This value can later be updated once the channel is open.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FeePerKw {
          get { return feePerKw_; }
          set {
            feePerKw_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingOpenChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingOpenChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ConfirmationHeight != other.ConfirmationHeight) return false;
          if (CommitFee != other.CommitFee) return false;
          if (CommitWeight != other.CommitWeight) return false;
          if (FeePerKw != other.FeePerKw) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ConfirmationHeight != 0) hash ^= ConfirmationHeight.GetHashCode();
          if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
          if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
          if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ConfirmationHeight != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(CommitFee);
          }
          if (CommitWeight != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(CommitWeight);
          }
          if (FeePerKw != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FeePerKw);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ConfirmationHeight != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(CommitFee);
          }
          if (CommitWeight != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(CommitWeight);
          }
          if (FeePerKw != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FeePerKw);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ConfirmationHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
          }
          if (CommitWeight != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
          }
          if (FeePerKw != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingOpenChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ConfirmationHeight != 0) {
            ConfirmationHeight = other.ConfirmationHeight;
          }
          if (other.CommitFee != 0L) {
            CommitFee = other.CommitFee;
          }
          if (other.CommitWeight != 0L) {
            CommitWeight = other.CommitWeight;
          }
          if (other.FeePerKw != 0L) {
            FeePerKw = other.FeePerKw;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                ConfirmationHeight = input.ReadUInt32();
                break;
              }
              case 32: {
                CommitFee = input.ReadInt64();
                break;
              }
              case 40: {
                CommitWeight = input.ReadInt64();
                break;
              }
              case 48: {
                FeePerKw = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                ConfirmationHeight = input.ReadUInt32();
                break;
              }
              case 32: {
                CommitFee = input.ReadInt64();
                break;
              }
              case 40: {
                CommitWeight = input.ReadInt64();
                break;
              }
              case 48: {
                FeePerKw = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class WaitingCloseChannel : pb::IMessage<WaitingCloseChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<WaitingCloseChannel> _parser = new pb::MessageParser<WaitingCloseChannel>(() => new WaitingCloseChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WaitingCloseChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel(WaitingCloseChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          limboBalance_ = other.limboBalance_;
          commitments_ = other.commitments_ != null ? other.commitments_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel Clone() {
          return new WaitingCloseChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        /// The pending channel waiting for closing tx to confirm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "limbo_balance" field.</summary>
        public const int LimboBalanceFieldNumber = 2;
        private long limboBalance_;
        /// <summary>
        /// The balance in satoshis encumbered in this channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LimboBalance {
          get { return limboBalance_; }
          set {
            limboBalance_ = value;
          }
        }

        /// <summary>Field number for the "commitments" field.</summary>
        public const int CommitmentsFieldNumber = 3;
        private global::Lnrpc.PendingChannelsResponse.Types.Commitments commitments_;
        /// <summary>
        ///
        ///A list of valid commitment transactions. Any of these can confirm at
        ///this point.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.Commitments Commitments {
          get { return commitments_; }
          set {
            commitments_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WaitingCloseChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WaitingCloseChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (LimboBalance != other.LimboBalance) return false;
          if (!object.Equals(Commitments, other.Commitments)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (LimboBalance != 0L) hash ^= LimboBalance.GetHashCode();
          if (commitments_ != null) hash ^= Commitments.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(LimboBalance);
          }
          if (commitments_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Commitments);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(LimboBalance);
          }
          if (commitments_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Commitments);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (LimboBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimboBalance);
          }
          if (commitments_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Commitments);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WaitingCloseChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.LimboBalance != 0L) {
            LimboBalance = other.LimboBalance;
          }
          if (other.commitments_ != null) {
            if (commitments_ == null) {
              Commitments = new global::Lnrpc.PendingChannelsResponse.Types.Commitments();
            }
            Commitments.MergeFrom(other.Commitments);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 26: {
                if (commitments_ == null) {
                  Commitments = new global::Lnrpc.PendingChannelsResponse.Types.Commitments();
                }
                input.ReadMessage(Commitments);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 26: {
                if (commitments_ == null) {
                  Commitments = new global::Lnrpc.PendingChannelsResponse.Types.Commitments();
                }
                input.ReadMessage(Commitments);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Commitments : pb::IMessage<Commitments>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Commitments> _parser = new pb::MessageParser<Commitments>(() => new Commitments());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Commitments> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commitments() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commitments(Commitments other) : this() {
          localTxid_ = other.localTxid_;
          remoteTxid_ = other.remoteTxid_;
          remotePendingTxid_ = other.remotePendingTxid_;
          localCommitFeeSat_ = other.localCommitFeeSat_;
          remoteCommitFeeSat_ = other.remoteCommitFeeSat_;
          remotePendingCommitFeeSat_ = other.remotePendingCommitFeeSat_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Commitments Clone() {
          return new Commitments(this);
        }

        /// <summary>Field number for the "local_txid" field.</summary>
        public const int LocalTxidFieldNumber = 1;
        private string localTxid_ = "";
        /// <summary>
        /// Hash of the local version of the commitment tx.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string LocalTxid {
          get { return localTxid_; }
          set {
            localTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "remote_txid" field.</summary>
        public const int RemoteTxidFieldNumber = 2;
        private string remoteTxid_ = "";
        /// <summary>
        /// Hash of the remote version of the commitment tx.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteTxid {
          get { return remoteTxid_; }
          set {
            remoteTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "remote_pending_txid" field.</summary>
        public const int RemotePendingTxidFieldNumber = 3;
        private string remotePendingTxid_ = "";
        /// <summary>
        /// Hash of the remote pending version of the commitment tx.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemotePendingTxid {
          get { return remotePendingTxid_; }
          set {
            remotePendingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "local_commit_fee_sat" field.</summary>
        public const int LocalCommitFeeSatFieldNumber = 4;
        private ulong localCommitFeeSat_;
        /// <summary>
        ///
        ///The amount in satoshis calculated to be paid in fees for the local
        ///commitment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong LocalCommitFeeSat {
          get { return localCommitFeeSat_; }
          set {
            localCommitFeeSat_ = value;
          }
        }

        /// <summary>Field number for the "remote_commit_fee_sat" field.</summary>
        public const int RemoteCommitFeeSatFieldNumber = 5;
        private ulong remoteCommitFeeSat_;
        /// <summary>
        ///
        ///The amount in satoshis calculated to be paid in fees for the remote
        ///commitment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RemoteCommitFeeSat {
          get { return remoteCommitFeeSat_; }
          set {
            remoteCommitFeeSat_ = value;
          }
        }

        /// <summary>Field number for the "remote_pending_commit_fee_sat" field.</summary>
        public const int RemotePendingCommitFeeSatFieldNumber = 6;
        private ulong remotePendingCommitFeeSat_;
        /// <summary>
        ///
        ///The amount in satoshis calculated to be paid in fees for the remote
        ///pending commitment.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong RemotePendingCommitFeeSat {
          get { return remotePendingCommitFeeSat_; }
          set {
            remotePendingCommitFeeSat_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Commitments);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Commitments other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (LocalTxid != other.LocalTxid) return false;
          if (RemoteTxid != other.RemoteTxid) return false;
          if (RemotePendingTxid != other.RemotePendingTxid) return false;
          if (LocalCommitFeeSat != other.LocalCommitFeeSat) return false;
          if (RemoteCommitFeeSat != other.RemoteCommitFeeSat) return false;
          if (RemotePendingCommitFeeSat != other.RemotePendingCommitFeeSat) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (LocalTxid.Length != 0) hash ^= LocalTxid.GetHashCode();
          if (RemoteTxid.Length != 0) hash ^= RemoteTxid.GetHashCode();
          if (RemotePendingTxid.Length != 0) hash ^= RemotePendingTxid.GetHashCode();
          if (LocalCommitFeeSat != 0UL) hash ^= LocalCommitFeeSat.GetHashCode();
          if (RemoteCommitFeeSat != 0UL) hash ^= RemoteCommitFeeSat.GetHashCode();
          if (RemotePendingCommitFeeSat != 0UL) hash ^= RemotePendingCommitFeeSat.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (LocalTxid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LocalTxid);
          }
          if (RemoteTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RemoteTxid);
          }
          if (RemotePendingTxid.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RemotePendingTxid);
          }
          if (LocalCommitFeeSat != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(LocalCommitFeeSat);
          }
          if (RemoteCommitFeeSat != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(RemoteCommitFeeSat);
          }
          if (RemotePendingCommitFeeSat != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(RemotePendingCommitFeeSat);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (LocalTxid.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(LocalTxid);
          }
          if (RemoteTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(RemoteTxid);
          }
          if (RemotePendingTxid.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(RemotePendingTxid);
          }
          if (LocalCommitFeeSat != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(LocalCommitFeeSat);
          }
          if (RemoteCommitFeeSat != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(RemoteCommitFeeSat);
          }
          if (RemotePendingCommitFeeSat != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(RemotePendingCommitFeeSat);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (LocalTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(LocalTxid);
          }
          if (RemoteTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteTxid);
          }
          if (RemotePendingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePendingTxid);
          }
          if (LocalCommitFeeSat != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LocalCommitFeeSat);
          }
          if (RemoteCommitFeeSat != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemoteCommitFeeSat);
          }
          if (RemotePendingCommitFeeSat != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RemotePendingCommitFeeSat);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Commitments other) {
          if (other == null) {
            return;
          }
          if (other.LocalTxid.Length != 0) {
            LocalTxid = other.LocalTxid;
          }
          if (other.RemoteTxid.Length != 0) {
            RemoteTxid = other.RemoteTxid;
          }
          if (other.RemotePendingTxid.Length != 0) {
            RemotePendingTxid = other.RemotePendingTxid;
          }
          if (other.LocalCommitFeeSat != 0UL) {
            LocalCommitFeeSat = other.LocalCommitFeeSat;
          }
          if (other.RemoteCommitFeeSat != 0UL) {
            RemoteCommitFeeSat = other.RemoteCommitFeeSat;
          }
          if (other.RemotePendingCommitFeeSat != 0UL) {
            RemotePendingCommitFeeSat = other.RemotePendingCommitFeeSat;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                LocalTxid = input.ReadString();
                break;
              }
              case 18: {
                RemoteTxid = input.ReadString();
                break;
              }
              case 26: {
                RemotePendingTxid = input.ReadString();
                break;
              }
              case 32: {
                LocalCommitFeeSat = input.ReadUInt64();
                break;
              }
              case 40: {
                RemoteCommitFeeSat = input.ReadUInt64();
                break;
              }
              case 48: {
                RemotePendingCommitFeeSat = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                LocalTxid = input.ReadString();
                break;
              }
              case 18: {
                RemoteTxid = input.ReadString();
                break;
              }
              case 26: {
                RemotePendingTxid = input.ReadString();
                break;
              }
              case 32: {
                LocalCommitFeeSat = input.ReadUInt64();
                break;
              }
              case 40: {
                RemoteCommitFeeSat = input.ReadUInt64();
                break;
              }
              case 48: {
                RemotePendingCommitFeeSat = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ClosedChannel : pb::IMessage<ClosedChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ClosedChannel> _parser = new pb::MessageParser<ClosedChannel>(() => new ClosedChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel(ClosedChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          closingTxid_ = other.closingTxid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel Clone() {
          return new ClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        /// The pending channel to be closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        /// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class ForceClosedChannel : pb::IMessage<ForceClosedChannel>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ForceClosedChannel> _parser = new pb::MessageParser<ForceClosedChannel>(() => new ForceClosedChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ForceClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel(ForceClosedChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          closingTxid_ = other.closingTxid_;
          limboBalance_ = other.limboBalance_;
          maturityHeight_ = other.maturityHeight_;
          blocksTilMaturity_ = other.blocksTilMaturity_;
          recoveredBalance_ = other.recoveredBalance_;
          pendingHtlcs_ = other.pendingHtlcs_.Clone();
          anchor_ = other.anchor_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel Clone() {
          return new ForceClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        /// The pending channel to be force closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        /// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "limbo_balance" field.</summary>
        public const int LimboBalanceFieldNumber = 3;
        private long limboBalance_;
        /// <summary>
        /// The balance in satoshis encumbered in this pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LimboBalance {
          get { return limboBalance_; }
          set {
            limboBalance_ = value;
          }
        }

        /// <summary>Field number for the "maturity_height" field.</summary>
        public const int MaturityHeightFieldNumber = 4;
        private uint maturityHeight_;
        /// <summary>
        /// The height at which funds can be swept into the wallet
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaturityHeight {
          get { return maturityHeight_; }
          set {
            maturityHeight_ = value;
          }
        }

        /// <summary>Field number for the "blocks_til_maturity" field.</summary>
        public const int BlocksTilMaturityFieldNumber = 5;
        private int blocksTilMaturity_;
        /// <summary>
        ///
        ///Remaining # of blocks until the commitment output can be swept.
        ///Negative values indicate how many blocks have passed since becoming
        ///mature.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlocksTilMaturity {
          get { return blocksTilMaturity_; }
          set {
            blocksTilMaturity_ = value;
          }
        }

        /// <summary>Field number for the "recovered_balance" field.</summary>
        public const int RecoveredBalanceFieldNumber = 6;
        private long recoveredBalance_;
        /// <summary>
        /// The total value of funds successfully recovered from this channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RecoveredBalance {
          get { return recoveredBalance_; }
          set {
            recoveredBalance_ = value;
          }
        }

        /// <summary>Field number for the "pending_htlcs" field.</summary>
        public const int PendingHtlcsFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Lnrpc.PendingHTLC> _repeated_pendingHtlcs_codec
            = pb::FieldCodec.ForMessage(66, global::Lnrpc.PendingHTLC.Parser);
        private readonly pbc::RepeatedField<global::Lnrpc.PendingHTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.PendingHTLC>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Lnrpc.PendingHTLC> PendingHtlcs {
          get { return pendingHtlcs_; }
        }

        /// <summary>Field number for the "anchor" field.</summary>
        public const int AnchorFieldNumber = 9;
        private global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState anchor_ = global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState Anchor {
          get { return anchor_; }
          set {
            anchor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ForceClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ForceClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          if (LimboBalance != other.LimboBalance) return false;
          if (MaturityHeight != other.MaturityHeight) return false;
          if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
          if (RecoveredBalance != other.RecoveredBalance) return false;
          if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
          if (Anchor != other.Anchor) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          if (LimboBalance != 0L) hash ^= LimboBalance.GetHashCode();
          if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
          if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
          if (RecoveredBalance != 0L) hash ^= RecoveredBalance.GetHashCode();
          hash ^= pendingHtlcs_.GetHashCode();
          if (Anchor != global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo) hash ^= Anchor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LimboBalance);
          }
          if (MaturityHeight != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RecoveredBalance);
          }
          pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
          if (Anchor != global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo) {
            output.WriteRawTag(72);
            output.WriteEnum((int) Anchor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LimboBalance);
          }
          if (MaturityHeight != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RecoveredBalance);
          }
          pendingHtlcs_.WriteTo(ref output, _repeated_pendingHtlcs_codec);
          if (Anchor != global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo) {
            output.WriteRawTag(72);
            output.WriteEnum((int) Anchor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimboBalance);
          }
          if (MaturityHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveredBalance);
          }
          size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
          if (Anchor != global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Anchor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ForceClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
          if (other.LimboBalance != 0L) {
            LimboBalance = other.LimboBalance;
          }
          if (other.MaturityHeight != 0) {
            MaturityHeight = other.MaturityHeight;
          }
          if (other.BlocksTilMaturity != 0) {
            BlocksTilMaturity = other.BlocksTilMaturity;
          }
          if (other.RecoveredBalance != 0L) {
            RecoveredBalance = other.RecoveredBalance;
          }
          pendingHtlcs_.Add(other.pendingHtlcs_);
          if (other.Anchor != global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState.Limbo) {
            Anchor = other.Anchor;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
              case 24: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 32: {
                MaturityHeight = input.ReadUInt32();
                break;
              }
              case 40: {
                BlocksTilMaturity = input.ReadInt32();
                break;
              }
              case 48: {
                RecoveredBalance = input.ReadInt64();
                break;
              }
              case 66: {
                pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
                break;
              }
              case 72: {
                Anchor = (global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
              case 24: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 32: {
                MaturityHeight = input.ReadUInt32();
                break;
              }
              case 40: {
                BlocksTilMaturity = input.ReadInt32();
                break;
              }
              case 48: {
                RecoveredBalance = input.ReadInt64();
                break;
              }
              case 66: {
                pendingHtlcs_.AddEntriesFrom(ref input, _repeated_pendingHtlcs_codec);
                break;
              }
              case 72: {
                Anchor = (global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Types.AnchorState) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the ForceClosedChannel message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public enum AnchorState {
            [pbr::OriginalName("LIMBO")] Limbo = 0,
            [pbr::OriginalName("RECOVERED")] Recovered = 1,
            [pbr::OriginalName("LOST")] Lost = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class ChannelEventSubscription : pb::IMessage<ChannelEventSubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelEventSubscription> _parser = new pb::MessageParser<ChannelEventSubscription>(() => new ChannelEventSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEventSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription(ChannelEventSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription Clone() {
      return new ChannelEventSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEventSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEventSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEventSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelEventUpdate : pb::IMessage<ChannelEventUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelEventUpdate> _parser = new pb::MessageParser<ChannelEventUpdate>(() => new ChannelEventUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEventUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate(ChannelEventUpdate other) : this() {
      type_ = other.type_;
      switch (other.ChannelCase) {
        case ChannelOneofCase.OpenChannel:
          OpenChannel = other.OpenChannel.Clone();
          break;
        case ChannelOneofCase.ClosedChannel:
          ClosedChannel = other.ClosedChannel.Clone();
          break;
        case ChannelOneofCase.ActiveChannel:
          ActiveChannel = other.ActiveChannel.Clone();
          break;
        case ChannelOneofCase.InactiveChannel:
          InactiveChannel = other.InactiveChannel.Clone();
          break;
        case ChannelOneofCase.PendingOpenChannel:
          PendingOpenChannel = other.PendingOpenChannel.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate Clone() {
      return new ChannelEventUpdate(this);
    }

    /// <summary>Field number for the "open_channel" field.</summary>
    public const int OpenChannelFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Channel OpenChannel {
      get { return channelCase_ == ChannelOneofCase.OpenChannel ? (global::Lnrpc.Channel) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.OpenChannel;
      }
    }

    /// <summary>Field number for the "closed_channel" field.</summary>
    public const int ClosedChannelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseSummary ClosedChannel {
      get { return channelCase_ == ChannelOneofCase.ClosedChannel ? (global::Lnrpc.ChannelCloseSummary) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.ClosedChannel;
      }
    }

    /// <summary>Field number for the "active_channel" field.</summary>
    public const int ActiveChannelFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ActiveChannel {
      get { return channelCase_ == ChannelOneofCase.ActiveChannel ? (global::Lnrpc.ChannelPoint) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.ActiveChannel;
      }
    }

    /// <summary>Field number for the "inactive_channel" field.</summary>
    public const int InactiveChannelFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint InactiveChannel {
      get { return channelCase_ == ChannelOneofCase.InactiveChannel ? (global::Lnrpc.ChannelPoint) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.InactiveChannel;
      }
    }

    /// <summary>Field number for the "pending_open_channel" field.</summary>
    public const int PendingOpenChannelFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate PendingOpenChannel {
      get { return channelCase_ == ChannelOneofCase.PendingOpenChannel ? (global::Lnrpc.PendingUpdate) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.PendingOpenChannel;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Lnrpc.ChannelEventUpdate.Types.UpdateType type_ = global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelEventUpdate.Types.UpdateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private object channel_;
    /// <summary>Enum of possible cases for the "channel" oneof.</summary>
    public enum ChannelOneofCase {
      None = 0,
      OpenChannel = 1,
      ClosedChannel = 2,
      ActiveChannel = 3,
      InactiveChannel = 4,
      PendingOpenChannel = 6,
    }
    private ChannelOneofCase channelCase_ = ChannelOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOneofCase ChannelCase {
      get { return channelCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannel() {
      channelCase_ = ChannelOneofCase.None;
      channel_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEventUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEventUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OpenChannel, other.OpenChannel)) return false;
      if (!object.Equals(ClosedChannel, other.ClosedChannel)) return false;
      if (!object.Equals(ActiveChannel, other.ActiveChannel)) return false;
      if (!object.Equals(InactiveChannel, other.InactiveChannel)) return false;
      if (!object.Equals(PendingOpenChannel, other.PendingOpenChannel)) return false;
      if (Type != other.Type) return false;
      if (ChannelCase != other.ChannelCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelCase_ == ChannelOneofCase.OpenChannel) hash ^= OpenChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.ClosedChannel) hash ^= ClosedChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.ActiveChannel) hash ^= ActiveChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.InactiveChannel) hash ^= InactiveChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.PendingOpenChannel) hash ^= PendingOpenChannel.GetHashCode();
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) hash ^= Type.GetHashCode();
      hash ^= (int) channelCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (channelCase_ == ChannelOneofCase.OpenChannel) {
        output.WriteRawTag(10);
        output.WriteMessage(OpenChannel);
      }
      if (channelCase_ == ChannelOneofCase.ClosedChannel) {
        output.WriteRawTag(18);
        output.WriteMessage(ClosedChannel);
      }
      if (channelCase_ == ChannelOneofCase.ActiveChannel) {
        output.WriteRawTag(26);
        output.WriteMessage(ActiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.InactiveChannel) {
        output.WriteRawTag(34);
        output.WriteMessage(InactiveChannel);
      }
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (channelCase_ == ChannelOneofCase.PendingOpenChannel) {
        output.WriteRawTag(50);
        output.WriteMessage(PendingOpenChannel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (channelCase_ == ChannelOneofCase.OpenChannel) {
        output.WriteRawTag(10);
        output.WriteMessage(OpenChannel);
      }
      if (channelCase_ == ChannelOneofCase.ClosedChannel) {
        output.WriteRawTag(18);
        output.WriteMessage(ClosedChannel);
      }
      if (channelCase_ == ChannelOneofCase.ActiveChannel) {
        output.WriteRawTag(26);
        output.WriteMessage(ActiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.InactiveChannel) {
        output.WriteRawTag(34);
        output.WriteMessage(InactiveChannel);
      }
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (channelCase_ == ChannelOneofCase.PendingOpenChannel) {
        output.WriteRawTag(50);
        output.WriteMessage(PendingOpenChannel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelCase_ == ChannelOneofCase.OpenChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenChannel);
      }
      if (channelCase_ == ChannelOneofCase.ClosedChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosedChannel);
      }
      if (channelCase_ == ChannelOneofCase.ActiveChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.InactiveChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InactiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.PendingOpenChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingOpenChannel);
      }
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEventUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        Type = other.Type;
      }
      switch (other.ChannelCase) {
        case ChannelOneofCase.OpenChannel:
          if (OpenChannel == null) {
            OpenChannel = new global::Lnrpc.Channel();
          }
          OpenChannel.MergeFrom(other.OpenChannel);
          break;
        case ChannelOneofCase.ClosedChannel:
          if (ClosedChannel == null) {
            ClosedChannel = new global::Lnrpc.ChannelCloseSummary();
          }
          ClosedChannel.MergeFrom(other.ClosedChannel);
          break;
        case ChannelOneofCase.ActiveChannel:
          if (ActiveChannel == null) {
            ActiveChannel = new global::Lnrpc.ChannelPoint();
          }
          ActiveChannel.MergeFrom(other.ActiveChannel);
          break;
        case ChannelOneofCase.InactiveChannel:
          if (InactiveChannel == null) {
            InactiveChannel = new global::Lnrpc.ChannelPoint();
          }
          InactiveChannel.MergeFrom(other.InactiveChannel);
          break;
        case ChannelOneofCase.PendingOpenChannel:
          if (PendingOpenChannel == null) {
            PendingOpenChannel = new global::Lnrpc.PendingUpdate();
          }
          PendingOpenChannel.MergeFrom(other.PendingOpenChannel);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.Channel subBuilder = new global::Lnrpc.Channel();
            if (channelCase_ == ChannelOneofCase.OpenChannel) {
              subBuilder.MergeFrom(OpenChannel);
            }
            input.ReadMessage(subBuilder);
            OpenChannel = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.ChannelCloseSummary subBuilder = new global::Lnrpc.ChannelCloseSummary();
            if (channelCase_ == ChannelOneofCase.ClosedChannel) {
              subBuilder.MergeFrom(ClosedChannel);
            }
            input.ReadMessage(subBuilder);
            ClosedChannel = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.ActiveChannel) {
              subBuilder.MergeFrom(ActiveChannel);
            }
            input.ReadMessage(subBuilder);
            ActiveChannel = subBuilder;
            break;
          }
          case 34: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.InactiveChannel) {
              subBuilder.MergeFrom(InactiveChannel);
            }
            input.ReadMessage(subBuilder);
            InactiveChannel = subBuilder;
            break;
          }
          case 40: {
            Type = (global::Lnrpc.ChannelEventUpdate.Types.UpdateType) input.ReadEnum();
            break;
          }
          case 50: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (channelCase_ == ChannelOneofCase.PendingOpenChannel) {
              subBuilder.MergeFrom(PendingOpenChannel);
            }
            input.ReadMessage(subBuilder);
            PendingOpenChannel = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.Channel subBuilder = new global::Lnrpc.Channel();
            if (channelCase_ == ChannelOneofCase.OpenChannel) {
              subBuilder.MergeFrom(OpenChannel);
            }
            input.ReadMessage(subBuilder);
            OpenChannel = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.ChannelCloseSummary subBuilder = new global::Lnrpc.ChannelCloseSummary();
            if (channelCase_ == ChannelOneofCase.ClosedChannel) {
              subBuilder.MergeFrom(ClosedChannel);
            }
            input.ReadMessage(subBuilder);
            ClosedChannel = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.ActiveChannel) {
              subBuilder.MergeFrom(ActiveChannel);
            }
            input.ReadMessage(subBuilder);
            ActiveChannel = subBuilder;
            break;
          }
          case 34: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.InactiveChannel) {
              subBuilder.MergeFrom(InactiveChannel);
            }
            input.ReadMessage(subBuilder);
            InactiveChannel = subBuilder;
            break;
          }
          case 40: {
            Type = (global::Lnrpc.ChannelEventUpdate.Types.UpdateType) input.ReadEnum();
            break;
          }
          case 50: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (channelCase_ == ChannelOneofCase.PendingOpenChannel) {
              subBuilder.MergeFrom(PendingOpenChannel);
            }
            input.ReadMessage(subBuilder);
            PendingOpenChannel = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelEventUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UpdateType {
        [pbr::OriginalName("OPEN_CHANNEL")] OpenChannel = 0,
        [pbr::OriginalName("CLOSED_CHANNEL")] ClosedChannel = 1,
        [pbr::OriginalName("ACTIVE_CHANNEL")] ActiveChannel = 2,
        [pbr::OriginalName("INACTIVE_CHANNEL")] InactiveChannel = 3,
        [pbr::OriginalName("PENDING_OPEN_CHANNEL")] PendingOpenChannel = 4,
      }

    }
    #endregion

  }

  public sealed partial class WalletAccountBalance : pb::IMessage<WalletAccountBalance>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WalletAccountBalance> _parser = new pb::MessageParser<WalletAccountBalance>(() => new WalletAccountBalance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletAccountBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAccountBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAccountBalance(WalletAccountBalance other) : this() {
      confirmedBalance_ = other.confirmedBalance_;
      unconfirmedBalance_ = other.unconfirmedBalance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletAccountBalance Clone() {
      return new WalletAccountBalance(this);
    }

    /// <summary>Field number for the "confirmed_balance" field.</summary>
    public const int ConfirmedBalanceFieldNumber = 1;
    private long confirmedBalance_;
    /// <summary>
    /// The confirmed balance of the account (with >= 1 confirmations).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedBalance {
      get { return confirmedBalance_; }
      set {
        confirmedBalance_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmed_balance" field.</summary>
    public const int UnconfirmedBalanceFieldNumber = 2;
    private long unconfirmedBalance_;
    /// <summary>
    /// The unconfirmed balance of the account (with 0 confirmations).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnconfirmedBalance {
      get { return unconfirmedBalance_; }
      set {
        unconfirmedBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletAccountBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletAccountBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ConfirmedBalance != other.ConfirmedBalance) return false;
      if (UnconfirmedBalance != other.UnconfirmedBalance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ConfirmedBalance != 0L) hash ^= ConfirmedBalance.GetHashCode();
      if (UnconfirmedBalance != 0L) hash ^= UnconfirmedBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnconfirmedBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnconfirmedBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ConfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletAccountBalance other) {
      if (other == null) {
        return;
      }
      if (other.ConfirmedBalance != 0L) {
        ConfirmedBalance = other.ConfirmedBalance;
      }
      if (other.UnconfirmedBalance != 0L) {
        UnconfirmedBalance = other.UnconfirmedBalance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 16: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 16: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WalletBalanceRequest : pb::IMessage<WalletBalanceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WalletBalanceRequest> _parser = new pb::MessageParser<WalletBalanceRequest>(() => new WalletBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest(WalletBalanceRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest Clone() {
      return new WalletBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class WalletBalanceResponse : pb::IMessage<WalletBalanceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WalletBalanceResponse> _parser = new pb::MessageParser<WalletBalanceResponse>(() => new WalletBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse(WalletBalanceResponse other) : this() {
      totalBalance_ = other.totalBalance_;
      confirmedBalance_ = other.confirmedBalance_;
      unconfirmedBalance_ = other.unconfirmedBalance_;
      accountBalance_ = other.accountBalance_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse Clone() {
      return new WalletBalanceResponse(this);
    }

    /// <summary>Field number for the "total_balance" field.</summary>
    public const int TotalBalanceFieldNumber = 1;
    private long totalBalance_;
    /// <summary>
    /// The balance of the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_balance" field.</summary>
    public const int ConfirmedBalanceFieldNumber = 2;
    private long confirmedBalance_;
    /// <summary>
    /// The confirmed balance of a wallet(with >= 1 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedBalance {
      get { return confirmedBalance_; }
      set {
        confirmedBalance_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmed_balance" field.</summary>
    public const int UnconfirmedBalanceFieldNumber = 3;
    private long unconfirmedBalance_;
    /// <summary>
    /// The unconfirmed balance of a wallet(with 0 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnconfirmedBalance {
      get { return unconfirmedBalance_; }
      set {
        unconfirmedBalance_ = value;
      }
    }

    /// <summary>Field number for the "account_balance" field.</summary>
    public const int AccountBalanceFieldNumber = 4;
    private static readonly pbc::MapField<string, global::Lnrpc.WalletAccountBalance>.Codec _map_accountBalance_codec
        = new pbc::MapField<string, global::Lnrpc.WalletAccountBalance>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Lnrpc.WalletAccountBalance.Parser), 34);
    private readonly pbc::MapField<string, global::Lnrpc.WalletAccountBalance> accountBalance_ = new pbc::MapField<string, global::Lnrpc.WalletAccountBalance>();
    /// <summary>
    /// A mapping of each wallet account's name to its balance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Lnrpc.WalletAccountBalance> AccountBalance {
      get { return accountBalance_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalBalance != other.TotalBalance) return false;
      if (ConfirmedBalance != other.ConfirmedBalance) return false;
      if (UnconfirmedBalance != other.UnconfirmedBalance) return false;
      if (!AccountBalance.Equals(other.AccountBalance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      if (ConfirmedBalance != 0L) hash ^= ConfirmedBalance.GetHashCode();
      if (UnconfirmedBalance != 0L) hash ^= UnconfirmedBalance.GetHashCode();
      hash ^= AccountBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UnconfirmedBalance);
      }
      accountBalance_.WriteTo(output, _map_accountBalance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UnconfirmedBalance);
      }
      accountBalance_.WriteTo(ref output, _map_accountBalance_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedBalance);
      }
      size += accountBalance_.CalculateSize(_map_accountBalance_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
      if (other.ConfirmedBalance != 0L) {
        ConfirmedBalance = other.ConfirmedBalance;
      }
      if (other.UnconfirmedBalance != 0L) {
        UnconfirmedBalance = other.UnconfirmedBalance;
      }
      accountBalance_.Add(other.accountBalance_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 16: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 24: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
          case 34: {
            accountBalance_.AddEntriesFrom(input, _map_accountBalance_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 16: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 24: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
          case 34: {
            accountBalance_.AddEntriesFrom(ref input, _map_accountBalance_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Amount : pb::IMessage<Amount>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Amount> _parser = new pb::MessageParser<Amount>(() => new Amount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Amount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Amount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Amount(Amount other) : this() {
      sat_ = other.sat_;
      msat_ = other.msat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Amount Clone() {
      return new Amount(this);
    }

    /// <summary>Field number for the "sat" field.</summary>
    public const int SatFieldNumber = 1;
    private ulong sat_;
    /// <summary>
    /// Value denominated in satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Sat {
      get { return sat_; }
      set {
        sat_ = value;
      }
    }

    /// <summary>Field number for the "msat" field.</summary>
    public const int MsatFieldNumber = 2;
    private ulong msat_;
    /// <summary>
    /// Value denominated in milli-satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Msat {
      get { return msat_; }
      set {
        msat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Amount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Amount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sat != other.Sat) return false;
      if (Msat != other.Msat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sat != 0UL) hash ^= Sat.GetHashCode();
      if (Msat != 0UL) hash ^= Msat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Sat != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Sat);
      }
      if (Msat != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Msat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Sat != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Sat);
      }
      if (Msat != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Msat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Sat);
      }
      if (Msat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Msat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Amount other) {
      if (other == null) {
        return;
      }
      if (other.Sat != 0UL) {
        Sat = other.Sat;
      }
      if (other.Msat != 0UL) {
        Msat = other.Msat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Sat = input.ReadUInt64();
            break;
          }
          case 16: {
            Msat = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Sat = input.ReadUInt64();
            break;
          }
          case 16: {
            Msat = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelBalanceRequest : pb::IMessage<ChannelBalanceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelBalanceRequest> _parser = new pb::MessageParser<ChannelBalanceRequest>(() => new ChannelBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest(ChannelBalanceRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest Clone() {
      return new ChannelBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelBalanceResponse : pb::IMessage<ChannelBalanceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelBalanceResponse> _parser = new pb::MessageParser<ChannelBalanceResponse>(() => new ChannelBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse(ChannelBalanceResponse other) : this() {
      balance_ = other.balance_;
      pendingOpenBalance_ = other.pendingOpenBalance_;
      localBalance_ = other.localBalance_ != null ? other.localBalance_.Clone() : null;
      remoteBalance_ = other.remoteBalance_ != null ? other.remoteBalance_.Clone() : null;
      unsettledLocalBalance_ = other.unsettledLocalBalance_ != null ? other.unsettledLocalBalance_.Clone() : null;
      unsettledRemoteBalance_ = other.unsettledRemoteBalance_ != null ? other.unsettledRemoteBalance_.Clone() : null;
      pendingOpenLocalBalance_ = other.pendingOpenLocalBalance_ != null ? other.pendingOpenLocalBalance_.Clone() : null;
      pendingOpenRemoteBalance_ = other.pendingOpenRemoteBalance_ != null ? other.pendingOpenRemoteBalance_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse Clone() {
      return new ChannelBalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private long balance_;
    /// <summary>
    /// Deprecated. Sum of channels balances denominated in satoshis
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_balance" field.</summary>
    public const int PendingOpenBalanceFieldNumber = 2;
    private long pendingOpenBalance_;
    /// <summary>
    /// Deprecated. Sum of channels pending balances denominated in satoshis
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PendingOpenBalance {
      get { return pendingOpenBalance_; }
      set {
        pendingOpenBalance_ = value;
      }
    }

    /// <summary>Field number for the "local_balance" field.</summary>
    public const int LocalBalanceFieldNumber = 3;
    private global::Lnrpc.Amount localBalance_;
    /// <summary>
    /// Sum of channels local balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "remote_balance" field.</summary>
    public const int RemoteBalanceFieldNumber = 4;
    private global::Lnrpc.Amount remoteBalance_;
    /// <summary>
    /// Sum of channels remote balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount RemoteBalance {
      get { return remoteBalance_; }
      set {
        remoteBalance_ = value;
      }
    }

    /// <summary>Field number for the "unsettled_local_balance" field.</summary>
    public const int UnsettledLocalBalanceFieldNumber = 5;
    private global::Lnrpc.Amount unsettledLocalBalance_;
    /// <summary>
    /// Sum of channels local unsettled balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount UnsettledLocalBalance {
      get { return unsettledLocalBalance_; }
      set {
        unsettledLocalBalance_ = value;
      }
    }

    /// <summary>Field number for the "unsettled_remote_balance" field.</summary>
    public const int UnsettledRemoteBalanceFieldNumber = 6;
    private global::Lnrpc.Amount unsettledRemoteBalance_;
    /// <summary>
    /// Sum of channels remote unsettled balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount UnsettledRemoteBalance {
      get { return unsettledRemoteBalance_; }
      set {
        unsettledRemoteBalance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_local_balance" field.</summary>
    public const int PendingOpenLocalBalanceFieldNumber = 7;
    private global::Lnrpc.Amount pendingOpenLocalBalance_;
    /// <summary>
    /// Sum of channels pending local balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount PendingOpenLocalBalance {
      get { return pendingOpenLocalBalance_; }
      set {
        pendingOpenLocalBalance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_remote_balance" field.</summary>
    public const int PendingOpenRemoteBalanceFieldNumber = 8;
    private global::Lnrpc.Amount pendingOpenRemoteBalance_;
    /// <summary>
    /// Sum of channels pending remote balances.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Amount PendingOpenRemoteBalance {
      get { return pendingOpenRemoteBalance_; }
      set {
        pendingOpenRemoteBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Balance != other.Balance) return false;
      if (PendingOpenBalance != other.PendingOpenBalance) return false;
      if (!object.Equals(LocalBalance, other.LocalBalance)) return false;
      if (!object.Equals(RemoteBalance, other.RemoteBalance)) return false;
      if (!object.Equals(UnsettledLocalBalance, other.UnsettledLocalBalance)) return false;
      if (!object.Equals(UnsettledRemoteBalance, other.UnsettledRemoteBalance)) return false;
      if (!object.Equals(PendingOpenLocalBalance, other.PendingOpenLocalBalance)) return false;
      if (!object.Equals(PendingOpenRemoteBalance, other.PendingOpenRemoteBalance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (PendingOpenBalance != 0L) hash ^= PendingOpenBalance.GetHashCode();
      if (localBalance_ != null) hash ^= LocalBalance.GetHashCode();
      if (remoteBalance_ != null) hash ^= RemoteBalance.GetHashCode();
      if (unsettledLocalBalance_ != null) hash ^= UnsettledLocalBalance.GetHashCode();
      if (unsettledRemoteBalance_ != null) hash ^= UnsettledRemoteBalance.GetHashCode();
      if (pendingOpenLocalBalance_ != null) hash ^= PendingOpenLocalBalance.GetHashCode();
      if (pendingOpenRemoteBalance_ != null) hash ^= PendingOpenRemoteBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Balance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Balance);
      }
      if (PendingOpenBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PendingOpenBalance);
      }
      if (localBalance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalBalance);
      }
      if (remoteBalance_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RemoteBalance);
      }
      if (unsettledLocalBalance_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UnsettledLocalBalance);
      }
      if (unsettledRemoteBalance_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsettledRemoteBalance);
      }
      if (pendingOpenLocalBalance_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PendingOpenLocalBalance);
      }
      if (pendingOpenRemoteBalance_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PendingOpenRemoteBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Balance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Balance);
      }
      if (PendingOpenBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PendingOpenBalance);
      }
      if (localBalance_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalBalance);
      }
      if (remoteBalance_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RemoteBalance);
      }
      if (unsettledLocalBalance_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UnsettledLocalBalance);
      }
      if (unsettledRemoteBalance_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UnsettledRemoteBalance);
      }
      if (pendingOpenLocalBalance_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(PendingOpenLocalBalance);
      }
      if (pendingOpenRemoteBalance_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PendingOpenRemoteBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (PendingOpenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PendingOpenBalance);
      }
      if (localBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalBalance);
      }
      if (remoteBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteBalance);
      }
      if (unsettledLocalBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsettledLocalBalance);
      }
      if (unsettledRemoteBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsettledRemoteBalance);
      }
      if (pendingOpenLocalBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingOpenLocalBalance);
      }
      if (pendingOpenRemoteBalance_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingOpenRemoteBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      if (other.PendingOpenBalance != 0L) {
        PendingOpenBalance = other.PendingOpenBalance;
      }
      if (other.localBalance_ != null) {
        if (localBalance_ == null) {
          LocalBalance = new global::Lnrpc.Amount();
        }
        LocalBalance.MergeFrom(other.LocalBalance);
      }
      if (other.remoteBalance_ != null) {
        if (remoteBalance_ == null) {
          RemoteBalance = new global::Lnrpc.Amount();
        }
        RemoteBalance.MergeFrom(other.RemoteBalance);
      }
      if (other.unsettledLocalBalance_ != null) {
        if (unsettledLocalBalance_ == null) {
          UnsettledLocalBalance = new global::Lnrpc.Amount();
        }
        UnsettledLocalBalance.MergeFrom(other.UnsettledLocalBalance);
      }
      if (other.unsettledRemoteBalance_ != null) {
        if (unsettledRemoteBalance_ == null) {
          UnsettledRemoteBalance = new global::Lnrpc.Amount();
        }
        UnsettledRemoteBalance.MergeFrom(other.UnsettledRemoteBalance);
      }
      if (other.pendingOpenLocalBalance_ != null) {
        if (pendingOpenLocalBalance_ == null) {
          PendingOpenLocalBalance = new global::Lnrpc.Amount();
        }
        PendingOpenLocalBalance.MergeFrom(other.PendingOpenLocalBalance);
      }
      if (other.pendingOpenRemoteBalance_ != null) {
        if (pendingOpenRemoteBalance_ == null) {
          PendingOpenRemoteBalance = new global::Lnrpc.Amount();
        }
        PendingOpenRemoteBalance.MergeFrom(other.PendingOpenRemoteBalance);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Balance = input.ReadInt64();
            break;
          }
          case 16: {
            PendingOpenBalance = input.ReadInt64();
            break;
          }
          case 26: {
            if (localBalance_ == null) {
              LocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(LocalBalance);
            break;
          }
          case 34: {
            if (remoteBalance_ == null) {
              RemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(RemoteBalance);
            break;
          }
          case 42: {
            if (unsettledLocalBalance_ == null) {
              UnsettledLocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(UnsettledLocalBalance);
            break;
          }
          case 50: {
            if (unsettledRemoteBalance_ == null) {
              UnsettledRemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(UnsettledRemoteBalance);
            break;
          }
          case 58: {
            if (pendingOpenLocalBalance_ == null) {
              PendingOpenLocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(PendingOpenLocalBalance);
            break;
          }
          case 66: {
            if (pendingOpenRemoteBalance_ == null) {
              PendingOpenRemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(PendingOpenRemoteBalance);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Balance = input.ReadInt64();
            break;
          }
          case 16: {
            PendingOpenBalance = input.ReadInt64();
            break;
          }
          case 26: {
            if (localBalance_ == null) {
              LocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(LocalBalance);
            break;
          }
          case 34: {
            if (remoteBalance_ == null) {
              RemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(RemoteBalance);
            break;
          }
          case 42: {
            if (unsettledLocalBalance_ == null) {
              UnsettledLocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(UnsettledLocalBalance);
            break;
          }
          case 50: {
            if (unsettledRemoteBalance_ == null) {
              UnsettledRemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(UnsettledRemoteBalance);
            break;
          }
          case 58: {
            if (pendingOpenLocalBalance_ == null) {
              PendingOpenLocalBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(PendingOpenLocalBalance);
            break;
          }
          case 66: {
            if (pendingOpenRemoteBalance_ == null) {
              PendingOpenRemoteBalance = new global::Lnrpc.Amount();
            }
            input.ReadMessage(PendingOpenRemoteBalance);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryRoutesRequest : pb::IMessage<QueryRoutesRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryRoutesRequest> _parser = new pb::MessageParser<QueryRoutesRequest>(() => new QueryRoutesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest(QueryRoutesRequest other) : this() {
      pubKey_ = other.pubKey_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      finalCltvDelta_ = other.finalCltvDelta_;
      feeLimit_ = other.feeLimit_ != null ? other.feeLimit_.Clone() : null;
      ignoredNodes_ = other.ignoredNodes_.Clone();
      ignoredEdges_ = other.ignoredEdges_.Clone();
      sourcePubKey_ = other.sourcePubKey_;
      useMissionControl_ = other.useMissionControl_;
      ignoredPairs_ = other.ignoredPairs_.Clone();
      cltvLimit_ = other.cltvLimit_;
      destCustomRecords_ = other.destCustomRecords_.Clone();
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      routeHints_ = other.routeHints_.Clone();
      destFeatures_ = other.destFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest Clone() {
      return new QueryRoutesRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    /// The 33-byte hex-encoded public key for the payment destination
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    /// <summary>
    ///
    ///The amount to send expressed in satoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///
    ///The amount to send expressed in millisatoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 4;
    private int finalCltvDelta_;
    /// <summary>
    ///
    ///An optional CLTV delta from the current height that should be used for the
    ///timelock of the final hop. Note that unlike SendPayment, QueryRoutes does
    ///not add any additional block padding on top of final_ctlv_delta. This
    ///padding of a few blocks needs to be added manually or otherwise failures may
    ///happen when a block comes in while the payment is in flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit" field.</summary>
    public const int FeeLimitFieldNumber = 5;
    private global::Lnrpc.FeeLimit feeLimit_;
    /// <summary>
    ///
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///This value can be represented either as a percentage of the amount being
    ///sent, or as a fixed amount of the maximum fee the user is willing the pay to
    ///send the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FeeLimit FeeLimit {
      get { return feeLimit_; }
      set {
        feeLimit_ = value;
      }
    }

    /// <summary>Field number for the "ignored_nodes" field.</summary>
    public const int IgnoredNodesFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ignoredNodes_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> ignoredNodes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///
    ///A list of nodes to ignore during path finding. When using REST, these fields
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> IgnoredNodes {
      get { return ignoredNodes_; }
    }

    /// <summary>Field number for the "ignored_edges" field.</summary>
    public const int IgnoredEdgesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Lnrpc.EdgeLocator> _repeated_ignoredEdges_codec
        = pb::FieldCodec.ForMessage(58, global::Lnrpc.EdgeLocator.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.EdgeLocator> ignoredEdges_ = new pbc::RepeatedField<global::Lnrpc.EdgeLocator>();
    /// <summary>
    ///
    ///Deprecated. A list of edges to ignore during path finding.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.EdgeLocator> IgnoredEdges {
      get { return ignoredEdges_; }
    }

    /// <summary>Field number for the "source_pub_key" field.</summary>
    public const int SourcePubKeyFieldNumber = 8;
    private string sourcePubKey_ = "";
    /// <summary>
    ///
    ///The source node where the request route should originated from. If empty,
    ///self is assumed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePubKey {
      get { return sourcePubKey_; }
      set {
        sourcePubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_mission_control" field.</summary>
    public const int UseMissionControlFieldNumber = 9;
    private bool useMissionControl_;
    /// <summary>
    ///
    ///If set to true, edge probabilities from mission control will be used to get
    ///the optimal route.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMissionControl {
      get { return useMissionControl_; }
      set {
        useMissionControl_ = value;
      }
    }

    /// <summary>Field number for the "ignored_pairs" field.</summary>
    public const int IgnoredPairsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.NodePair> _repeated_ignoredPairs_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.NodePair.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodePair> ignoredPairs_ = new pbc::RepeatedField<global::Lnrpc.NodePair>();
    /// <summary>
    ///
    ///A list of directed node pairs that will be ignored during path finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodePair> IgnoredPairs {
      get { return ignoredPairs_; }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 11;
    private uint cltvLimit_;
    /// <summary>
    ///
    ///An optional maximum total time lock for the route. If the source is empty or
    ///ourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If
    ///zero, then the value of `--max-cltv-expiry` is used as the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 13;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 106);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. If the destination
    ///does not support the specified recrods, and error will be returned.
    ///Record types are required to be in the custom range >= 65536. When using
    ///REST, the values must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 14;
    private ulong outgoingChanId_;
    /// <summary>
    ///
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 15;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(130, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///
    ///Optional route hints to reach the destination through private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(138, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///
    ///Features assumed to be supported by the final node. All transitive feature
    ///dependencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (!object.Equals(FeeLimit, other.FeeLimit)) return false;
      if(!ignoredNodes_.Equals(other.ignoredNodes_)) return false;
      if(!ignoredEdges_.Equals(other.ignoredEdges_)) return false;
      if (SourcePubKey != other.SourcePubKey) return false;
      if (UseMissionControl != other.UseMissionControl) return false;
      if(!ignoredPairs_.Equals(other.ignoredPairs_)) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (feeLimit_ != null) hash ^= FeeLimit.GetHashCode();
      hash ^= ignoredNodes_.GetHashCode();
      hash ^= ignoredEdges_.GetHashCode();
      if (SourcePubKey.Length != 0) hash ^= SourcePubKey.GetHashCode();
      if (UseMissionControl != false) hash ^= UseMissionControl.GetHashCode();
      hash ^= ignoredPairs_.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FeeLimit);
      }
      ignoredNodes_.WriteTo(output, _repeated_ignoredNodes_codec);
      ignoredEdges_.WriteTo(output, _repeated_ignoredEdges_codec);
      if (SourcePubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SourcePubKey);
      }
      if (UseMissionControl != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseMissionControl);
      }
      ignoredPairs_.WriteTo(output, _repeated_ignoredPairs_codec);
      if (CltvLimit != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CltvLimit);
      }
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(LastHopPubkey);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FeeLimit);
      }
      ignoredNodes_.WriteTo(ref output, _repeated_ignoredNodes_codec);
      ignoredEdges_.WriteTo(ref output, _repeated_ignoredEdges_codec);
      if (SourcePubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SourcePubKey);
      }
      if (UseMissionControl != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseMissionControl);
      }
      ignoredPairs_.WriteTo(ref output, _repeated_ignoredPairs_codec);
      if (CltvLimit != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CltvLimit);
      }
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      destCustomRecords_.WriteTo(ref output, _map_destCustomRecords_codec);
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(LastHopPubkey);
      }
      routeHints_.WriteTo(ref output, _repeated_routeHints_codec);
      destFeatures_.WriteTo(ref output, _repeated_destFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeeLimit);
      }
      size += ignoredNodes_.CalculateSize(_repeated_ignoredNodes_codec);
      size += ignoredEdges_.CalculateSize(_repeated_ignoredEdges_codec);
      if (SourcePubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePubKey);
      }
      if (UseMissionControl != false) {
        size += 1 + 1;
      }
      size += ignoredPairs_.CalculateSize(_repeated_ignoredPairs_codec);
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvLimit);
      }
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.feeLimit_ != null) {
        if (feeLimit_ == null) {
          FeeLimit = new global::Lnrpc.FeeLimit();
        }
        FeeLimit.MergeFrom(other.FeeLimit);
      }
      ignoredNodes_.Add(other.ignoredNodes_);
      ignoredEdges_.Add(other.ignoredEdges_);
      if (other.SourcePubKey.Length != 0) {
        SourcePubKey = other.SourcePubKey;
      }
      if (other.UseMissionControl != false) {
        UseMissionControl = other.UseMissionControl;
      }
      ignoredPairs_.Add(other.ignoredPairs_);
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      routeHints_.Add(other.routeHints_);
      destFeatures_.Add(other.destFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 32: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 42: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 50: {
            ignoredNodes_.AddEntriesFrom(input, _repeated_ignoredNodes_codec);
            break;
          }
          case 58: {
            ignoredEdges_.AddEntriesFrom(input, _repeated_ignoredEdges_codec);
            break;
          }
          case 66: {
            SourcePubKey = input.ReadString();
            break;
          }
          case 72: {
            UseMissionControl = input.ReadBool();
            break;
          }
          case 82: {
            ignoredPairs_.AddEntriesFrom(input, _repeated_ignoredPairs_codec);
            break;
          }
          case 88: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 112: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 122: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 130: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 138:
          case 136: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 32: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 42: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 50: {
            ignoredNodes_.AddEntriesFrom(ref input, _repeated_ignoredNodes_codec);
            break;
          }
          case 58: {
            ignoredEdges_.AddEntriesFrom(ref input, _repeated_ignoredEdges_codec);
            break;
          }
          case 66: {
            SourcePubKey = input.ReadString();
            break;
          }
          case 72: {
            UseMissionControl = input.ReadBool();
            break;
          }
          case 82: {
            ignoredPairs_.AddEntriesFrom(ref input, _repeated_ignoredPairs_codec);
            break;
          }
          case 88: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            destCustomRecords_.AddEntriesFrom(ref input, _map_destCustomRecords_codec);
            break;
          }
          case 112: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 122: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 130: {
            routeHints_.AddEntriesFrom(ref input, _repeated_routeHints_codec);
            break;
          }
          case 138:
          case 136: {
            destFeatures_.AddEntriesFrom(ref input, _repeated_destFeatures_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodePair : pb::IMessage<NodePair>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodePair> _parser = new pb::MessageParser<NodePair>(() => new NodePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair(NodePair other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair Clone() {
      return new NodePair(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private pb::ByteString from_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The sending node of the pair. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private pb::ByteString to_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The receiving node of the pair. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodePair other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadBytes();
            break;
          }
          case 18: {
            To = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            From = input.ReadBytes();
            break;
          }
          case 18: {
            To = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EdgeLocator : pb::IMessage<EdgeLocator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EdgeLocator> _parser = new pb::MessageParser<EdgeLocator>(() => new EdgeLocator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EdgeLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator(EdgeLocator other) : this() {
      channelId_ = other.channelId_;
      directionReverse_ = other.directionReverse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator Clone() {
      return new EdgeLocator(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private ulong channelId_;
    /// <summary>
    /// The short channel id of this edge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "direction_reverse" field.</summary>
    public const int DirectionReverseFieldNumber = 2;
    private bool directionReverse_;
    /// <summary>
    ///
    ///The direction of this edge. If direction_reverse is false, the direction
    ///of this edge is from the channel endpoint with the lexicographically smaller
    ///pub key to the endpoint with the larger pub key. If direction_reverse is
    ///is true, the edge goes the other way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DirectionReverse {
      get { return directionReverse_; }
      set {
        directionReverse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EdgeLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EdgeLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (DirectionReverse != other.DirectionReverse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (DirectionReverse != false) hash ^= DirectionReverse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (DirectionReverse != false) {
        output.WriteRawTag(16);
        output.WriteBool(DirectionReverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (DirectionReverse != false) {
        output.WriteRawTag(16);
        output.WriteBool(DirectionReverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (DirectionReverse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EdgeLocator other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.DirectionReverse != false) {
        DirectionReverse = other.DirectionReverse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 16: {
            DirectionReverse = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 16: {
            DirectionReverse = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class QueryRoutesResponse : pb::IMessage<QueryRoutesResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<QueryRoutesResponse> _parser = new pb::MessageParser<QueryRoutesResponse>(() => new QueryRoutesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse(QueryRoutesResponse other) : this() {
      routes_ = other.routes_.Clone();
      successProb_ = other.successProb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse Clone() {
      return new QueryRoutesResponse(this);
    }

    /// <summary>Field number for the "routes" field.</summary>
    public const int RoutesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Route> _repeated_routes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Route.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Route> routes_ = new pbc::RepeatedField<global::Lnrpc.Route>();
    /// <summary>
    ///
    ///The route that results from the path finding operation. This is still a
    ///repeated field to retain backwards compatibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Route> Routes {
      get { return routes_; }
    }

    /// <summary>Field number for the "success_prob" field.</summary>
    public const int SuccessProbFieldNumber = 2;
    private double successProb_;
    /// <summary>
    ///
    ///The success probability of the returned route based on the current mission
    ///control state. [EXPERIMENTAL]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SuccessProb {
      get { return successProb_; }
      set {
        successProb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routes_.Equals(other.routes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SuccessProb, other.SuccessProb)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routes_.GetHashCode();
      if (SuccessProb != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SuccessProb);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      routes_.WriteTo(output, _repeated_routes_codec);
      if (SuccessProb != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SuccessProb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      routes_.WriteTo(ref output, _repeated_routes_codec);
      if (SuccessProb != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SuccessProb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routes_.CalculateSize(_repeated_routes_codec);
      if (SuccessProb != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesResponse other) {
      if (other == null) {
        return;
      }
      routes_.Add(other.routes_);
      if (other.SuccessProb != 0D) {
        SuccessProb = other.SuccessProb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            routes_.AddEntriesFrom(input, _repeated_routes_codec);
            break;
          }
          case 17: {
            SuccessProb = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            routes_.AddEntriesFrom(ref input, _repeated_routes_codec);
            break;
          }
          case 17: {
            SuccessProb = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Hop : pb::IMessage<Hop>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Hop> _parser = new pb::MessageParser<Hop>(() => new Hop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop(Hop other) : this() {
      chanId_ = other.chanId_;
      chanCapacity_ = other.chanCapacity_;
      amtToForward_ = other.amtToForward_;
      fee_ = other.fee_;
      expiry_ = other.expiry_;
      amtToForwardMsat_ = other.amtToForwardMsat_;
      feeMsat_ = other.feeMsat_;
      pubKey_ = other.pubKey_;
      tlvPayload_ = other.tlvPayload_;
      mppRecord_ = other.mppRecord_ != null ? other.mppRecord_.Clone() : null;
      ampRecord_ = other.ampRecord_ != null ? other.ampRecord_.Clone() : null;
      customRecords_ = other.customRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop Clone() {
      return new Hop(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_capacity" field.</summary>
    public const int ChanCapacityFieldNumber = 2;
    private long chanCapacity_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChanCapacity {
      get { return chanCapacity_; }
      set {
        chanCapacity_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward" field.</summary>
    public const int AmtToForwardFieldNumber = 3;
    private long amtToForward_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForward {
      get { return amtToForward_; }
      set {
        amtToForward_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private long fee_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private uint expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward_msat" field.</summary>
    public const int AmtToForwardMsatFieldNumber = 6;
    private long amtToForwardMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForwardMsat {
      get { return amtToForwardMsat_; }
      set {
        amtToForwardMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 7;
    private long feeMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 8;
    private string pubKey_ = "";
    /// <summary>
    ///
    ///An optional public key of the hop. If the public key is given, the payment
    ///can be executed without relying on a copy of the channel graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tlv_payload" field.</summary>
    public const int TlvPayloadFieldNumber = 9;
    private bool tlvPayload_;
    /// <summary>
    ///
    ///If set to true, then this hop will be encoded using the new variable length
    ///TLV format. Note that if any custom tlv_records below are specified, then
    ///this field MUST be set to true for them to be encoded properly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TlvPayload {
      get { return tlvPayload_; }
      set {
        tlvPayload_ = value;
      }
    }

    /// <summary>Field number for the "mpp_record" field.</summary>
    public const int MppRecordFieldNumber = 10;
    private global::Lnrpc.MPPRecord mppRecord_;
    /// <summary>
    ///
    ///An optional TLV record that signals the use of an MPP payment. If present,
    ///the receiver will enforce that the same mpp_record is included in the final
    ///hop payload of all non-zero payments in the HTLC set. If empty, a regular
    ///single-shot payment is or was attempted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.MPPRecord MppRecord {
      get { return mppRecord_; }
      set {
        mppRecord_ = value;
      }
    }

    /// <summary>Field number for the "amp_record" field.</summary>
    public const int AmpRecordFieldNumber = 12;
    private global::Lnrpc.AMPRecord ampRecord_;
    /// <summary>
    ///
    ///An optional TLV record that signals the use of an AMP payment. If present,
    ///the receiver will treat all received payments including the same
    ///(payment_addr, set_id) pair  as being part of one logical payment. The
    ///payment will be settled by XORing the root_share's together and deriving the
    ///child hashes and preimages according to BOLT XX. Must be used in conjunction
    ///with mpp_record.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AMPRecord AmpRecord {
      get { return ampRecord_; }
      set {
        ampRecord_ = value;
      }
    }

    /// <summary>Field number for the "custom_records" field.</summary>
    public const int CustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_customRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> customRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///
    ///An optional set of key-value TLV records. This is useful within the context
    ///of the SendToRoute call as it allows callers to specify arbitrary K-V pairs
    ///to drop off at each hop within the onion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> CustomRecords {
      get { return customRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (ChanCapacity != other.ChanCapacity) return false;
      if (AmtToForward != other.AmtToForward) return false;
      if (Fee != other.Fee) return false;
      if (Expiry != other.Expiry) return false;
      if (AmtToForwardMsat != other.AmtToForwardMsat) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (PubKey != other.PubKey) return false;
      if (TlvPayload != other.TlvPayload) return false;
      if (!object.Equals(MppRecord, other.MppRecord)) return false;
      if (!object.Equals(AmpRecord, other.AmpRecord)) return false;
      if (!CustomRecords.Equals(other.CustomRecords)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChanCapacity != 0L) hash ^= ChanCapacity.GetHashCode();
      if (AmtToForward != 0L) hash ^= AmtToForward.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Expiry != 0) hash ^= Expiry.GetHashCode();
      if (AmtToForwardMsat != 0L) hash ^= AmtToForwardMsat.GetHashCode();
      if (FeeMsat != 0L) hash ^= FeeMsat.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (TlvPayload != false) hash ^= TlvPayload.GetHashCode();
      if (mppRecord_ != null) hash ^= MppRecord.GetHashCode();
      if (ampRecord_ != null) hash ^= AmpRecord.GetHashCode();
      hash ^= CustomRecords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (ChanCapacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtToForward);
      }
      if (Fee != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Fee);
      }
      if (Expiry != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeMsat);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PubKey);
      }
      if (TlvPayload != false) {
        output.WriteRawTag(72);
        output.WriteBool(TlvPayload);
      }
      if (mppRecord_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MppRecord);
      }
      customRecords_.WriteTo(output, _map_customRecords_codec);
      if (ampRecord_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AmpRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (ChanCapacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtToForward);
      }
      if (Fee != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Fee);
      }
      if (Expiry != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeMsat);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PubKey);
      }
      if (TlvPayload != false) {
        output.WriteRawTag(72);
        output.WriteBool(TlvPayload);
      }
      if (mppRecord_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MppRecord);
      }
      customRecords_.WriteTo(ref output, _map_customRecords_codec);
      if (ampRecord_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AmpRecord);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChanCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForward);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Expiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeMsat);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (TlvPayload != false) {
        size += 1 + 1;
      }
      if (mppRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MppRecord);
      }
      if (ampRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmpRecord);
      }
      size += customRecords_.CalculateSize(_map_customRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hop other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChanCapacity != 0L) {
        ChanCapacity = other.ChanCapacity;
      }
      if (other.AmtToForward != 0L) {
        AmtToForward = other.AmtToForward;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Expiry != 0) {
        Expiry = other.Expiry;
      }
      if (other.AmtToForwardMsat != 0L) {
        AmtToForwardMsat = other.AmtToForwardMsat;
      }
      if (other.FeeMsat != 0L) {
        FeeMsat = other.FeeMsat;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.TlvPayload != false) {
        TlvPayload = other.TlvPayload;
      }
      if (other.mppRecord_ != null) {
        if (mppRecord_ == null) {
          MppRecord = new global::Lnrpc.MPPRecord();
        }
        MppRecord.MergeFrom(other.MppRecord);
      }
      if (other.ampRecord_ != null) {
        if (ampRecord_ == null) {
          AmpRecord = new global::Lnrpc.AMPRecord();
        }
        AmpRecord.MergeFrom(other.AmpRecord);
      }
      customRecords_.Add(other.customRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanCapacity = input.ReadInt64();
            break;
          }
          case 24: {
            AmtToForward = input.ReadInt64();
            break;
          }
          case 32: {
            Fee = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadUInt32();
            break;
          }
          case 48: {
            AmtToForwardMsat = input.ReadInt64();
            break;
          }
          case 56: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 66: {
            PubKey = input.ReadString();
            break;
          }
          case 72: {
            TlvPayload = input.ReadBool();
            break;
          }
          case 82: {
            if (mppRecord_ == null) {
              MppRecord = new global::Lnrpc.MPPRecord();
            }
            input.ReadMessage(MppRecord);
            break;
          }
          case 90: {
            customRecords_.AddEntriesFrom(input, _map_customRecords_codec);
            break;
          }
          case 98: {
            if (ampRecord_ == null) {
              AmpRecord = new global::Lnrpc.AMPRecord();
            }
            input.ReadMessage(AmpRecord);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanCapacity = input.ReadInt64();
            break;
          }
          case 24: {
            AmtToForward = input.ReadInt64();
            break;
          }
          case 32: {
            Fee = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadUInt32();
            break;
          }
          case 48: {
            AmtToForwardMsat = input.ReadInt64();
            break;
          }
          case 56: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 66: {
            PubKey = input.ReadString();
            break;
          }
          case 72: {
            TlvPayload = input.ReadBool();
            break;
          }
          case 82: {
            if (mppRecord_ == null) {
              MppRecord = new global::Lnrpc.MPPRecord();
            }
            input.ReadMessage(MppRecord);
            break;
          }
          case 90: {
            customRecords_.AddEntriesFrom(ref input, _map_customRecords_codec);
            break;
          }
          case 98: {
            if (ampRecord_ == null) {
              AmpRecord = new global::Lnrpc.AMPRecord();
            }
            input.ReadMessage(AmpRecord);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MPPRecord : pb::IMessage<MPPRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MPPRecord> _parser = new pb::MessageParser<MPPRecord>(() => new MPPRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPPRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord(MPPRecord other) : this() {
      paymentAddr_ = other.paymentAddr_;
      totalAmtMsat_ = other.totalAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord Clone() {
      return new MPPRecord(this);
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 11;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///A unique, random identifier used to authenticate the sender as the intended
    ///payer of a multi-path payment. The payment_addr must be the same for all
    ///subpayments, and match the payment_addr provided in the receiver's invoice.
    ///The same payment_addr must be used on all subpayments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_amt_msat" field.</summary>
    public const int TotalAmtMsatFieldNumber = 10;
    private long totalAmtMsat_;
    /// <summary>
    ///
    ///The total amount in milli-satoshis being sent as part of a larger multi-path
    ///payment. The caller is responsible for ensuring subpayments to the same node
    ///and payment_hash sum exactly to total_amt_msat. The same
    ///total_amt_msat must be used on all subpayments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmtMsat {
      get { return totalAmtMsat_; }
      set {
        totalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPPRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPPRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentAddr != other.PaymentAddr) return false;
      if (TotalAmtMsat != other.TotalAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (TotalAmtMsat != 0L) hash ^= TotalAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TotalAmtMsat);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TotalAmtMsat);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (TotalAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPPRecord other) {
      if (other == null) {
        return;
      }
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      if (other.TotalAmtMsat != 0L) {
        TotalAmtMsat = other.TotalAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 80: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AMPRecord : pb::IMessage<AMPRecord>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AMPRecord> _parser = new pb::MessageParser<AMPRecord>(() => new AMPRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AMPRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMPRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMPRecord(AMPRecord other) : this() {
      rootShare_ = other.rootShare_;
      setId_ = other.setId_;
      childIndex_ = other.childIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMPRecord Clone() {
      return new AMPRecord(this);
    }

    /// <summary>Field number for the "root_share" field.</summary>
    public const int RootShareFieldNumber = 1;
    private pb::ByteString rootShare_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RootShare {
      get { return rootShare_; }
      set {
        rootShare_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set_id" field.</summary>
    public const int SetIdFieldNumber = 2;
    private pb::ByteString setId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SetId {
      get { return setId_; }
      set {
        setId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_index" field.</summary>
    public const int ChildIndexFieldNumber = 3;
    private uint childIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChildIndex {
      get { return childIndex_; }
      set {
        childIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AMPRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AMPRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootShare != other.RootShare) return false;
      if (SetId != other.SetId) return false;
      if (ChildIndex != other.ChildIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootShare.Length != 0) hash ^= RootShare.GetHashCode();
      if (SetId.Length != 0) hash ^= SetId.GetHashCode();
      if (ChildIndex != 0) hash ^= ChildIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RootShare.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RootShare);
      }
      if (SetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SetId);
      }
      if (ChildIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChildIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RootShare.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RootShare);
      }
      if (SetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SetId);
      }
      if (ChildIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChildIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootShare.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootShare);
      }
      if (SetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SetId);
      }
      if (ChildIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChildIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AMPRecord other) {
      if (other == null) {
        return;
      }
      if (other.RootShare.Length != 0) {
        RootShare = other.RootShare;
      }
      if (other.SetId.Length != 0) {
        SetId = other.SetId;
      }
      if (other.ChildIndex != 0) {
        ChildIndex = other.ChildIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RootShare = input.ReadBytes();
            break;
          }
          case 18: {
            SetId = input.ReadBytes();
            break;
          }
          case 24: {
            ChildIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RootShare = input.ReadBytes();
            break;
          }
          case 18: {
            SetId = input.ReadBytes();
            break;
          }
          case 24: {
            ChildIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///A path through the channel graph which runs over one or more channels in
  ///succession. This struct carries all the information required to craft the
  ///Sphinx onion packet, and send the payment along the first hop in the path. A
  ///route is only selected as valid if all the channels have sufficient capacity to
  ///carry the initial payment amount after fees are accounted for.
  /// </summary>
  public sealed partial class Route : pb::IMessage<Route>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      totalTimeLock_ = other.totalTimeLock_;
      totalFees_ = other.totalFees_;
      totalAmt_ = other.totalAmt_;
      hops_ = other.hops_.Clone();
      totalFeesMsat_ = other.totalFeesMsat_;
      totalAmtMsat_ = other.totalAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "total_time_lock" field.</summary>
    public const int TotalTimeLockFieldNumber = 1;
    private uint totalTimeLock_;
    /// <summary>
    ///
    ///The cumulative (final) time lock across the entire route. This is the CLTV
    ///value that should be extended to the first hop in the route. All other hops
    ///will decrement the time-lock as advertised, leaving enough time for all
    ///hops to wait for or present the payment preimage to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalTimeLock {
      get { return totalTimeLock_; }
      set {
        totalTimeLock_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 2;
    private long totalFees_;
    /// <summary>
    ///
    ///The sum of the fees paid at each hop within the final route. In the case
    ///of a one-hop payment, this value will be zero as we don't need to pay a fee
    ///to ourselves.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "total_amt" field.</summary>
    public const int TotalAmtFieldNumber = 3;
    private long totalAmt_;
    /// <summary>
    ///
    ///The total amount of funds required to complete a payment over this route.
    ///This value includes the cumulative fees at each hop. As a result, the HTLC
    ///extended to the first-hop in the route will need to have at least this many
    ///satoshis, otherwise the route will fail at an intermediate node due to an
    ///insufficient amount of fees.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmt {
      get { return totalAmt_; }
      set {
        totalAmt_ = value;
      }
    }

    /// <summary>Field number for the "hops" field.</summary>
    public const int HopsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.Hop> _repeated_hops_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.Hop.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Hop> hops_ = new pbc::RepeatedField<global::Lnrpc.Hop>();
    /// <summary>
    ///
    ///Contains details concerning the specific forwarding details at each hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Hop> Hops {
      get { return hops_; }
    }

    /// <summary>Field number for the "total_fees_msat" field.</summary>
    public const int TotalFeesMsatFieldNumber = 5;
    private long totalFeesMsat_;
    /// <summary>
    ///
    ///The total fees in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFeesMsat {
      get { return totalFeesMsat_; }
      set {
        totalFeesMsat_ = value;
      }
    }

    /// <summary>Field number for the "total_amt_msat" field.</summary>
    public const int TotalAmtMsatFieldNumber = 6;
    private long totalAmtMsat_;
    /// <summary>
    ///
    ///The total amount in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmtMsat {
      get { return totalAmtMsat_; }
      set {
        totalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeLock != other.TotalTimeLock) return false;
      if (TotalFees != other.TotalFees) return false;
      if (TotalAmt != other.TotalAmt) return false;
      if(!hops_.Equals(other.hops_)) return false;
      if (TotalFeesMsat != other.TotalFeesMsat) return false;
      if (TotalAmtMsat != other.TotalAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeLock != 0) hash ^= TotalTimeLock.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      if (TotalAmt != 0L) hash ^= TotalAmt.GetHashCode();
      hash ^= hops_.GetHashCode();
      if (TotalFeesMsat != 0L) hash ^= TotalFeesMsat.GetHashCode();
      if (TotalAmtMsat != 0L) hash ^= TotalAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalTimeLock != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFees);
      }
      if (TotalAmt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalAmt);
      }
      hops_.WriteTo(output, _repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalTimeLock != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFees);
      }
      if (TotalAmt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalAmt);
      }
      hops_.WriteTo(ref output, _repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeLock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      if (TotalAmt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmt);
      }
      size += hops_.CalculateSize(_repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeLock != 0) {
        TotalTimeLock = other.TotalTimeLock;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      if (other.TotalAmt != 0L) {
        TotalAmt = other.TotalAmt;
      }
      hops_.Add(other.hops_);
      if (other.TotalFeesMsat != 0L) {
        TotalFeesMsat = other.TotalFeesMsat;
      }
      if (other.TotalAmtMsat != 0L) {
        TotalAmtMsat = other.TotalAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalTimeLock = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 24: {
            TotalAmt = input.ReadInt64();
            break;
          }
          case 34: {
            hops_.AddEntriesFrom(input, _repeated_hops_codec);
            break;
          }
          case 40: {
            TotalFeesMsat = input.ReadInt64();
            break;
          }
          case 48: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalTimeLock = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 24: {
            TotalAmt = input.ReadInt64();
            break;
          }
          case 34: {
            hops_.AddEntriesFrom(ref input, _repeated_hops_codec);
            break;
          }
          case 40: {
            TotalFeesMsat = input.ReadInt64();
            break;
          }
          case 48: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeInfoRequest : pb::IMessage<NodeInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeInfoRequest> _parser = new pb::MessageParser<NodeInfoRequest>(() => new NodeInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest(NodeInfoRequest other) : this() {
      pubKey_ = other.pubKey_;
      includeChannels_ = other.includeChannels_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest Clone() {
      return new NodeInfoRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    /// The 33-byte hex-encoded compressed public of the target node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_channels" field.</summary>
    public const int IncludeChannelsFieldNumber = 2;
    private bool includeChannels_;
    /// <summary>
    /// If true, will include all known channels associated with the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeChannels {
      get { return includeChannels_; }
      set {
        includeChannels_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (IncludeChannels != other.IncludeChannels) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (IncludeChannels != false) hash ^= IncludeChannels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (IncludeChannels != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeChannels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (IncludeChannels != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeChannels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (IncludeChannels != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.IncludeChannels != false) {
        IncludeChannels = other.IncludeChannels;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            IncludeChannels = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            IncludeChannels = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      numChannels_ = other.numChannels_;
      totalCapacity_ = other.totalCapacity_;
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Lnrpc.LightningNode node_;
    /// <summary>
    ///
    ///An individual vertex/node within the channel graph. A node is
    ///connected to other nodes by one or more channel edges emanating from it. As
    ///the graph is directed, a node will also have an incoming edge attached to
    ///it for each outgoing edge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningNode Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 2;
    private uint numChannels_;
    /// <summary>
    /// The total number of channels for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_capacity" field.</summary>
    public const int TotalCapacityFieldNumber = 3;
    private long totalCapacity_;
    /// <summary>
    /// The sum of all channels capacity for the node, denominated in satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCapacity {
      get { return totalCapacity_; }
      set {
        totalCapacity_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdge> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.ChannelEdge.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdge> channels_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdge>();
    /// <summary>
    /// A list of all public channels for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdge> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalCapacity != other.TotalCapacity) return false;
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalCapacity != 0L) hash ^= TotalCapacity.GetHashCode();
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumChannels);
      }
      if (TotalCapacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalCapacity);
      }
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumChannels);
      }
      if (TotalCapacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalCapacity);
      }
      channels_.WriteTo(ref output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCapacity);
      }
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Lnrpc.LightningNode();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalCapacity != 0L) {
        TotalCapacity = other.TotalCapacity;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Lnrpc.LightningNode();
            }
            input.ReadMessage(Node);
            break;
          }
          case 16: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalCapacity = input.ReadInt64();
            break;
          }
          case 34: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Lnrpc.LightningNode();
            }
            input.ReadMessage(Node);
            break;
          }
          case 16: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalCapacity = input.ReadInt64();
            break;
          }
          case 34: {
            channels_.AddEntriesFrom(ref input, _repeated_channels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///An individual vertex/node within the channel graph. A node is
  ///connected to other nodes by one or more channel edges emanating from it. As the
  ///graph is directed, a node will also have an incoming edge attached to it for
  ///each outgoing edge.
  /// </summary>
  public sealed partial class LightningNode : pb::IMessage<LightningNode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LightningNode> _parser = new pb::MessageParser<LightningNode>(() => new LightningNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode(LightningNode other) : this() {
      lastUpdate_ = other.lastUpdate_;
      pubKey_ = other.pubKey_;
      alias_ = other.alias_;
      addresses_ = other.addresses_.Clone();
      color_ = other.color_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode Clone() {
      return new LightningNode(this);
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 1;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 2;
    private string pubKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeAddress> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.NodeAddress.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeAddress> addresses_ = new pbc::RepeatedField<global::Lnrpc.NodeAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeAddress> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 6;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 50);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastUpdate != other.LastUpdate) return false;
      if (PubKey != other.PubKey) return false;
      if (Alias != other.Alias) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if (Color != other.Color) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LastUpdate != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastUpdate);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PubKey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LastUpdate != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastUpdate);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PubKey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      addresses_.WriteTo(ref output, _repeated_addresses_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      features_.WriteTo(ref output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningNode other) {
      if (other == null) {
        return;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      addresses_.Add(other.addresses_);
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 18: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 18: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(ref input, _repeated_addresses_codec);
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeAddress : pb::IMessage<NodeAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeAddress> _parser = new pb::MessageParser<NodeAddress>(() => new NodeAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress(NodeAddress other) : this() {
      network_ = other.network_;
      addr_ = other.addr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress Clone() {
      return new NodeAddress(this);
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 1;
    private string network_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Network != other.Network) return false;
      if (Addr != other.Addr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Network.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Network);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Network.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Network);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAddress other) {
      if (other == null) {
        return;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Network = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Network = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoutingPolicy : pb::IMessage<RoutingPolicy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoutingPolicy> _parser = new pb::MessageParser<RoutingPolicy>(() => new RoutingPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy(RoutingPolicy other) : this() {
      timeLockDelta_ = other.timeLockDelta_;
      minHtlc_ = other.minHtlc_;
      feeBaseMsat_ = other.feeBaseMsat_;
      feeRateMilliMsat_ = other.feeRateMilliMsat_;
      disabled_ = other.disabled_;
      maxHtlcMsat_ = other.maxHtlcMsat_;
      lastUpdate_ = other.lastUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy Clone() {
      return new RoutingPolicy(this);
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 1;
    private uint timeLockDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc" field.</summary>
    public const int MinHtlcFieldNumber = 2;
    private long minHtlc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlc {
      get { return minHtlc_; }
      set {
        minHtlc_ = value;
      }
    }

    /// <summary>Field number for the "fee_base_msat" field.</summary>
    public const int FeeBaseMsatFieldNumber = 3;
    private long feeBaseMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeBaseMsat {
      get { return feeBaseMsat_; }
      set {
        feeBaseMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate_milli_msat" field.</summary>
    public const int FeeRateMilliMsatFieldNumber = 4;
    private long feeRateMilliMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeRateMilliMsat {
      get { return feeRateMilliMsat_; }
      set {
        feeRateMilliMsat_ = value;
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 5;
    private bool disabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "max_htlc_msat" field.</summary>
    public const int MaxHtlcMsatFieldNumber = 6;
    private ulong maxHtlcMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxHtlcMsat {
      get { return maxHtlcMsat_; }
      set {
        maxHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 7;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (MinHtlc != other.MinHtlc) return false;
      if (FeeBaseMsat != other.FeeBaseMsat) return false;
      if (FeeRateMilliMsat != other.FeeRateMilliMsat) return false;
      if (Disabled != other.Disabled) return false;
      if (MaxHtlcMsat != other.MaxHtlcMsat) return false;
      if (LastUpdate != other.LastUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (MinHtlc != 0L) hash ^= MinHtlc.GetHashCode();
      if (FeeBaseMsat != 0L) hash ^= FeeBaseMsat.GetHashCode();
      if (FeeRateMilliMsat != 0L) hash ^= FeeRateMilliMsat.GetHashCode();
      if (Disabled != false) hash ^= Disabled.GetHashCode();
      if (MaxHtlcMsat != 0UL) hash ^= MaxHtlcMsat.GetHashCode();
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TimeLockDelta != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeRateMilliMsat);
      }
      if (Disabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Disabled);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TimeLockDelta != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeRateMilliMsat);
      }
      if (Disabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Disabled);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeRateMilliMsat);
      }
      if (Disabled != false) {
        size += 1 + 1;
      }
      if (MaxHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxHtlcMsat);
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.MinHtlc != 0L) {
        MinHtlc = other.MinHtlc;
      }
      if (other.FeeBaseMsat != 0L) {
        FeeBaseMsat = other.FeeBaseMsat;
      }
      if (other.FeeRateMilliMsat != 0L) {
        FeeRateMilliMsat = other.FeeRateMilliMsat;
      }
      if (other.Disabled != false) {
        Disabled = other.Disabled;
      }
      if (other.MaxHtlcMsat != 0UL) {
        MaxHtlcMsat = other.MaxHtlcMsat;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 16: {
            MinHtlc = input.ReadInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadInt64();
            break;
          }
          case 32: {
            FeeRateMilliMsat = input.ReadInt64();
            break;
          }
          case 40: {
            Disabled = input.ReadBool();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            LastUpdate = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 16: {
            MinHtlc = input.ReadInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadInt64();
            break;
          }
          case 32: {
            FeeRateMilliMsat = input.ReadInt64();
            break;
          }
          case 40: {
            Disabled = input.ReadBool();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            LastUpdate = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///
  ///A fully authenticated channel along with all its unique attributes.
  ///Once an authenticated channel announcement has been processed on the network,
  ///then an instance of ChannelEdgeInfo encapsulating the channels attributes is
  ///stored. The other portions relevant to routing policy of a channel are stored
  ///within a ChannelEdgePolicy for each direction of the channel.
  /// </summary>
  public sealed partial class ChannelEdge : pb::IMessage<ChannelEdge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelEdge> _parser = new pb::MessageParser<ChannelEdge>(() => new ChannelEdge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge(ChannelEdge other) : this() {
      channelId_ = other.channelId_;
      chanPoint_ = other.chanPoint_;
      lastUpdate_ = other.lastUpdate_;
      node1Pub_ = other.node1Pub_;
      node2Pub_ = other.node2Pub_;
      capacity_ = other.capacity_;
      node1Policy_ = other.node1Policy_ != null ? other.node1Policy_.Clone() : null;
      node2Policy_ = other.node2Policy_ != null ? other.node2Policy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge Clone() {
      return new ChannelEdge(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private ulong channelId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private string chanPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 3;
    private uint lastUpdate_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "node1_pub" field.</summary>
    public const int Node1PubFieldNumber = 4;
    private string node1Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node1Pub {
      get { return node1Pub_; }
      set {
        node1Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node2_pub" field.</summary>
    public const int Node2PubFieldNumber = 5;
    private string node2Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node2Pub {
      get { return node2Pub_; }
      set {
        node2Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "node1_policy" field.</summary>
    public const int Node1PolicyFieldNumber = 7;
    private global::Lnrpc.RoutingPolicy node1Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node1Policy {
      get { return node1Policy_; }
      set {
        node1Policy_ = value;
      }
    }

    /// <summary>Field number for the "node2_policy" field.</summary>
    public const int Node2PolicyFieldNumber = 8;
    private global::Lnrpc.RoutingPolicy node2Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node2Policy {
      get { return node2Policy_; }
      set {
        node2Policy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (ChanPoint != other.ChanPoint) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (Node1Pub != other.Node1Pub) return false;
      if (Node2Pub != other.Node2Pub) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(Node1Policy, other.Node1Policy)) return false;
      if (!object.Equals(Node2Policy, other.Node2Policy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (ChanPoint.Length != 0) hash ^= ChanPoint.GetHashCode();
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (Node1Pub.Length != 0) hash ^= Node1Pub.GetHashCode();
      if (Node2Pub.Length != 0) hash ^= Node2Pub.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (node1Policy_ != null) hash ^= Node1Policy.GetHashCode();
      if (node2Policy_ != null) hash ^= Node2Policy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChanPoint);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Node2Pub);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (node1Policy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Node1Policy);
      }
      if (node2Policy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Node2Policy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChanPoint);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Node2Pub);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (node1Policy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Node1Policy);
      }
      if (node2Policy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Node2Policy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanPoint);
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node2Pub);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (node1Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node1Policy);
      }
      if (node2Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node2Policy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdge other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.ChanPoint.Length != 0) {
        ChanPoint = other.ChanPoint;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.Node1Pub.Length != 0) {
        Node1Pub = other.Node1Pub;
      }
      if (other.Node2Pub.Length != 0) {
        Node2Pub = other.Node2Pub;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.node1Policy_ != null) {
        if (node1Policy_ == null) {
          Node1Policy = new global::Lnrpc.RoutingPolicy();
        }
        Node1Policy.MergeFrom(other.Node1Policy);
      }
      if (other.node2Policy_ != null) {
        if (node2Policy_ == null) {
          Node2Policy = new global::Lnrpc.RoutingPolicy();
        }
        Node2Policy.MergeFrom(other.Node2Policy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 18: {
            ChanPoint = input.ReadString();
            break;
          }
          case 24: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 34: {
            Node1Pub = input.ReadString();
            break;
          }
          case 42: {
            Node2Pub = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 58: {
            if (node1Policy_ == null) {
              Node1Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node1Policy);
            break;
          }
          case 66: {
            if (node2Policy_ == null) {
              Node2Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node2Policy);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 18: {
            ChanPoint = input.ReadString();
            break;
          }
          case 24: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 34: {
            Node1Pub = input.ReadString();
            break;
          }
          case 42: {
            Node2Pub = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 58: {
            if (node1Policy_ == null) {
              Node1Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node1Policy);
            break;
          }
          case 66: {
            if (node2Policy_ == null) {
              Node2Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node2Policy);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelGraphRequest : pb::IMessage<ChannelGraphRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelGraphRequest> _parser = new pb::MessageParser<ChannelGraphRequest>(() => new ChannelGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest(ChannelGraphRequest other) : this() {
      includeUnannounced_ = other.includeUnannounced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest Clone() {
      return new ChannelGraphRequest(this);
    }

    /// <summary>Field number for the "include_unannounced" field.</summary>
    public const int IncludeUnannouncedFieldNumber = 1;
    private bool includeUnannounced_;
    /// <summary>
    ///
    ///Whether unannounced channels are included in the response or not. If set,
    ///unannounced channels are included. Unannounced channels are both private
    ///channels, and public channels that are not yet announced to the network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeUnannounced {
      get { return includeUnannounced_; }
      set {
        includeUnannounced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeUnannounced != other.IncludeUnannounced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeUnannounced != false) hash ^= IncludeUnannounced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IncludeUnannounced != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeUnannounced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IncludeUnannounced != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeUnannounced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeUnannounced != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeUnannounced != false) {
        IncludeUnannounced = other.IncludeUnannounced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncludeUnannounced = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IncludeUnannounced = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Returns a new instance of the directed channel graph.
  /// </summary>
  public sealed partial class ChannelGraph : pb::IMessage<ChannelGraph>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelGraph> _parser = new pb::MessageParser<ChannelGraph>(() => new ChannelGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph(ChannelGraph other) : this() {
      nodes_ = other.nodes_.Clone();
      edges_ = other.edges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph Clone() {
      return new ChannelGraph(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.LightningNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.LightningNode.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.LightningNode> nodes_ = new pbc::RepeatedField<global::Lnrpc.LightningNode>();
    /// <summary>
    /// The list of `LightningNode`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.LightningNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdge> _repeated_edges_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdge.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdge> edges_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdge>();
    /// <summary>
    /// The list of `ChannelEdge`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdge> Edges {
      get { return edges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!edges_.Equals(other.edges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      hash ^= edges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      nodes_.WriteTo(output, _repeated_nodes_codec);
      edges_.WriteTo(output, _repeated_edges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      nodes_.WriteTo(ref output, _repeated_nodes_codec);
      edges_.WriteTo(ref output, _repeated_edges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += edges_.CalculateSize(_repeated_edges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraph other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      edges_.Add(other.edges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            edges_.AddEntriesFrom(input, _repeated_edges_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(ref input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            edges_.AddEntriesFrom(ref input, _repeated_edges_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeMetricsRequest : pb::IMessage<NodeMetricsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeMetricsRequest> _parser = new pb::MessageParser<NodeMetricsRequest>(() => new NodeMetricsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeMetricsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsRequest(NodeMetricsRequest other) : this() {
      types_ = other.types_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsRequest Clone() {
      return new NodeMetricsRequest(this);
    }

    /// <summary>Field number for the "types" field.</summary>
    public const int Types_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeMetricType> _repeated_types_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Lnrpc.NodeMetricType) x);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeMetricType> types_ = new pbc::RepeatedField<global::Lnrpc.NodeMetricType>();
    /// <summary>
    /// The requested node metrics.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeMetricType> Types_ {
      get { return types_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeMetricsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeMetricsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!types_.Equals(other.types_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= types_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      types_.WriteTo(output, _repeated_types_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      types_.WriteTo(ref output, _repeated_types_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += types_.CalculateSize(_repeated_types_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeMetricsRequest other) {
      if (other == null) {
        return;
      }
      types_.Add(other.types_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            types_.AddEntriesFrom(input, _repeated_types_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            types_.AddEntriesFrom(ref input, _repeated_types_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeMetricsResponse : pb::IMessage<NodeMetricsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeMetricsResponse> _parser = new pb::MessageParser<NodeMetricsResponse>(() => new NodeMetricsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeMetricsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsResponse(NodeMetricsResponse other) : this() {
      betweennessCentrality_ = other.betweennessCentrality_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeMetricsResponse Clone() {
      return new NodeMetricsResponse(this);
    }

    /// <summary>Field number for the "betweenness_centrality" field.</summary>
    public const int BetweennessCentralityFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Lnrpc.FloatMetric>.Codec _map_betweennessCentrality_codec
        = new pbc::MapField<string, global::Lnrpc.FloatMetric>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Lnrpc.FloatMetric.Parser), 10);
    private readonly pbc::MapField<string, global::Lnrpc.FloatMetric> betweennessCentrality_ = new pbc::MapField<string, global::Lnrpc.FloatMetric>();
    /// <summary>
    ///
    ///Betweenness centrality is the sum of the ratio of shortest paths that pass
    ///through the node for each pair of nodes in the graph (not counting paths
    ///starting or ending at this node).
    ///Map of node pubkey to betweenness centrality of the node. Normalized
    ///values are in the [0,1] closed interval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Lnrpc.FloatMetric> BetweennessCentrality {
      get { return betweennessCentrality_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeMetricsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeMetricsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!BetweennessCentrality.Equals(other.BetweennessCentrality)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= BetweennessCentrality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      betweennessCentrality_.WriteTo(output, _map_betweennessCentrality_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      betweennessCentrality_.WriteTo(ref output, _map_betweennessCentrality_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += betweennessCentrality_.CalculateSize(_map_betweennessCentrality_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeMetricsResponse other) {
      if (other == null) {
        return;
      }
      betweennessCentrality_.Add(other.betweennessCentrality_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            betweennessCentrality_.AddEntriesFrom(input, _map_betweennessCentrality_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            betweennessCentrality_.AddEntriesFrom(ref input, _map_betweennessCentrality_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FloatMetric : pb::IMessage<FloatMetric>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FloatMetric> _parser = new pb::MessageParser<FloatMetric>(() => new FloatMetric());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FloatMetric> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMetric() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMetric(FloatMetric other) : this() {
      value_ = other.value_;
      normalizedValue_ = other.normalizedValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FloatMetric Clone() {
      return new FloatMetric(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    /// <summary>
    /// Arbitrary float value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "normalized_value" field.</summary>
    public const int NormalizedValueFieldNumber = 2;
    private double normalizedValue_;
    /// <summary>
    /// The value normalized to [0,1] or [-1,1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double NormalizedValue {
      get { return normalizedValue_; }
      set {
        normalizedValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FloatMetric);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FloatMetric other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(NormalizedValue, other.NormalizedValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (NormalizedValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(NormalizedValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (NormalizedValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(NormalizedValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (NormalizedValue != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(NormalizedValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (NormalizedValue != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FloatMetric other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.NormalizedValue != 0D) {
        NormalizedValue = other.NormalizedValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 17: {
            NormalizedValue = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 17: {
            NormalizedValue = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChanInfoRequest : pb::IMessage<ChanInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChanInfoRequest> _parser = new pb::MessageParser<ChanInfoRequest>(() => new ChanInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest(ChanInfoRequest other) : this() {
      chanId_ = other.chanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest Clone() {
      return new ChanInfoRequest(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NetworkInfoRequest : pb::IMessage<NetworkInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NetworkInfoRequest> _parser = new pb::MessageParser<NetworkInfoRequest>(() => new NetworkInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest(NetworkInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest Clone() {
      return new NetworkInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      graphDiameter_ = other.graphDiameter_;
      avgOutDegree_ = other.avgOutDegree_;
      maxOutDegree_ = other.maxOutDegree_;
      numNodes_ = other.numNodes_;
      numChannels_ = other.numChannels_;
      totalNetworkCapacity_ = other.totalNetworkCapacity_;
      avgChannelSize_ = other.avgChannelSize_;
      minChannelSize_ = other.minChannelSize_;
      maxChannelSize_ = other.maxChannelSize_;
      medianChannelSizeSat_ = other.medianChannelSizeSat_;
      numZombieChans_ = other.numZombieChans_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "graph_diameter" field.</summary>
    public const int GraphDiameterFieldNumber = 1;
    private uint graphDiameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GraphDiameter {
      get { return graphDiameter_; }
      set {
        graphDiameter_ = value;
      }
    }

    /// <summary>Field number for the "avg_out_degree" field.</summary>
    public const int AvgOutDegreeFieldNumber = 2;
    private double avgOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgOutDegree {
      get { return avgOutDegree_; }
      set {
        avgOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "max_out_degree" field.</summary>
    public const int MaxOutDegreeFieldNumber = 3;
    private uint maxOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxOutDegree {
      get { return maxOutDegree_; }
      set {
        maxOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "num_nodes" field.</summary>
    public const int NumNodesFieldNumber = 4;
    private uint numNodes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNodes {
      get { return numNodes_; }
      set {
        numNodes_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 5;
    private uint numChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_network_capacity" field.</summary>
    public const int TotalNetworkCapacityFieldNumber = 6;
    private long totalNetworkCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalNetworkCapacity {
      get { return totalNetworkCapacity_; }
      set {
        totalNetworkCapacity_ = value;
      }
    }

    /// <summary>Field number for the "avg_channel_size" field.</summary>
    public const int AvgChannelSizeFieldNumber = 7;
    private double avgChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgChannelSize {
      get { return avgChannelSize_; }
      set {
        avgChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "min_channel_size" field.</summary>
    public const int MinChannelSizeFieldNumber = 8;
    private long minChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinChannelSize {
      get { return minChannelSize_; }
      set {
        minChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "max_channel_size" field.</summary>
    public const int MaxChannelSizeFieldNumber = 9;
    private long maxChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxChannelSize {
      get { return maxChannelSize_; }
      set {
        maxChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "median_channel_size_sat" field.</summary>
    public const int MedianChannelSizeSatFieldNumber = 10;
    private long medianChannelSizeSat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MedianChannelSizeSat {
      get { return medianChannelSizeSat_; }
      set {
        medianChannelSizeSat_ = value;
      }
    }

    /// <summary>Field number for the "num_zombie_chans" field.</summary>
    public const int NumZombieChansFieldNumber = 11;
    private ulong numZombieChans_;
    /// <summary>
    /// The number of edges marked as zombies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumZombieChans {
      get { return numZombieChans_; }
      set {
        numZombieChans_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphDiameter != other.GraphDiameter) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgOutDegree, other.AvgOutDegree)) return false;
      if (MaxOutDegree != other.MaxOutDegree) return false;
      if (NumNodes != other.NumNodes) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalNetworkCapacity != other.TotalNetworkCapacity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgChannelSize, other.AvgChannelSize)) return false;
      if (MinChannelSize != other.MinChannelSize) return false;
      if (MaxChannelSize != other.MaxChannelSize) return false;
      if (MedianChannelSizeSat != other.MedianChannelSizeSat) return false;
      if (NumZombieChans != other.NumZombieChans) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphDiameter != 0) hash ^= GraphDiameter.GetHashCode();
      if (AvgOutDegree != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgOutDegree);
      if (MaxOutDegree != 0) hash ^= MaxOutDegree.GetHashCode();
      if (NumNodes != 0) hash ^= NumNodes.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalNetworkCapacity != 0L) hash ^= TotalNetworkCapacity.GetHashCode();
      if (AvgChannelSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgChannelSize);
      if (MinChannelSize != 0L) hash ^= MinChannelSize.GetHashCode();
      if (MaxChannelSize != 0L) hash ^= MaxChannelSize.GetHashCode();
      if (MedianChannelSizeSat != 0L) hash ^= MedianChannelSizeSat.GetHashCode();
      if (NumZombieChans != 0UL) hash ^= NumZombieChans.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GraphDiameter != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AvgOutDegree);
      }
      if (MaxOutDegree != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxOutDegree);
      }
      if (NumNodes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumNodes);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AvgChannelSize);
      }
      if (MinChannelSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MaxChannelSize);
      }
      if (MedianChannelSizeSat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MedianChannelSizeSat);
      }
      if (NumZombieChans != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(NumZombieChans);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GraphDiameter != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AvgOutDegree);
      }
      if (MaxOutDegree != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxOutDegree);
      }
      if (NumNodes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumNodes);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AvgChannelSize);
      }
      if (MinChannelSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MaxChannelSize);
      }
      if (MedianChannelSizeSat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MedianChannelSizeSat);
      }
      if (NumZombieChans != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(NumZombieChans);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphDiameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        size += 1 + 8;
      }
      if (MaxOutDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxOutDegree);
      }
      if (NumNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNodes);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        size += 1 + 8;
      }
      if (MinChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxChannelSize);
      }
      if (MedianChannelSizeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MedianChannelSizeSat);
      }
      if (NumZombieChans != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumZombieChans);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.GraphDiameter != 0) {
        GraphDiameter = other.GraphDiameter;
      }
      if (other.AvgOutDegree != 0D) {
        AvgOutDegree = other.AvgOutDegree;
      }
      if (other.MaxOutDegree != 0) {
        MaxOutDegree = other.MaxOutDegree;
      }
      if (other.NumNodes != 0) {
        NumNodes = other.NumNodes;
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalNetworkCapacity != 0L) {
        TotalNetworkCapacity = other.TotalNetworkCapacity;
      }
      if (other.AvgChannelSize != 0D) {
        AvgChannelSize = other.AvgChannelSize;
      }
      if (other.MinChannelSize != 0L) {
        MinChannelSize = other.MinChannelSize;
      }
      if (other.MaxChannelSize != 0L) {
        MaxChannelSize = other.MaxChannelSize;
      }
      if (other.MedianChannelSizeSat != 0L) {
        MedianChannelSizeSat = other.MedianChannelSizeSat;
      }
      if (other.NumZombieChans != 0UL) {
        NumZombieChans = other.NumZombieChans;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GraphDiameter = input.ReadUInt32();
            break;
          }
          case 17: {
            AvgOutDegree = input.ReadDouble();
            break;
          }
          case 24: {
            MaxOutDegree = input.ReadUInt32();
            break;
          }
          case 32: {
            NumNodes = input.ReadUInt32();
            break;
          }
          case 40: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalNetworkCapacity = input.ReadInt64();
            break;
          }
          case 57: {
            AvgChannelSize = input.ReadDouble();
            break;
          }
          case 64: {
            MinChannelSize = input.ReadInt64();
            break;
          }
          case 72: {
            MaxChannelSize = input.ReadInt64();
            break;
          }
          case 80: {
            MedianChannelSizeSat = input.ReadInt64();
            break;
          }
          case 88: {
            NumZombieChans = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GraphDiameter = input.ReadUInt32();
            break;
          }
          case 17: {
            AvgOutDegree = input.ReadDouble();
            break;
          }
          case 24: {
            MaxOutDegree = input.ReadUInt32();
            break;
          }
          case 32: {
            NumNodes = input.ReadUInt32();
            break;
          }
          case 40: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalNetworkCapacity = input.ReadInt64();
            break;
          }
          case 57: {
            AvgChannelSize = input.ReadDouble();
            break;
          }
          case 64: {
            MinChannelSize = input.ReadInt64();
            break;
          }
          case 72: {
            MaxChannelSize = input.ReadInt64();
            break;
          }
          case 80: {
            MedianChannelSizeSat = input.ReadInt64();
            break;
          }
          case 88: {
            NumZombieChans = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class StopRequest : pb::IMessage<StopRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopRequest> _parser = new pb::MessageParser<StopRequest>(() => new StopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest(StopRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest Clone() {
      return new StopRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class StopResponse : pb::IMessage<StopResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<StopResponse> _parser = new pb::MessageParser<StopResponse>(() => new StopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse(StopResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse Clone() {
      return new StopResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GraphTopologySubscription : pb::IMessage<GraphTopologySubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GraphTopologySubscription> _parser = new pb::MessageParser<GraphTopologySubscription>(() => new GraphTopologySubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologySubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription(GraphTopologySubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription Clone() {
      return new GraphTopologySubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologySubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologySubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologySubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class GraphTopologyUpdate : pb::IMessage<GraphTopologyUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GraphTopologyUpdate> _parser = new pb::MessageParser<GraphTopologyUpdate>(() => new GraphTopologyUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologyUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate(GraphTopologyUpdate other) : this() {
      nodeUpdates_ = other.nodeUpdates_.Clone();
      channelUpdates_ = other.channelUpdates_.Clone();
      closedChans_ = other.closedChans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate Clone() {
      return new GraphTopologyUpdate(this);
    }

    /// <summary>Field number for the "node_updates" field.</summary>
    public const int NodeUpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeUpdate> _repeated_nodeUpdates_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.NodeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeUpdate> nodeUpdates_ = new pbc::RepeatedField<global::Lnrpc.NodeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeUpdate> NodeUpdates {
      get { return nodeUpdates_; }
    }

    /// <summary>Field number for the "channel_updates" field.</summary>
    public const int ChannelUpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdgeUpdate> _repeated_channelUpdates_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdgeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> channelUpdates_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> ChannelUpdates {
      get { return channelUpdates_; }
    }

    /// <summary>Field number for the "closed_chans" field.</summary>
    public const int ClosedChansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.ClosedChannelUpdate> _repeated_closedChans_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.ClosedChannelUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> closedChans_ = new pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> ClosedChans {
      get { return closedChans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologyUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologyUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeUpdates_.Equals(other.nodeUpdates_)) return false;
      if(!channelUpdates_.Equals(other.channelUpdates_)) return false;
      if(!closedChans_.Equals(other.closedChans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeUpdates_.GetHashCode();
      hash ^= channelUpdates_.GetHashCode();
      hash ^= closedChans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      nodeUpdates_.WriteTo(output, _repeated_nodeUpdates_codec);
      channelUpdates_.WriteTo(output, _repeated_channelUpdates_codec);
      closedChans_.WriteTo(output, _repeated_closedChans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      nodeUpdates_.WriteTo(ref output, _repeated_nodeUpdates_codec);
      channelUpdates_.WriteTo(ref output, _repeated_channelUpdates_codec);
      closedChans_.WriteTo(ref output, _repeated_closedChans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeUpdates_.CalculateSize(_repeated_nodeUpdates_codec);
      size += channelUpdates_.CalculateSize(_repeated_channelUpdates_codec);
      size += closedChans_.CalculateSize(_repeated_closedChans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologyUpdate other) {
      if (other == null) {
        return;
      }
      nodeUpdates_.Add(other.nodeUpdates_);
      channelUpdates_.Add(other.channelUpdates_);
      closedChans_.Add(other.closedChans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeUpdates_.AddEntriesFrom(input, _repeated_nodeUpdates_codec);
            break;
          }
          case 18: {
            channelUpdates_.AddEntriesFrom(input, _repeated_channelUpdates_codec);
            break;
          }
          case 26: {
            closedChans_.AddEntriesFrom(input, _repeated_closedChans_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            nodeUpdates_.AddEntriesFrom(ref input, _repeated_nodeUpdates_codec);
            break;
          }
          case 18: {
            channelUpdates_.AddEntriesFrom(ref input, _repeated_channelUpdates_codec);
            break;
          }
          case 26: {
            closedChans_.AddEntriesFrom(ref input, _repeated_closedChans_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class NodeUpdate : pb::IMessage<NodeUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NodeUpdate> _parser = new pb::MessageParser<NodeUpdate>(() => new NodeUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate(NodeUpdate other) : this() {
      addresses_ = other.addresses_.Clone();
      identityKey_ = other.identityKey_;
      globalFeatures_ = other.globalFeatures_;
      alias_ = other.alias_;
      color_ = other.color_;
      nodeAddresses_ = other.nodeAddresses_.Clone();
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate Clone() {
      return new NodeUpdate(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_addresses_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///
    ///Deprecated, use node_addresses.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "identity_key" field.</summary>
    public const int IdentityKeyFieldNumber = 2;
    private string identityKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityKey {
      get { return identityKey_; }
      set {
        identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global_features" field.</summary>
    public const int GlobalFeaturesFieldNumber = 3;
    private pb::ByteString globalFeatures_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///Deprecated, use features.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlobalFeatures {
      get { return globalFeatures_; }
      set {
        globalFeatures_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 4;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_addresses" field.</summary>
    public const int NodeAddressesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeAddress> _repeated_nodeAddresses_codec
        = pb::FieldCodec.ForMessage(58, global::Lnrpc.NodeAddress.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeAddress> nodeAddresses_ = new pbc::RepeatedField<global::Lnrpc.NodeAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeAddress> NodeAddresses {
      get { return nodeAddresses_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 6;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 50);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    ///
    ///Features that the node has advertised in the init message, node
    ///announcements and invoices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      if (IdentityKey != other.IdentityKey) return false;
      if (GlobalFeatures != other.GlobalFeatures) return false;
      if (Alias != other.Alias) return false;
      if (Color != other.Color) return false;
      if(!nodeAddresses_.Equals(other.nodeAddresses_)) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      if (IdentityKey.Length != 0) hash ^= IdentityKey.GetHashCode();
      if (GlobalFeatures.Length != 0) hash ^= GlobalFeatures.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      hash ^= nodeAddresses_.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Alias);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      features_.WriteTo(output, _map_features_codec);
      nodeAddresses_.WriteTo(output, _repeated_nodeAddresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      addresses_.WriteTo(ref output, _repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Alias);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      features_.WriteTo(ref output, _map_features_codec);
      nodeAddresses_.WriteTo(ref output, _repeated_nodeAddresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      size += nodeAddresses_.CalculateSize(_repeated_nodeAddresses_codec);
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeUpdate other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
      if (other.IdentityKey.Length != 0) {
        IdentityKey = other.IdentityKey;
      }
      if (other.GlobalFeatures.Length != 0) {
        GlobalFeatures = other.GlobalFeatures;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      nodeAddresses_.Add(other.nodeAddresses_);
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 18: {
            IdentityKey = input.ReadString();
            break;
          }
          case 26: {
            GlobalFeatures = input.ReadBytes();
            break;
          }
          case 34: {
            Alias = input.ReadString();
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
          case 58: {
            nodeAddresses_.AddEntriesFrom(input, _repeated_nodeAddresses_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            addresses_.AddEntriesFrom(ref input, _repeated_addresses_codec);
            break;
          }
          case 18: {
            IdentityKey = input.ReadString();
            break;
          }
          case 26: {
            GlobalFeatures = input.ReadBytes();
            break;
          }
          case 34: {
            Alias = input.ReadString();
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
          case 58: {
            nodeAddresses_.AddEntriesFrom(ref input, _repeated_nodeAddresses_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelEdgeUpdate : pb::IMessage<ChannelEdgeUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelEdgeUpdate> _parser = new pb::MessageParser<ChannelEdgeUpdate>(() => new ChannelEdgeUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdgeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate(ChannelEdgeUpdate other) : this() {
      chanId_ = other.chanId_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      capacity_ = other.capacity_;
      routingPolicy_ = other.routingPolicy_ != null ? other.routingPolicy_.Clone() : null;
      advertisingNode_ = other.advertisingNode_;
      connectingNode_ = other.connectingNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate Clone() {
      return new ChannelEdgeUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 3;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "routing_policy" field.</summary>
    public const int RoutingPolicyFieldNumber = 4;
    private global::Lnrpc.RoutingPolicy routingPolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy RoutingPolicy {
      get { return routingPolicy_; }
      set {
        routingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "advertising_node" field.</summary>
    public const int AdvertisingNodeFieldNumber = 5;
    private string advertisingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdvertisingNode {
      get { return advertisingNode_; }
      set {
        advertisingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connecting_node" field.</summary>
    public const int ConnectingNodeFieldNumber = 6;
    private string connectingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectingNode {
      get { return connectingNode_; }
      set {
        connectingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdgeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdgeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(RoutingPolicy, other.RoutingPolicy)) return false;
      if (AdvertisingNode != other.AdvertisingNode) return false;
      if (ConnectingNode != other.ConnectingNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (routingPolicy_ != null) hash ^= RoutingPolicy.GetHashCode();
      if (AdvertisingNode.Length != 0) hash ^= AdvertisingNode.GetHashCode();
      if (ConnectingNode.Length != 0) hash ^= ConnectingNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Capacity);
      }
      if (routingPolicy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConnectingNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Capacity);
      }
      if (routingPolicy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConnectingNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (routingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectingNode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdgeUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.routingPolicy_ != null) {
        if (routingPolicy_ == null) {
          RoutingPolicy = new global::Lnrpc.RoutingPolicy();
        }
        RoutingPolicy.MergeFrom(other.RoutingPolicy);
      }
      if (other.AdvertisingNode.Length != 0) {
        AdvertisingNode = other.AdvertisingNode;
      }
      if (other.ConnectingNode.Length != 0) {
        ConnectingNode = other.ConnectingNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 24: {
            Capacity = input.ReadInt64();
            break;
          }
          case 34: {
            if (routingPolicy_ == null) {
              RoutingPolicy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(RoutingPolicy);
            break;
          }
          case 42: {
            AdvertisingNode = input.ReadString();
            break;
          }
          case 50: {
            ConnectingNode = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 24: {
            Capacity = input.ReadInt64();
            break;
          }
          case 34: {
            if (routingPolicy_ == null) {
              RoutingPolicy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(RoutingPolicy);
            break;
          }
          case 42: {
            AdvertisingNode = input.ReadString();
            break;
          }
          case 50: {
            ConnectingNode = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ClosedChannelUpdate : pb::IMessage<ClosedChannelUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ClosedChannelUpdate> _parser = new pb::MessageParser<ClosedChannelUpdate>(() => new ClosedChannelUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate(ClosedChannelUpdate other) : this() {
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      closedHeight_ = other.closedHeight_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate Clone() {
      return new ClosedChannelUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "closed_height" field.</summary>
    public const int ClosedHeightFieldNumber = 3;
    private uint closedHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClosedHeight {
      get { return closedHeight_; }
      set {
        closedHeight_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 4;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (ClosedHeight != other.ClosedHeight) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (ClosedHeight != 0) hash ^= ClosedHeight.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Capacity);
      }
      if (ClosedHeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClosedHeight);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Capacity);
      }
      if (ClosedHeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClosedHeight);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (ClosedHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClosedHeight);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.ClosedHeight != 0) {
        ClosedHeight = other.ClosedHeight;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            Capacity = input.ReadInt64();
            break;
          }
          case 24: {
            ClosedHeight = input.ReadUInt32();
            break;
          }
          case 34: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            Capacity = input.ReadInt64();
            break;
          }
          case 24: {
            ClosedHeight = input.ReadUInt32();
            break;
          }
          case 34: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HopHint : pb::IMessage<HopHint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HopHint> _parser = new pb::MessageParser<HopHint>(() => new HopHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HopHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint(HopHint other) : this() {
      nodeId_ = other.nodeId_;
      chanId_ = other.chanId_;
      feeBaseMsat_ = other.feeBaseMsat_;
      feeProportionalMillionths_ = other.feeProportionalMillionths_;
      cltvExpiryDelta_ = other.cltvExpiryDelta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint Clone() {
      return new HopHint(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    /// <summary>
    /// The public key of the node at the start of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 2;
    private ulong chanId_;
    /// <summary>
    /// The unique identifier of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "fee_base_msat" field.</summary>
    public const int FeeBaseMsatFieldNumber = 3;
    private uint feeBaseMsat_;
    /// <summary>
    /// The base fee of the channel denominated in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeBaseMsat {
      get { return feeBaseMsat_; }
      set {
        feeBaseMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_proportional_millionths" field.</summary>
    public const int FeeProportionalMillionthsFieldNumber = 4;
    private uint feeProportionalMillionths_;
    /// <summary>
    ///
    ///The fee rate of the channel for sending one satoshi across it denominated in
    ///millionths of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeProportionalMillionths {
      get { return feeProportionalMillionths_; }
      set {
        feeProportionalMillionths_ = value;
      }
    }

    /// <summary>Field number for the "cltv_expiry_delta" field.</summary>
    public const int CltvExpiryDeltaFieldNumber = 5;
    private uint cltvExpiryDelta_;
    /// <summary>
    /// The time-lock delta of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvExpiryDelta {
      get { return cltvExpiryDelta_; }
      set {
        cltvExpiryDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HopHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HopHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (ChanId != other.ChanId) return false;
      if (FeeBaseMsat != other.FeeBaseMsat) return false;
      if (FeeProportionalMillionths != other.FeeProportionalMillionths) return false;
      if (CltvExpiryDelta != other.CltvExpiryDelta) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (FeeBaseMsat != 0) hash ^= FeeBaseMsat.GetHashCode();
      if (FeeProportionalMillionths != 0) hash ^= FeeProportionalMillionths.GetHashCode();
      if (CltvExpiryDelta != 0) hash ^= CltvExpiryDelta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (FeeBaseMsat != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FeeBaseMsat);
      }
      if (FeeProportionalMillionths != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FeeProportionalMillionths);
      }
      if (CltvExpiryDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CltvExpiryDelta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (FeeBaseMsat != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FeeBaseMsat);
      }
      if (FeeProportionalMillionths != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FeeProportionalMillionths);
      }
      if (CltvExpiryDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CltvExpiryDelta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (FeeBaseMsat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeBaseMsat);
      }
      if (FeeProportionalMillionths != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeProportionalMillionths);
      }
      if (CltvExpiryDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvExpiryDelta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HopHint other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.FeeBaseMsat != 0) {
        FeeBaseMsat = other.FeeBaseMsat;
      }
      if (other.FeeProportionalMillionths != 0) {
        FeeProportionalMillionths = other.FeeProportionalMillionths;
      }
      if (other.CltvExpiryDelta != 0) {
        CltvExpiryDelta = other.CltvExpiryDelta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadUInt32();
            break;
          }
          case 32: {
            FeeProportionalMillionths = input.ReadUInt32();
            break;
          }
          case 40: {
            CltvExpiryDelta = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadUInt32();
            break;
          }
          case 32: {
            FeeProportionalMillionths = input.ReadUInt32();
            break;
          }
          case 40: {
            CltvExpiryDelta = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RouteHint : pb::IMessage<RouteHint>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RouteHint> _parser = new pb::MessageParser<RouteHint>(() => new RouteHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint(RouteHint other) : this() {
      hopHints_ = other.hopHints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint Clone() {
      return new RouteHint(this);
    }

    /// <summary>Field number for the "hop_hints" field.</summary>
    public const int HopHintsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.HopHint> _repeated_hopHints_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.HopHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HopHint> hopHints_ = new pbc::RepeatedField<global::Lnrpc.HopHint>();
    /// <summary>
    ///
    ///A list of hop hints that when chained together can assist in reaching a
    ///specific destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HopHint> HopHints {
      get { return hopHints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hopHints_.Equals(other.hopHints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hopHints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      hopHints_.WriteTo(output, _repeated_hopHints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      hopHints_.WriteTo(ref output, _repeated_hopHints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hopHints_.CalculateSize(_repeated_hopHints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteHint other) {
      if (other == null) {
        return;
      }
      hopHints_.Add(other.hopHints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hopHints_.AddEntriesFrom(input, _repeated_hopHints_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            hopHints_.AddEntriesFrom(ref input, _repeated_hopHints_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Invoice : pb::IMessage<Invoice>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Invoice> _parser = new pb::MessageParser<Invoice>(() => new Invoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice(Invoice other) : this() {
      memo_ = other.memo_;
      rPreimage_ = other.rPreimage_;
      rHash_ = other.rHash_;
      value_ = other.value_;
      valueMsat_ = other.valueMsat_;
      settled_ = other.settled_;
      creationDate_ = other.creationDate_;
      settleDate_ = other.settleDate_;
      paymentRequest_ = other.paymentRequest_;
      descriptionHash_ = other.descriptionHash_;
      expiry_ = other.expiry_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
      routeHints_ = other.routeHints_.Clone();
      private_ = other.private_;
      addIndex_ = other.addIndex_;
      settleIndex_ = other.settleIndex_;
      amtPaid_ = other.amtPaid_;
      amtPaidSat_ = other.amtPaidSat_;
      amtPaidMsat_ = other.amtPaidMsat_;
      state_ = other.state_;
      htlcs_ = other.htlcs_.Clone();
      features_ = other.features_.Clone();
      isKeysend_ = other.isKeysend_;
      paymentAddr_ = other.paymentAddr_;
      isAmp_ = other.isAmp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice Clone() {
      return new Invoice(this);
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 1;
    private string memo_ = "";
    /// <summary>
    ///
    ///An optional memo to attach along with the invoice. Used for record keeping
    ///purposes for the invoice's creator, and will also be set in the description
    ///field of the encoded payment request if the description_hash field is not
    ///being used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_preimage" field.</summary>
    public const int RPreimageFieldNumber = 3;
    private pb::ByteString rPreimage_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The hex-encoded preimage (32 byte) which will allow settling an incoming
    ///HTLC payable to this preimage. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RPreimage {
      get { return rPreimage_; }
      set {
        rPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 4;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The hash of the preimage. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private long value_;
    /// <summary>
    ///
    ///The value of this invoice in satoshis
    ///
    ///The fields value and value_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_msat" field.</summary>
    public const int ValueMsatFieldNumber = 23;
    private long valueMsat_;
    /// <summary>
    ///
    ///The value of this invoice in millisatoshis
    ///
    ///The fields value and value_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueMsat {
      get { return valueMsat_; }
      set {
        valueMsat_ = value;
      }
    }

    /// <summary>Field number for the "settled" field.</summary>
    public const int SettledFieldNumber = 6;
    private bool settled_;
    /// <summary>
    /// Whether this invoice has been fulfilled
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Settled {
      get { return settled_; }
      set {
        settled_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 7;
    private long creationDate_;
    /// <summary>
    /// When this invoice was created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "settle_date" field.</summary>
    public const int SettleDateFieldNumber = 8;
    private long settleDate_;
    /// <summary>
    /// When this invoice was settled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettleDate {
      get { return settleDate_; }
      set {
        settleDate_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 9;
    private string paymentRequest_ = "";
    /// <summary>
    ///
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 10;
    private pb::ByteString descriptionHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///Hash (SHA-256) of a description of the payment. Used if the description of
    ///payment (memo) is too long to naturally fit within the description field
    ///of an encoded payment request. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 11;
    private long expiry_;
    /// <summary>
    /// Payment request expiry time in seconds. Default is 3600 (1 hour).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 12;
    private string fallbackAddr_ = "";
    /// <summary>
    /// Fallback on-chain address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 13;
    private ulong cltvExpiry_;
    /// <summary>
    /// Delta to use for the time-lock of the CLTV extended to the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(114, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///
    ///Route hints that can each be individually used to assist in reaching the
    ///invoice's destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 15;
    private bool private_;
    /// <summary>
    /// Whether this invoice should include routing hints for private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 16;
    private ulong addIndex_;
    /// <summary>
    ///
    ///The "add" index of this invoice. Each newly created invoice will increment
    ///this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all added
    ///invoices with an add_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    /// <summary>Field number for the "settle_index" field.</summary>
    public const int SettleIndexFieldNumber = 17;
    private ulong settleIndex_;
    /// <summary>
    ///
    ///The "settle" index of this invoice. Each newly settled invoice will
    ///increment this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all
    ///settled invoices with an settle_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SettleIndex {
      get { return settleIndex_; }
      set {
        settleIndex_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid" field.</summary>
    public const int AmtPaidFieldNumber = 18;
    private long amtPaid_;
    /// <summary>
    /// Deprecated, use amt_paid_sat or amt_paid_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaid {
      get { return amtPaid_; }
      set {
        amtPaid_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid_sat" field.</summary>
    public const int AmtPaidSatFieldNumber = 19;
    private long amtPaidSat_;
    /// <summary>
    ///
    ///The amount that was accepted for this invoice, in satoshis. This will ONLY
    ///be set if this invoice has been settled. We provide this field as if the
    ///invoice was created with a zero value, then we need to record what amount
    ///was ultimately accepted. Additionally, it's possible that the sender paid
    ///MORE that was specified in the original invoice. So we'll record that here
    ///as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaidSat {
      get { return amtPaidSat_; }
      set {
        amtPaidSat_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid_msat" field.</summary>
    public const int AmtPaidMsatFieldNumber = 20;
    private long amtPaidMsat_;
    /// <summary>
    ///
    ///The amount that was accepted for this invoice, in millisatoshis. This will
    ///ONLY be set if this invoice has been settled. We provide this field as if
    ///the invoice was created with a zero value, then we need to record what
    ///amount was ultimately accepted. Additionally, it's possible that the sender
    ///paid MORE that was specified in the original invoice. So we'll record that
    ///here as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaidMsat {
      get { return amtPaidMsat_; }
      set {
        amtPaidMsat_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 21;
    private global::Lnrpc.Invoice.Types.InvoiceState state_ = global::Lnrpc.Invoice.Types.InvoiceState.Open;
    /// <summary>
    ///
    ///The state the invoice is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Invoice.Types.InvoiceState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Lnrpc.InvoiceHTLC> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(178, global::Lnrpc.InvoiceHTLC.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.InvoiceHTLC> htlcs_ = new pbc::RepeatedField<global::Lnrpc.InvoiceHTLC>();
    /// <summary>
    /// List of HTLCs paying to this invoice [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.InvoiceHTLC> Htlcs {
      get { return htlcs_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 24;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 194);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    /// List of features advertised on the invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "is_keysend" field.</summary>
    public const int IsKeysendFieldNumber = 25;
    private bool isKeysend_;
    /// <summary>
    ///
    ///Indicates if this invoice was a spontaneous payment that arrived via keysend
    ///[EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKeysend {
      get { return isKeysend_; }
      set {
        isKeysend_ = value;
      }
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 26;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The payment address of this invoice. This value will be used in MPP
    ///payments, and also for newer invoies that always require the MPP paylaod
    ///for added end-to-end security.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_amp" field.</summary>
    public const int IsAmpFieldNumber = 27;
    private bool isAmp_;
    /// <summary>
    ///
    ///Signals whether or not this is an AMP invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAmp {
      get { return isAmp_; }
      set {
        isAmp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memo != other.Memo) return false;
      if (RPreimage != other.RPreimage) return false;
      if (RHash != other.RHash) return false;
      if (Value != other.Value) return false;
      if (ValueMsat != other.ValueMsat) return false;
      if (Settled != other.Settled) return false;
      if (CreationDate != other.CreationDate) return false;
      if (SettleDate != other.SettleDate) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (Expiry != other.Expiry) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (Private != other.Private) return false;
      if (AddIndex != other.AddIndex) return false;
      if (SettleIndex != other.SettleIndex) return false;
      if (AmtPaid != other.AmtPaid) return false;
      if (AmtPaidSat != other.AmtPaidSat) return false;
      if (AmtPaidMsat != other.AmtPaidMsat) return false;
      if (State != other.State) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      if (!Features.Equals(other.Features)) return false;
      if (IsKeysend != other.IsKeysend) return false;
      if (PaymentAddr != other.PaymentAddr) return false;
      if (IsAmp != other.IsAmp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (RPreimage.Length != 0) hash ^= RPreimage.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (ValueMsat != 0L) hash ^= ValueMsat.GetHashCode();
      if (Settled != false) hash ^= Settled.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      if (SettleDate != 0L) hash ^= SettleDate.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0UL) hash ^= CltvExpiry.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (SettleIndex != 0UL) hash ^= SettleIndex.GetHashCode();
      if (AmtPaid != 0L) hash ^= AmtPaid.GetHashCode();
      if (AmtPaidSat != 0L) hash ^= AmtPaidSat.GetHashCode();
      if (AmtPaidMsat != 0L) hash ^= AmtPaidMsat.GetHashCode();
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) hash ^= State.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      hash ^= Features.GetHashCode();
      if (IsKeysend != false) hash ^= IsKeysend.GetHashCode();
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (IsAmp != false) hash ^= IsAmp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Memo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Memo);
      }
      if (RPreimage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RPreimage);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Value);
      }
      if (Settled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Settled);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreationDate);
      }
      if (SettleDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DescriptionHash);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CltvExpiry);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      if (Private != false) {
        output.WriteRawTag(120);
        output.WriteBool(Private);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SettleIndex);
      }
      if (AmtPaid != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(AmtPaid);
      }
      if (AmtPaidSat != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AmtPaidSat);
      }
      if (AmtPaidMsat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AmtPaidMsat);
      }
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) State);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (ValueMsat != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(ValueMsat);
      }
      features_.WriteTo(output, _map_features_codec);
      if (IsKeysend != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsKeysend);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (IsAmp != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsAmp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Memo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Memo);
      }
      if (RPreimage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RPreimage);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Value);
      }
      if (Settled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Settled);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreationDate);
      }
      if (SettleDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DescriptionHash);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CltvExpiry);
      }
      routeHints_.WriteTo(ref output, _repeated_routeHints_codec);
      if (Private != false) {
        output.WriteRawTag(120);
        output.WriteBool(Private);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SettleIndex);
      }
      if (AmtPaid != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(AmtPaid);
      }
      if (AmtPaidSat != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AmtPaidSat);
      }
      if (AmtPaidMsat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AmtPaidMsat);
      }
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) State);
      }
      htlcs_.WriteTo(ref output, _repeated_htlcs_codec);
      if (ValueMsat != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(ValueMsat);
      }
      features_.WriteTo(ref output, _map_features_codec);
      if (IsKeysend != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsKeysend);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (IsAmp != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsAmp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (RPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RPreimage);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (ValueMsat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ValueMsat);
      }
      if (Settled != false) {
        size += 1 + 1;
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      if (SettleDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DescriptionHash);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CltvExpiry);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      if (Private != false) {
        size += 1 + 1;
      }
      if (AddIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (SettleIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SettleIndex);
      }
      if (AmtPaid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaid);
      }
      if (AmtPaidSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaidSat);
      }
      if (AmtPaidMsat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaidMsat);
      }
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      size += features_.CalculateSize(_map_features_codec);
      if (IsKeysend != false) {
        size += 2 + 1;
      }
      if (PaymentAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (IsAmp != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invoice other) {
      if (other == null) {
        return;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.RPreimage.Length != 0) {
        RPreimage = other.RPreimage;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.ValueMsat != 0L) {
        ValueMsat = other.ValueMsat;
      }
      if (other.Settled != false) {
        Settled = other.Settled;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      if (other.SettleDate != 0L) {
        SettleDate = other.SettleDate;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0UL) {
        CltvExpiry = other.CltvExpiry;
      }
      routeHints_.Add(other.routeHints_);
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      if (other.SettleIndex != 0UL) {
        SettleIndex = other.SettleIndex;
      }
      if (other.AmtPaid != 0L) {
        AmtPaid = other.AmtPaid;
      }
      if (other.AmtPaidSat != 0L) {
        AmtPaidSat = other.AmtPaidSat;
      }
      if (other.AmtPaidMsat != 0L) {
        AmtPaidMsat = other.AmtPaidMsat;
      }
      if (other.State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        State = other.State;
      }
      htlcs_.Add(other.htlcs_);
      features_.Add(other.features_);
      if (other.IsKeysend != false) {
        IsKeysend = other.IsKeysend;
      }
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      if (other.IsAmp != false) {
        IsAmp = other.IsAmp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Memo = input.ReadString();
            break;
          }
          case 26: {
            RPreimage = input.ReadBytes();
            break;
          }
          case 34: {
            RHash = input.ReadBytes();
            break;
          }
          case 40: {
            Value = input.ReadInt64();
            break;
          }
          case 48: {
            Settled = input.ReadBool();
            break;
          }
          case 56: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 64: {
            SettleDate = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 82: {
            DescriptionHash = input.ReadBytes();
            break;
          }
          case 88: {
            Expiry = input.ReadInt64();
            break;
          }
          case 98: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 104: {
            CltvExpiry = input.ReadUInt64();
            break;
          }
          case 114: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 120: {
            Private = input.ReadBool();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 136: {
            SettleIndex = input.ReadUInt64();
            break;
          }
          case 144: {
            AmtPaid = input.ReadInt64();
            break;
          }
          case 152: {
            AmtPaidSat = input.ReadInt64();
            break;
          }
          case 160: {
            AmtPaidMsat = input.ReadInt64();
            break;
          }
          case 168: {
            State = (global::Lnrpc.Invoice.Types.InvoiceState) input.ReadEnum();
            break;
          }
          case 178: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
          case 184: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 194: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
          case 200: {
            IsKeysend = input.ReadBool();
            break;
          }
          case 210: {
            PaymentAddr = input.ReadBytes();
            break;
          }
          case 216: {
            IsAmp = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Memo = input.ReadString();
            break;
          }
          case 26: {
            RPreimage = input.ReadBytes();
            break;
          }
          case 34: {
            RHash = input.ReadBytes();
            break;
          }
          case 40: {
            Value = input.ReadInt64();
            break;
          }
          case 48: {
            Settled = input.ReadBool();
            break;
          }
          case 56: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 64: {
            SettleDate = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 82: {
            DescriptionHash = input.ReadBytes();
            break;
          }
          case 88: {
            Expiry = input.ReadInt64();
            break;
          }
          case 98: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 104: {
            CltvExpiry = input.ReadUInt64();
            break;
          }
          case 114: {
            routeHints_.AddEntriesFrom(ref input, _repeated_routeHints_codec);
            break;
          }
          case 120: {
            Private = input.ReadBool();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 136: {
            SettleIndex = input.ReadUInt64();
            break;
          }
          case 144: {
            AmtPaid = input.ReadInt64();
            break;
          }
          case 152: {
            AmtPaidSat = input.ReadInt64();
            break;
          }
          case 160: {
            AmtPaidMsat = input.ReadInt64();
            break;
          }
          case 168: {
            State = (global::Lnrpc.Invoice.Types.InvoiceState) input.ReadEnum();
            break;
          }
          case 178: {
            htlcs_.AddEntriesFrom(ref input, _repeated_htlcs_codec);
            break;
          }
          case 184: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 194: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
          case 200: {
            IsKeysend = input.ReadBool();
            break;
          }
          case 210: {
            PaymentAddr = input.ReadBytes();
            break;
          }
          case 216: {
            IsAmp = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Invoice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InvoiceState {
        [pbr::OriginalName("OPEN")] Open = 0,
        [pbr::OriginalName("SETTLED")] Settled = 1,
        [pbr::OriginalName("CANCELED")] Canceled = 2,
        [pbr::OriginalName("ACCEPTED")] Accepted = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// Details of an HTLC that paid to an invoice
  /// </summary>
  public sealed partial class InvoiceHTLC : pb::IMessage<InvoiceHTLC>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvoiceHTLC> _parser = new pb::MessageParser<InvoiceHTLC>(() => new InvoiceHTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceHTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC(InvoiceHTLC other) : this() {
      chanId_ = other.chanId_;
      htlcIndex_ = other.htlcIndex_;
      amtMsat_ = other.amtMsat_;
      acceptHeight_ = other.acceptHeight_;
      acceptTime_ = other.acceptTime_;
      resolveTime_ = other.resolveTime_;
      expiryHeight_ = other.expiryHeight_;
      state_ = other.state_;
      customRecords_ = other.customRecords_.Clone();
      mppTotalAmtMsat_ = other.mppTotalAmtMsat_;
      amp_ = other.amp_ != null ? other.amp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC Clone() {
      return new InvoiceHTLC(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    /// Short channel id over which the htlc was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "htlc_index" field.</summary>
    public const int HtlcIndexFieldNumber = 2;
    private ulong htlcIndex_;
    /// <summary>
    /// Index identifying the htlc on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcIndex {
      get { return htlcIndex_; }
      set {
        htlcIndex_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 3;
    private ulong amtMsat_;
    /// <summary>
    /// The amount of the htlc in msat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "accept_height" field.</summary>
    public const int AcceptHeightFieldNumber = 4;
    private int acceptHeight_;
    /// <summary>
    /// Block height at which this htlc was accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcceptHeight {
      get { return acceptHeight_; }
      set {
        acceptHeight_ = value;
      }
    }

    /// <summary>Field number for the "accept_time" field.</summary>
    public const int AcceptTimeFieldNumber = 5;
    private long acceptTime_;
    /// <summary>
    /// Time at which this htlc was accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcceptTime {
      get { return acceptTime_; }
      set {
        acceptTime_ = value;
      }
    }

    /// <summary>Field number for the "resolve_time" field.</summary>
    public const int ResolveTimeFieldNumber = 6;
    private long resolveTime_;
    /// <summary>
    /// Time at which this htlc was settled or canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResolveTime {
      get { return resolveTime_; }
      set {
        resolveTime_ = value;
      }
    }

    /// <summary>Field number for the "expiry_height" field.</summary>
    public const int ExpiryHeightFieldNumber = 7;
    private int expiryHeight_;
    /// <summary>
    /// Block height at which this htlc expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpiryHeight {
      get { return expiryHeight_; }
      set {
        expiryHeight_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::Lnrpc.InvoiceHTLCState state_ = global::Lnrpc.InvoiceHTLCState.Accepted;
    /// <summary>
    /// Current state the htlc is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.InvoiceHTLCState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "custom_records" field.</summary>
    public const int CustomRecordsFieldNumber = 9;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_customRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 74);
    private readonly pbc::MapField<ulong, pb::ByteString> customRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    /// Custom tlv records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> CustomRecords {
      get { return customRecords_; }
    }

    /// <summary>Field number for the "mpp_total_amt_msat" field.</summary>
    public const int MppTotalAmtMsatFieldNumber = 10;
    private ulong mppTotalAmtMsat_;
    /// <summary>
    /// The total amount of the mpp payment in msat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MppTotalAmtMsat {
      get { return mppTotalAmtMsat_; }
      set {
        mppTotalAmtMsat_ = value;
      }
    }

    /// <summary>Field number for the "amp" field.</summary>
    public const int AmpFieldNumber = 11;
    private global::Lnrpc.AMP amp_;
    /// <summary>
    /// Details relevant to AMP HTLCs, only populated if this is an AMP HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AMP Amp {
      get { return amp_; }
      set {
        amp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceHTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceHTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (HtlcIndex != other.HtlcIndex) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (AcceptHeight != other.AcceptHeight) return false;
      if (AcceptTime != other.AcceptTime) return false;
      if (ResolveTime != other.ResolveTime) return false;
      if (ExpiryHeight != other.ExpiryHeight) return false;
      if (State != other.State) return false;
      if (!CustomRecords.Equals(other.CustomRecords)) return false;
      if (MppTotalAmtMsat != other.MppTotalAmtMsat) return false;
      if (!object.Equals(Amp, other.Amp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (HtlcIndex != 0UL) hash ^= HtlcIndex.GetHashCode();
      if (AmtMsat != 0UL) hash ^= AmtMsat.GetHashCode();
      if (AcceptHeight != 0) hash ^= AcceptHeight.GetHashCode();
      if (AcceptTime != 0L) hash ^= AcceptTime.GetHashCode();
      if (ResolveTime != 0L) hash ^= ResolveTime.GetHashCode();
      if (ExpiryHeight != 0) hash ^= ExpiryHeight.GetHashCode();
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) hash ^= State.GetHashCode();
      hash ^= CustomRecords.GetHashCode();
      if (MppTotalAmtMsat != 0UL) hash ^= MppTotalAmtMsat.GetHashCode();
      if (amp_ != null) hash ^= Amp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (HtlcIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(HtlcIndex);
      }
      if (AmtMsat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AmtMsat);
      }
      if (AcceptHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AcceptHeight);
      }
      if (AcceptTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AcceptTime);
      }
      if (ResolveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ResolveTime);
      }
      if (ExpiryHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExpiryHeight);
      }
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      customRecords_.WriteTo(output, _map_customRecords_codec);
      if (MppTotalAmtMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(MppTotalAmtMsat);
      }
      if (amp_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Amp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (HtlcIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(HtlcIndex);
      }
      if (AmtMsat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AmtMsat);
      }
      if (AcceptHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AcceptHeight);
      }
      if (AcceptTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AcceptTime);
      }
      if (ResolveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ResolveTime);
      }
      if (ExpiryHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExpiryHeight);
      }
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      customRecords_.WriteTo(ref output, _map_customRecords_codec);
      if (MppTotalAmtMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(MppTotalAmtMsat);
      }
      if (amp_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Amp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (HtlcIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcIndex);
      }
      if (AmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtMsat);
      }
      if (AcceptHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcceptHeight);
      }
      if (AcceptTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcceptTime);
      }
      if (ResolveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResolveTime);
      }
      if (ExpiryHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpiryHeight);
      }
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += customRecords_.CalculateSize(_map_customRecords_codec);
      if (MppTotalAmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MppTotalAmtMsat);
      }
      if (amp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Amp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceHTLC other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.HtlcIndex != 0UL) {
        HtlcIndex = other.HtlcIndex;
      }
      if (other.AmtMsat != 0UL) {
        AmtMsat = other.AmtMsat;
      }
      if (other.AcceptHeight != 0) {
        AcceptHeight = other.AcceptHeight;
      }
      if (other.AcceptTime != 0L) {
        AcceptTime = other.AcceptTime;
      }
      if (other.ResolveTime != 0L) {
        ResolveTime = other.ResolveTime;
      }
      if (other.ExpiryHeight != 0) {
        ExpiryHeight = other.ExpiryHeight;
      }
      if (other.State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        State = other.State;
      }
      customRecords_.Add(other.customRecords_);
      if (other.MppTotalAmtMsat != 0UL) {
        MppTotalAmtMsat = other.MppTotalAmtMsat;
      }
      if (other.amp_ != null) {
        if (amp_ == null) {
          Amp = new global::Lnrpc.AMP();
        }
        Amp.MergeFrom(other.Amp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            HtlcIndex = input.ReadUInt64();
            break;
          }
          case 24: {
            AmtMsat = input.ReadUInt64();
            break;
          }
          case 32: {
            AcceptHeight = input.ReadInt32();
            break;
          }
          case 40: {
            AcceptTime = input.ReadInt64();
            break;
          }
          case 48: {
            ResolveTime = input.ReadInt64();
            break;
          }
          case 56: {
            ExpiryHeight = input.ReadInt32();
            break;
          }
          case 64: {
            State = (global::Lnrpc.InvoiceHTLCState) input.ReadEnum();
            break;
          }
          case 74: {
            customRecords_.AddEntriesFrom(input, _map_customRecords_codec);
            break;
          }
          case 80: {
            MppTotalAmtMsat = input.ReadUInt64();
            break;
          }
          case 90: {
            if (amp_ == null) {
              Amp = new global::Lnrpc.AMP();
            }
            input.ReadMessage(Amp);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            HtlcIndex = input.ReadUInt64();
            break;
          }
          case 24: {
            AmtMsat = input.ReadUInt64();
            break;
          }
          case 32: {
            AcceptHeight = input.ReadInt32();
            break;
          }
          case 40: {
            AcceptTime = input.ReadInt64();
            break;
          }
          case 48: {
            ResolveTime = input.ReadInt64();
            break;
          }
          case 56: {
            ExpiryHeight = input.ReadInt32();
            break;
          }
          case 64: {
            State = (global::Lnrpc.InvoiceHTLCState) input.ReadEnum();
            break;
          }
          case 74: {
            customRecords_.AddEntriesFrom(ref input, _map_customRecords_codec);
            break;
          }
          case 80: {
            MppTotalAmtMsat = input.ReadUInt64();
            break;
          }
          case 90: {
            if (amp_ == null) {
              Amp = new global::Lnrpc.AMP();
            }
            input.ReadMessage(Amp);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Details specific to AMP HTLCs.
  /// </summary>
  public sealed partial class AMP : pb::IMessage<AMP>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AMP> _parser = new pb::MessageParser<AMP>(() => new AMP());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AMP> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMP() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMP(AMP other) : this() {
      rootShare_ = other.rootShare_;
      setId_ = other.setId_;
      childIndex_ = other.childIndex_;
      hash_ = other.hash_;
      preimage_ = other.preimage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AMP Clone() {
      return new AMP(this);
    }

    /// <summary>Field number for the "root_share" field.</summary>
    public const int RootShareFieldNumber = 1;
    private pb::ByteString rootShare_ = pb::ByteString.Empty;
    /// <summary>
    /// An n-of-n secret share of the root seed from which child payment hashes
    /// and preimages are derived.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RootShare {
      get { return rootShare_; }
      set {
        rootShare_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set_id" field.</summary>
    public const int SetIdFieldNumber = 2;
    private pb::ByteString setId_ = pb::ByteString.Empty;
    /// <summary>
    /// An identifier for the HTLC set that this HTLC belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SetId {
      get { return setId_; }
      set {
        setId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "child_index" field.</summary>
    public const int ChildIndexFieldNumber = 3;
    private uint childIndex_;
    /// <summary>
    /// A nonce used to randomize the child preimage and child hash from a given
    /// root_share.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChildIndex {
      get { return childIndex_; }
      set {
        childIndex_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 4;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    /// <summary>
    /// The payment hash of the AMP HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 5;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    /// The preimage used to settle this AMP htlc. This field will only be
    /// populated if the invoice is in InvoiceState_ACCEPTED or
    /// InvoiceState_SETTLED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AMP);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AMP other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootShare != other.RootShare) return false;
      if (SetId != other.SetId) return false;
      if (ChildIndex != other.ChildIndex) return false;
      if (Hash != other.Hash) return false;
      if (Preimage != other.Preimage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootShare.Length != 0) hash ^= RootShare.GetHashCode();
      if (SetId.Length != 0) hash ^= SetId.GetHashCode();
      if (ChildIndex != 0) hash ^= ChildIndex.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RootShare.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RootShare);
      }
      if (SetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SetId);
      }
      if (ChildIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChildIndex);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Hash);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Preimage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RootShare.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RootShare);
      }
      if (SetId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SetId);
      }
      if (ChildIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChildIndex);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Hash);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Preimage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootShare.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootShare);
      }
      if (SetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SetId);
      }
      if (ChildIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChildIndex);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AMP other) {
      if (other == null) {
        return;
      }
      if (other.RootShare.Length != 0) {
        RootShare = other.RootShare;
      }
      if (other.SetId.Length != 0) {
        SetId = other.SetId;
      }
      if (other.ChildIndex != 0) {
        ChildIndex = other.ChildIndex;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RootShare = input.ReadBytes();
            break;
          }
          case 18: {
            SetId = input.ReadBytes();
            break;
          }
          case 24: {
            ChildIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            Hash = input.ReadBytes();
            break;
          }
          case 42: {
            Preimage = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RootShare = input.ReadBytes();
            break;
          }
          case 18: {
            SetId = input.ReadBytes();
            break;
          }
          case 24: {
            ChildIndex = input.ReadUInt32();
            break;
          }
          case 34: {
            Hash = input.ReadBytes();
            break;
          }
          case 42: {
            Preimage = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AddInvoiceResponse : pb::IMessage<AddInvoiceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AddInvoiceResponse> _parser = new pb::MessageParser<AddInvoiceResponse>(() => new AddInvoiceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse(AddInvoiceResponse other) : this() {
      rHash_ = other.rHash_;
      paymentRequest_ = other.paymentRequest_;
      addIndex_ = other.addIndex_;
      paymentAddr_ = other.paymentAddr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse Clone() {
      return new AddInvoiceResponse(this);
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 1;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 2;
    private string paymentRequest_ = "";
    /// <summary>
    ///
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 16;
    private ulong addIndex_;
    /// <summary>
    ///
    ///The "add" index of this invoice. Each newly created invoice will increment
    ///this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all added
    ///invoices with an add_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 17;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The payment address of the generated invoice. This value should be used
    ///in all payments for this invoice as we require it for end to end
    ///security.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHash != other.RHash) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (AddIndex != other.AddIndex) return false;
      if (PaymentAddr != other.PaymentAddr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RHash);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentRequest);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RHash);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentRequest);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (AddIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (PaymentAddr.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddInvoiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 138: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 138: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PaymentHash : pb::IMessage<PaymentHash>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PaymentHash> _parser = new pb::MessageParser<PaymentHash>(() => new PaymentHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash(PaymentHash other) : this() {
      rHashStr_ = other.rHashStr_;
      rHash_ = other.rHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash Clone() {
      return new PaymentHash(this);
    }

    /// <summary>Field number for the "r_hash_str" field.</summary>
    public const int RHashStrFieldNumber = 1;
    private string rHashStr_ = "";
    /// <summary>
    ///
    ///The hex-encoded payment hash of the invoice to be looked up. The passed
    ///payment hash must be exactly 32 bytes, otherwise an error is returned.
    ///Deprecated now that the REST gateway supports base64 encoding of bytes
    ///fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RHashStr {
      get { return rHashStr_; }
      set {
        rHashStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 2;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The payment hash of the invoice to be looked up. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHashStr != other.RHashStr) return false;
      if (RHash != other.RHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHashStr.Length != 0) hash ^= RHashStr.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RHashStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RHashStr);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RHashStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RHashStr);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHashStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RHashStr);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentHash other) {
      if (other == null) {
        return;
      }
      if (other.RHashStr.Length != 0) {
        RHashStr = other.RHashStr;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RHashStr = input.ReadString();
            break;
          }
          case 18: {
            RHash = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RHashStr = input.ReadString();
            break;
          }
          case 18: {
            RHash = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListInvoiceRequest : pb::IMessage<ListInvoiceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListInvoiceRequest> _parser = new pb::MessageParser<ListInvoiceRequest>(() => new ListInvoiceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest(ListInvoiceRequest other) : this() {
      pendingOnly_ = other.pendingOnly_;
      indexOffset_ = other.indexOffset_;
      numMaxInvoices_ = other.numMaxInvoices_;
      reversed_ = other.reversed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest Clone() {
      return new ListInvoiceRequest(this);
    }

    /// <summary>Field number for the "pending_only" field.</summary>
    public const int PendingOnlyFieldNumber = 1;
    private bool pendingOnly_;
    /// <summary>
    ///
    ///If set, only invoices that are not settled and not canceled will be returned
    ///in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PendingOnly {
      get { return pendingOnly_; }
      set {
        pendingOnly_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 4;
    private ulong indexOffset_;
    /// <summary>
    ///
    ///The index of an invoice that will be used as either the start or end of a
    ///query to determine which invoices should be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "num_max_invoices" field.</summary>
    public const int NumMaxInvoicesFieldNumber = 5;
    private ulong numMaxInvoices_;
    /// <summary>
    /// The max number of invoices to return in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumMaxInvoices {
      get { return numMaxInvoices_; }
      set {
        numMaxInvoices_ = value;
      }
    }

    /// <summary>Field number for the "reversed" field.</summary>
    public const int ReversedFieldNumber = 6;
    private bool reversed_;
    /// <summary>
    ///
    ///If set, the invoices returned will result from seeking backwards from the
    ///specified index offset. This can be used to paginate backwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reversed {
      get { return reversed_; }
      set {
        reversed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingOnly != other.PendingOnly) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (NumMaxInvoices != other.NumMaxInvoices) return false;
      if (Reversed != other.Reversed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingOnly != false) hash ^= PendingOnly.GetHashCode();
      if (IndexOffset != 0UL) hash ^= IndexOffset.GetHashCode();
      if (NumMaxInvoices != 0UL) hash ^= NumMaxInvoices.GetHashCode();
      if (Reversed != false) hash ^= Reversed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PendingOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(PendingOnly);
      }
      if (IndexOffset != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(IndexOffset);
      }
      if (NumMaxInvoices != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NumMaxInvoices);
      }
      if (Reversed != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PendingOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(PendingOnly);
      }
      if (IndexOffset != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(IndexOffset);
      }
      if (NumMaxInvoices != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NumMaxInvoices);
      }
      if (Reversed != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingOnly != false) {
        size += 1 + 1;
      }
      if (IndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IndexOffset);
      }
      if (NumMaxInvoices != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumMaxInvoices);
      }
      if (Reversed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.PendingOnly != false) {
        PendingOnly = other.PendingOnly;
      }
      if (other.IndexOffset != 0UL) {
        IndexOffset = other.IndexOffset;
      }
      if (other.NumMaxInvoices != 0UL) {
        NumMaxInvoices = other.NumMaxInvoices;
      }
      if (other.Reversed != false) {
        Reversed = other.Reversed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PendingOnly = input.ReadBool();
            break;
          }
          case 32: {
            IndexOffset = input.ReadUInt64();
            break;
          }
          case 40: {
            NumMaxInvoices = input.ReadUInt64();
            break;
          }
          case 48: {
            Reversed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PendingOnly = input.ReadBool();
            break;
          }
          case 32: {
            IndexOffset = input.ReadUInt64();
            break;
          }
          case 40: {
            NumMaxInvoices = input.ReadUInt64();
            break;
          }
          case 48: {
            Reversed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListInvoiceResponse : pb::IMessage<ListInvoiceResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListInvoiceResponse> _parser = new pb::MessageParser<ListInvoiceResponse>(() => new ListInvoiceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse(ListInvoiceResponse other) : this() {
      invoices_ = other.invoices_.Clone();
      lastIndexOffset_ = other.lastIndexOffset_;
      firstIndexOffset_ = other.firstIndexOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse Clone() {
      return new ListInvoiceResponse(this);
    }

    /// <summary>Field number for the "invoices" field.</summary>
    public const int InvoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Invoice> _repeated_invoices_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Invoice.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Invoice> invoices_ = new pbc::RepeatedField<global::Lnrpc.Invoice>();
    /// <summary>
    ///
    ///A list of invoices from the time slice of the time series specified in the
    ///request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Invoice> Invoices {
      get { return invoices_; }
    }

    /// <summary>Field number for the "last_index_offset" field.</summary>
    public const int LastIndexOffsetFieldNumber = 2;
    private ulong lastIndexOffset_;
    /// <summary>
    ///
    ///The index of the last item in the set of returned invoices. This can be used
    ///to seek further, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastIndexOffset {
      get { return lastIndexOffset_; }
      set {
        lastIndexOffset_ = value;
      }
    }

    /// <summary>Field number for the "first_index_offset" field.</summary>
    public const int FirstIndexOffsetFieldNumber = 3;
    private ulong firstIndexOffset_;
    /// <summary>
    ///
    ///The index of the last item in the set of returned invoices. This can be used
    ///to seek backwards, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstIndexOffset {
      get { return firstIndexOffset_; }
      set {
        firstIndexOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!invoices_.Equals(other.invoices_)) return false;
      if (LastIndexOffset != other.LastIndexOffset) return false;
      if (FirstIndexOffset != other.FirstIndexOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= invoices_.GetHashCode();
      if (LastIndexOffset != 0UL) hash ^= LastIndexOffset.GetHashCode();
      if (FirstIndexOffset != 0UL) hash ^= FirstIndexOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      invoices_.WriteTo(output, _repeated_invoices_codec);
      if (LastIndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LastIndexOffset);
      }
      if (FirstIndexOffset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FirstIndexOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      invoices_.WriteTo(ref output, _repeated_invoices_codec);
      if (LastIndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LastIndexOffset);
      }
      if (FirstIndexOffset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FirstIndexOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += invoices_.CalculateSize(_repeated_invoices_codec);
      if (LastIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastIndexOffset);
      }
      if (FirstIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstIndexOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceResponse other) {
      if (other == null) {
        return;
      }
      invoices_.Add(other.invoices_);
      if (other.LastIndexOffset != 0UL) {
        LastIndexOffset = other.LastIndexOffset;
      }
      if (other.FirstIndexOffset != 0UL) {
        FirstIndexOffset = other.FirstIndexOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            invoices_.AddEntriesFrom(input, _repeated_invoices_codec);
            break;
          }
          case 16: {
            LastIndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            FirstIndexOffset = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            invoices_.AddEntriesFrom(ref input, _repeated_invoices_codec);
            break;
          }
          case 16: {
            LastIndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            FirstIndexOffset = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class InvoiceSubscription : pb::IMessage<InvoiceSubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InvoiceSubscription> _parser = new pb::MessageParser<InvoiceSubscription>(() => new InvoiceSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription(InvoiceSubscription other) : this() {
      addIndex_ = other.addIndex_;
      settleIndex_ = other.settleIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription Clone() {
      return new InvoiceSubscription(this);
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 1;
    private ulong addIndex_;
    /// <summary>
    ///
    ///If specified (non-zero), then we'll first start by sending out
    ///notifications for all added indexes with an add_index greater than this
    ///value. This allows callers to catch up on any events they missed while they
    ///weren't connected to the streaming RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    /// <summary>Field number for the "settle_index" field.</summary>
    public const int SettleIndexFieldNumber = 2;
    private ulong settleIndex_;
    /// <summary>
    ///
    ///If specified (non-zero), then we'll first start by sending out
    ///notifications for all settled indexes with an settle_index greater than
    ///this value. This allows callers to catch up on any events they missed while
    ///they weren't connected to the streaming RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SettleIndex {
      get { return settleIndex_; }
      set {
        settleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddIndex != other.AddIndex) return false;
      if (SettleIndex != other.SettleIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (SettleIndex != 0UL) hash ^= SettleIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (AddIndex != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SettleIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (AddIndex != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SettleIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (SettleIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SettleIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceSubscription other) {
      if (other == null) {
        return;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      if (other.SettleIndex != 0UL) {
        SettleIndex = other.SettleIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 16: {
            SettleIndex = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 16: {
            SettleIndex = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Payment : pb::IMessage<Payment>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment(Payment other) : this() {
      paymentHash_ = other.paymentHash_;
      value_ = other.value_;
      creationDate_ = other.creationDate_;
      fee_ = other.fee_;
      paymentPreimage_ = other.paymentPreimage_;
      valueSat_ = other.valueSat_;
      valueMsat_ = other.valueMsat_;
      paymentRequest_ = other.paymentRequest_;
      status_ = other.status_;
      feeSat_ = other.feeSat_;
      feeMsat_ = other.feeMsat_;
      creationTimeNs_ = other.creationTimeNs_;
      htlcs_ = other.htlcs_.Clone();
      paymentIndex_ = other.paymentIndex_;
      failureReason_ = other.failureReason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment Clone() {
      return new Payment(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private string paymentHash_ = "";
    /// <summary>
    /// The payment hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    /// Deprecated, use value_sat or value_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 3;
    private long creationDate_;
    /// <summary>
    /// Deprecated, use creation_time_ns
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 5;
    private long fee_;
    /// <summary>
    /// Deprecated, use fee_sat or fee_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 6;
    private string paymentPreimage_ = "";
    /// <summary>
    /// The payment preimage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value_sat" field.</summary>
    public const int ValueSatFieldNumber = 7;
    private long valueSat_;
    /// <summary>
    /// The value of the payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueSat {
      get { return valueSat_; }
      set {
        valueSat_ = value;
      }
    }

    /// <summary>Field number for the "value_msat" field.</summary>
    public const int ValueMsatFieldNumber = 8;
    private long valueMsat_;
    /// <summary>
    /// The value of the payment in milli-satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueMsat {
      get { return valueMsat_; }
      set {
        valueMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 9;
    private string paymentRequest_ = "";
    /// <summary>
    /// The optional payment request being fulfilled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Lnrpc.Payment.Types.PaymentStatus status_ = global::Lnrpc.Payment.Types.PaymentStatus.Unknown;
    /// <summary>
    /// The status of the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Payment.Types.PaymentStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "fee_sat" field.</summary>
    public const int FeeSatFieldNumber = 11;
    private long feeSat_;
    /// <summary>
    ///  The fee paid for this payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeSat {
      get { return feeSat_; }
      set {
        feeSat_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 12;
    private long feeMsat_;
    /// <summary>
    ///  The fee paid for this payment in milli-satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "creation_time_ns" field.</summary>
    public const int CreationTimeNsFieldNumber = 13;
    private long creationTimeNs_;
    /// <summary>
    /// The time in UNIX nanoseconds at which the payment was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTimeNs {
      get { return creationTimeNs_; }
      set {
        creationTimeNs_ = value;
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLCAttempt> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(114, global::Lnrpc.HTLCAttempt.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLCAttempt> htlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLCAttempt>();
    /// <summary>
    /// The HTLCs made in attempt to settle the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLCAttempt> Htlcs {
      get { return htlcs_; }
    }

    /// <summary>Field number for the "payment_index" field.</summary>
    public const int PaymentIndexFieldNumber = 15;
    private ulong paymentIndex_;
    /// <summary>
    ///
    ///The creation index of this payment. Each payment can be uniquely identified
    ///by this index, which may not strictly increment by 1 for payments made in
    ///older versions of lnd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PaymentIndex {
      get { return paymentIndex_; }
      set {
        paymentIndex_ = value;
      }
    }

    /// <summary>Field number for the "failure_reason" field.</summary>
    public const int FailureReasonFieldNumber = 16;
    private global::Lnrpc.PaymentFailureReason failureReason_ = global::Lnrpc.PaymentFailureReason.FailureReasonNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PaymentFailureReason FailureReason {
      get { return failureReason_; }
      set {
        failureReason_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (Value != other.Value) return false;
      if (CreationDate != other.CreationDate) return false;
      if (Fee != other.Fee) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      if (ValueSat != other.ValueSat) return false;
      if (ValueMsat != other.ValueMsat) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (Status != other.Status) return false;
      if (FeeSat != other.FeeSat) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (CreationTimeNs != other.CreationTimeNs) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      if (PaymentIndex != other.PaymentIndex) return false;
      if (FailureReason != other.FailureReason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      if (ValueSat != 0L) hash ^= ValueSat.GetHashCode();
      if (ValueMsat != 0L) hash ^= ValueMsat.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) hash ^= Status.GetHashCode();
      if (FeeSat != 0L) hash ^= FeeSat.GetHashCode();
      if (FeeMsat != 0L) hash ^= FeeMsat.GetHashCode();
      if (CreationTimeNs != 0L) hash ^= CreationTimeNs.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      if (PaymentIndex != 0UL) hash ^= PaymentIndex.GetHashCode();
      if (FailureReason != global::Lnrpc.PaymentFailureReason.FailureReasonNone) hash ^= FailureReason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreationDate);
      }
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentPreimage);
      }
      if (ValueSat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ValueSat);
      }
      if (ValueMsat != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ValueMsat);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (FeeSat != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(FeeSat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(FeeMsat);
      }
      if (CreationTimeNs != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CreationTimeNs);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (PaymentIndex != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PaymentIndex);
      }
      if (FailureReason != global::Lnrpc.PaymentFailureReason.FailureReasonNone) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) FailureReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreationDate);
      }
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentPreimage);
      }
      if (ValueSat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ValueSat);
      }
      if (ValueMsat != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ValueMsat);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (FeeSat != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(FeeSat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(FeeMsat);
      }
      if (CreationTimeNs != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CreationTimeNs);
      }
      htlcs_.WriteTo(ref output, _repeated_htlcs_codec);
      if (PaymentIndex != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(PaymentIndex);
      }
      if (FailureReason != global::Lnrpc.PaymentFailureReason.FailureReasonNone) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) FailureReason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentPreimage);
      }
      if (ValueSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueSat);
      }
      if (ValueMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueMsat);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (FeeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeSat);
      }
      if (FeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeMsat);
      }
      if (CreationTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTimeNs);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      if (PaymentIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PaymentIndex);
      }
      if (FailureReason != global::Lnrpc.PaymentFailureReason.FailureReasonNone) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FailureReason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payment other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
      if (other.ValueSat != 0L) {
        ValueSat = other.ValueSat;
      }
      if (other.ValueMsat != 0L) {
        ValueMsat = other.ValueMsat;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        Status = other.Status;
      }
      if (other.FeeSat != 0L) {
        FeeSat = other.FeeSat;
      }
      if (other.FeeMsat != 0L) {
        FeeMsat = other.FeeMsat;
      }
      if (other.CreationTimeNs != 0L) {
        CreationTimeNs = other.CreationTimeNs;
      }
      htlcs_.Add(other.htlcs_);
      if (other.PaymentIndex != 0UL) {
        PaymentIndex = other.PaymentIndex;
      }
      if (other.FailureReason != global::Lnrpc.PaymentFailureReason.FailureReasonNone) {
        FailureReason = other.FailureReason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
          case 24: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 50: {
            PaymentPreimage = input.ReadString();
            break;
          }
          case 56: {
            ValueSat = input.ReadInt64();
            break;
          }
          case 64: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 80: {
            Status = (global::Lnrpc.Payment.Types.PaymentStatus) input.ReadEnum();
            break;
          }
          case 88: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 96: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 104: {
            CreationTimeNs = input.ReadInt64();
            break;
          }
          case 114: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
          case 120: {
            PaymentIndex = input.ReadUInt64();
            break;
          }
          case 128: {
            FailureReason = (global::Lnrpc.PaymentFailureReason) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PaymentHash = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
          case 24: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 50: {
            PaymentPreimage = input.ReadString();
            break;
          }
          case 56: {
            ValueSat = input.ReadInt64();
            break;
          }
          case 64: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 80: {
            Status = (global::Lnrpc.Payment.Types.PaymentStatus) input.ReadEnum();
            break;
          }
          case 88: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 96: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 104: {
            CreationTimeNs = input.ReadInt64();
            break;
          }
          case 114: {
            htlcs_.AddEntriesFrom(ref input, _repeated_htlcs_codec);
            break;
          }
          case 120: {
            PaymentIndex = input.ReadUInt64();
            break;
          }
          case 128: {
            FailureReason = (global::Lnrpc.PaymentFailureReason) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Payment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PaymentStatus {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("IN_FLIGHT")] InFlight = 1,
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 2,
        [pbr::OriginalName("FAILED")] Failed = 3,
      }

    }
    #endregion

  }

  public sealed partial class HTLCAttempt : pb::IMessage<HTLCAttempt>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HTLCAttempt> _parser = new pb::MessageParser<HTLCAttempt>(() => new HTLCAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTLCAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt(HTLCAttempt other) : this() {
      attemptId_ = other.attemptId_;
      status_ = other.status_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      attemptTimeNs_ = other.attemptTimeNs_;
      resolveTimeNs_ = other.resolveTimeNs_;
      failure_ = other.failure_ != null ? other.failure_.Clone() : null;
      preimage_ = other.preimage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt Clone() {
      return new HTLCAttempt(this);
    }

    /// <summary>Field number for the "attempt_id" field.</summary>
    public const int AttemptIdFieldNumber = 7;
    private ulong attemptId_;
    /// <summary>
    /// The unique ID that is used for this attempt.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AttemptId {
      get { return attemptId_; }
      set {
        attemptId_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Lnrpc.HTLCAttempt.Types.HTLCStatus status_ = global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight;
    /// <summary>
    /// The status of the HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.HTLCAttempt.Types.HTLCStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 2;
    private global::Lnrpc.Route route_;
    /// <summary>
    /// The route taken by this HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "attempt_time_ns" field.</summary>
    public const int AttemptTimeNsFieldNumber = 3;
    private long attemptTimeNs_;
    /// <summary>
    /// The time in UNIX nanoseconds at which this HTLC was sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttemptTimeNs {
      get { return attemptTimeNs_; }
      set {
        attemptTimeNs_ = value;
      }
    }

    /// <summary>Field number for the "resolve_time_ns" field.</summary>
    public const int ResolveTimeNsFieldNumber = 4;
    private long resolveTimeNs_;
    /// <summary>
    ///
    ///The time in UNIX nanoseconds at which this HTLC was settled or failed.
    ///This value will not be set if the HTLC is still IN_FLIGHT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResolveTimeNs {
      get { return resolveTimeNs_; }
      set {
        resolveTimeNs_ = value;
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 5;
    private global::Lnrpc.Failure failure_;
    /// <summary>
    /// Detailed htlc failure info.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Failure Failure {
      get { return failure_; }
      set {
        failure_ = value;
      }
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 6;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    /// The preimage that was used to settle the HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTLCAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTLCAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttemptId != other.AttemptId) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if (AttemptTimeNs != other.AttemptTimeNs) return false;
      if (ResolveTimeNs != other.ResolveTimeNs) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      if (Preimage != other.Preimage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttemptId != 0UL) hash ^= AttemptId.GetHashCode();
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) hash ^= Status.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (AttemptTimeNs != 0L) hash ^= AttemptTimeNs.GetHashCode();
      if (ResolveTimeNs != 0L) hash ^= ResolveTimeNs.GetHashCode();
      if (failure_ != null) hash ^= Failure.GetHashCode();
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (route_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Route);
      }
      if (AttemptTimeNs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AttemptTimeNs);
      }
      if (ResolveTimeNs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ResolveTimeNs);
      }
      if (failure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Failure);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Preimage);
      }
      if (AttemptId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AttemptId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (route_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Route);
      }
      if (AttemptTimeNs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AttemptTimeNs);
      }
      if (ResolveTimeNs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ResolveTimeNs);
      }
      if (failure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Failure);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Preimage);
      }
      if (AttemptId != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(AttemptId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttemptId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AttemptId);
      }
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (AttemptTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttemptTimeNs);
      }
      if (ResolveTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResolveTimeNs);
      }
      if (failure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTLCAttempt other) {
      if (other == null) {
        return;
      }
      if (other.AttemptId != 0UL) {
        AttemptId = other.AttemptId;
      }
      if (other.Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        Status = other.Status;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      if (other.AttemptTimeNs != 0L) {
        AttemptTimeNs = other.AttemptTimeNs;
      }
      if (other.ResolveTimeNs != 0L) {
        ResolveTimeNs = other.ResolveTimeNs;
      }
      if (other.failure_ != null) {
        if (failure_ == null) {
          Failure = new global::Lnrpc.Failure();
        }
        Failure.MergeFrom(other.Failure);
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Lnrpc.HTLCAttempt.Types.HTLCStatus) input.ReadEnum();
            break;
          }
          case 18: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
          case 24: {
            AttemptTimeNs = input.ReadInt64();
            break;
          }
          case 32: {
            ResolveTimeNs = input.ReadInt64();
            break;
          }
          case 42: {
            if (failure_ == null) {
              Failure = new global::Lnrpc.Failure();
            }
            input.ReadMessage(Failure);
            break;
          }
          case 50: {
            Preimage = input.ReadBytes();
            break;
          }
          case 56: {
            AttemptId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Status = (global::Lnrpc.HTLCAttempt.Types.HTLCStatus) input.ReadEnum();
            break;
          }
          case 18: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
          case 24: {
            AttemptTimeNs = input.ReadInt64();
            break;
          }
          case 32: {
            ResolveTimeNs = input.ReadInt64();
            break;
          }
          case 42: {
            if (failure_ == null) {
              Failure = new global::Lnrpc.Failure();
            }
            input.ReadMessage(Failure);
            break;
          }
          case 50: {
            Preimage = input.ReadBytes();
            break;
          }
          case 56: {
            AttemptId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the HTLCAttempt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HTLCStatus {
        [pbr::OriginalName("IN_FLIGHT")] InFlight = 0,
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 1,
        [pbr::OriginalName("FAILED")] Failed = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListPaymentsRequest : pb::IMessage<ListPaymentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPaymentsRequest> _parser = new pb::MessageParser<ListPaymentsRequest>(() => new ListPaymentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest(ListPaymentsRequest other) : this() {
      includeIncomplete_ = other.includeIncomplete_;
      indexOffset_ = other.indexOffset_;
      maxPayments_ = other.maxPayments_;
      reversed_ = other.reversed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest Clone() {
      return new ListPaymentsRequest(this);
    }

    /// <summary>Field number for the "include_incomplete" field.</summary>
    public const int IncludeIncompleteFieldNumber = 1;
    private bool includeIncomplete_;
    /// <summary>
    ///
    ///If true, then return payments that have not yet fully completed. This means
    ///that pending payments, as well as failed payments will show up if this
    ///field is set to true. This flag doesn't change the meaning of the indices,
    ///which are tied to individual payments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeIncomplete {
      get { return includeIncomplete_; }
      set {
        includeIncomplete_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 2;
    private ulong indexOffset_;
    /// <summary>
    ///
    ///The index of a payment that will be used as either the start or end of a
    ///query to determine which payments should be returned in the response. The
    ///index_offset is exclusive. In the case of a zero index_offset, the query
    ///will start with the oldest payment when paginating forwards, or will end
    ///with the most recent payment when paginating backwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "max_payments" field.</summary>
    public const int MaxPaymentsFieldNumber = 3;
    private ulong maxPayments_;
    /// <summary>
    /// The maximal number of payments returned in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxPayments {
      get { return maxPayments_; }
      set {
        maxPayments_ = value;
      }
    }

    /// <summary>Field number for the "reversed" field.</summary>
    public const int ReversedFieldNumber = 4;
    private bool reversed_;
    /// <summary>
    ///
    ///If set, the payments returned will result from seeking backwards from the
    ///specified index offset. This can be used to paginate backwards. The order
    ///of the returned payments is always oldest first (ascending index order).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reversed {
      get { return reversed_; }
      set {
        reversed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeIncomplete != other.IncludeIncomplete) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (MaxPayments != other.MaxPayments) return false;
      if (Reversed != other.Reversed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeIncomplete != false) hash ^= IncludeIncomplete.GetHashCode();
      if (IndexOffset != 0UL) hash ^= IndexOffset.GetHashCode();
      if (MaxPayments != 0UL) hash ^= MaxPayments.GetHashCode();
      if (Reversed != false) hash ^= Reversed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (IncludeIncomplete != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeIncomplete);
      }
      if (IndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IndexOffset);
      }
      if (MaxPayments != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxPayments);
      }
      if (Reversed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (IncludeIncomplete != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeIncomplete);
      }
      if (IndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IndexOffset);
      }
      if (MaxPayments != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(MaxPayments);
      }
      if (Reversed != false) {
        output.WriteRawTag(32);
        output.WriteBool(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeIncomplete != false) {
        size += 1 + 1;
      }
      if (IndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IndexOffset);
      }
      if (MaxPayments != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxPayments);
      }
      if (Reversed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeIncomplete != false) {
        IncludeIncomplete = other.IncludeIncomplete;
      }
      if (other.IndexOffset != 0UL) {
        IndexOffset = other.IndexOffset;
      }
      if (other.MaxPayments != 0UL) {
        MaxPayments = other.MaxPayments;
      }
      if (other.Reversed != false) {
        Reversed = other.Reversed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncludeIncomplete = input.ReadBool();
            break;
          }
          case 16: {
            IndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxPayments = input.ReadUInt64();
            break;
          }
          case 32: {
            Reversed = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            IncludeIncomplete = input.ReadBool();
            break;
          }
          case 16: {
            IndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            MaxPayments = input.ReadUInt64();
            break;
          }
          case 32: {
            Reversed = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListPaymentsResponse : pb::IMessage<ListPaymentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPaymentsResponse> _parser = new pb::MessageParser<ListPaymentsResponse>(() => new ListPaymentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse(ListPaymentsResponse other) : this() {
      payments_ = other.payments_.Clone();
      firstIndexOffset_ = other.firstIndexOffset_;
      lastIndexOffset_ = other.lastIndexOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse Clone() {
      return new ListPaymentsResponse(this);
    }

    /// <summary>Field number for the "payments" field.</summary>
    public const int PaymentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Payment> _repeated_payments_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Payment.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Payment> payments_ = new pbc::RepeatedField<global::Lnrpc.Payment>();
    /// <summary>
    /// The list of payments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Payment> Payments {
      get { return payments_; }
    }

    /// <summary>Field number for the "first_index_offset" field.</summary>
    public const int FirstIndexOffsetFieldNumber = 2;
    private ulong firstIndexOffset_;
    /// <summary>
    ///
    ///The index of the first item in the set of returned payments. This can be
    ///used as the index_offset to continue seeking backwards in the next request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstIndexOffset {
      get { return firstIndexOffset_; }
      set {
        firstIndexOffset_ = value;
      }
    }

    /// <summary>Field number for the "last_index_offset" field.</summary>
    public const int LastIndexOffsetFieldNumber = 3;
    private ulong lastIndexOffset_;
    /// <summary>
    ///
    ///The index of the last item in the set of returned payments. This can be used
    ///as the index_offset to continue seeking forwards in the next request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastIndexOffset {
      get { return lastIndexOffset_; }
      set {
        lastIndexOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!payments_.Equals(other.payments_)) return false;
      if (FirstIndexOffset != other.FirstIndexOffset) return false;
      if (LastIndexOffset != other.LastIndexOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= payments_.GetHashCode();
      if (FirstIndexOffset != 0UL) hash ^= FirstIndexOffset.GetHashCode();
      if (LastIndexOffset != 0UL) hash ^= LastIndexOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      payments_.WriteTo(output, _repeated_payments_codec);
      if (FirstIndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FirstIndexOffset);
      }
      if (LastIndexOffset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastIndexOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      payments_.WriteTo(ref output, _repeated_payments_codec);
      if (FirstIndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(FirstIndexOffset);
      }
      if (LastIndexOffset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LastIndexOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += payments_.CalculateSize(_repeated_payments_codec);
      if (FirstIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstIndexOffset);
      }
      if (LastIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastIndexOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsResponse other) {
      if (other == null) {
        return;
      }
      payments_.Add(other.payments_);
      if (other.FirstIndexOffset != 0UL) {
        FirstIndexOffset = other.FirstIndexOffset;
      }
      if (other.LastIndexOffset != 0UL) {
        LastIndexOffset = other.LastIndexOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            payments_.AddEntriesFrom(input, _repeated_payments_codec);
            break;
          }
          case 16: {
            FirstIndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            LastIndexOffset = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            payments_.AddEntriesFrom(ref input, _repeated_payments_codec);
            break;
          }
          case 16: {
            FirstIndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            LastIndexOffset = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteAllPaymentsRequest : pb::IMessage<DeleteAllPaymentsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteAllPaymentsRequest> _parser = new pb::MessageParser<DeleteAllPaymentsRequest>(() => new DeleteAllPaymentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest(DeleteAllPaymentsRequest other) : this() {
      failedPaymentsOnly_ = other.failedPaymentsOnly_;
      failedHtlcsOnly_ = other.failedHtlcsOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest Clone() {
      return new DeleteAllPaymentsRequest(this);
    }

    /// <summary>Field number for the "failed_payments_only" field.</summary>
    public const int FailedPaymentsOnlyFieldNumber = 1;
    private bool failedPaymentsOnly_;
    /// <summary>
    /// Only delete failed payments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailedPaymentsOnly {
      get { return failedPaymentsOnly_; }
      set {
        failedPaymentsOnly_ = value;
      }
    }

    /// <summary>Field number for the "failed_htlcs_only" field.</summary>
    public const int FailedHtlcsOnlyFieldNumber = 2;
    private bool failedHtlcsOnly_;
    /// <summary>
    ///
    ///Only delete failed HTLCs from payments, not the payment itself.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FailedHtlcsOnly {
      get { return failedHtlcsOnly_; }
      set {
        failedHtlcsOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailedPaymentsOnly != other.FailedPaymentsOnly) return false;
      if (FailedHtlcsOnly != other.FailedHtlcsOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FailedPaymentsOnly != false) hash ^= FailedPaymentsOnly.GetHashCode();
      if (FailedHtlcsOnly != false) hash ^= FailedHtlcsOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FailedPaymentsOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(FailedPaymentsOnly);
      }
      if (FailedHtlcsOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(FailedHtlcsOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FailedPaymentsOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(FailedPaymentsOnly);
      }
      if (FailedHtlcsOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(FailedHtlcsOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FailedPaymentsOnly != false) {
        size += 1 + 1;
      }
      if (FailedHtlcsOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.FailedPaymentsOnly != false) {
        FailedPaymentsOnly = other.FailedPaymentsOnly;
      }
      if (other.FailedHtlcsOnly != false) {
        FailedHtlcsOnly = other.FailedHtlcsOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FailedPaymentsOnly = input.ReadBool();
            break;
          }
          case 16: {
            FailedHtlcsOnly = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FailedPaymentsOnly = input.ReadBool();
            break;
          }
          case 16: {
            FailedHtlcsOnly = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteAllPaymentsResponse : pb::IMessage<DeleteAllPaymentsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteAllPaymentsResponse> _parser = new pb::MessageParser<DeleteAllPaymentsResponse>(() => new DeleteAllPaymentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse(DeleteAllPaymentsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse Clone() {
      return new DeleteAllPaymentsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class AbandonChannelRequest : pb::IMessage<AbandonChannelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AbandonChannelRequest> _parser = new pb::MessageParser<AbandonChannelRequest>(() => new AbandonChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbandonChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest(AbandonChannelRequest other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      pendingFundingShimOnly_ = other.pendingFundingShimOnly_;
      iKnowWhatIAmDoing_ = other.iKnowWhatIAmDoing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest Clone() {
      return new AbandonChannelRequest(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    /// <summary>Field number for the "pending_funding_shim_only" field.</summary>
    public const int PendingFundingShimOnlyFieldNumber = 2;
    private bool pendingFundingShimOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PendingFundingShimOnly {
      get { return pendingFundingShimOnly_; }
      set {
        pendingFundingShimOnly_ = value;
      }
    }

    /// <summary>Field number for the "i_know_what_i_am_doing" field.</summary>
    public const int IKnowWhatIAmDoingFieldNumber = 3;
    private bool iKnowWhatIAmDoing_;
    /// <summary>
    ///
    ///Override the requirement for being in dev mode by setting this to true and
    ///confirming the user knows what they are doing and this is a potential foot
    ///gun to lose funds if used on active channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IKnowWhatIAmDoing {
      get { return iKnowWhatIAmDoing_; }
      set {
        iKnowWhatIAmDoing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbandonChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbandonChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      if (PendingFundingShimOnly != other.PendingFundingShimOnly) return false;
      if (IKnowWhatIAmDoing != other.IKnowWhatIAmDoing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (PendingFundingShimOnly != false) hash ^= PendingFundingShimOnly.GetHashCode();
      if (IKnowWhatIAmDoing != false) hash ^= IKnowWhatIAmDoing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (PendingFundingShimOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(PendingFundingShimOnly);
      }
      if (IKnowWhatIAmDoing != false) {
        output.WriteRawTag(24);
        output.WriteBool(IKnowWhatIAmDoing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (PendingFundingShimOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(PendingFundingShimOnly);
      }
      if (IKnowWhatIAmDoing != false) {
        output.WriteRawTag(24);
        output.WriteBool(IKnowWhatIAmDoing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (PendingFundingShimOnly != false) {
        size += 1 + 1;
      }
      if (IKnowWhatIAmDoing != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbandonChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      if (other.PendingFundingShimOnly != false) {
        PendingFundingShimOnly = other.PendingFundingShimOnly;
      }
      if (other.IKnowWhatIAmDoing != false) {
        IKnowWhatIAmDoing = other.IKnowWhatIAmDoing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
          case 16: {
            PendingFundingShimOnly = input.ReadBool();
            break;
          }
          case 24: {
            IKnowWhatIAmDoing = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
          case 16: {
            PendingFundingShimOnly = input.ReadBool();
            break;
          }
          case 24: {
            IKnowWhatIAmDoing = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AbandonChannelResponse : pb::IMessage<AbandonChannelResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AbandonChannelResponse> _parser = new pb::MessageParser<AbandonChannelResponse>(() => new AbandonChannelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbandonChannelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse(AbandonChannelResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse Clone() {
      return new AbandonChannelResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbandonChannelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbandonChannelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbandonChannelResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class DebugLevelRequest : pb::IMessage<DebugLevelRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebugLevelRequest> _parser = new pb::MessageParser<DebugLevelRequest>(() => new DebugLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest(DebugLevelRequest other) : this() {
      show_ = other.show_;
      levelSpec_ = other.levelSpec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest Clone() {
      return new DebugLevelRequest(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "level_spec" field.</summary>
    public const int LevelSpecFieldNumber = 2;
    private string levelSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelSpec {
      get { return levelSpec_; }
      set {
        levelSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (LevelSpec != other.LevelSpec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (LevelSpec.Length != 0) hash ^= LevelSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (LevelSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LevelSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (LevelSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LevelSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (LevelSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      if (other.LevelSpec.Length != 0) {
        LevelSpec = other.LevelSpec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 18: {
            LevelSpec = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 18: {
            LevelSpec = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DebugLevelResponse : pb::IMessage<DebugLevelResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DebugLevelResponse> _parser = new pb::MessageParser<DebugLevelResponse>(() => new DebugLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse(DebugLevelResponse other) : this() {
      subSystems_ = other.subSystems_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse Clone() {
      return new DebugLevelResponse(this);
    }

    /// <summary>Field number for the "sub_systems" field.</summary>
    public const int SubSystemsFieldNumber = 1;
    private string subSystems_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubSystems {
      get { return subSystems_; }
      set {
        subSystems_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubSystems != other.SubSystems) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubSystems.Length != 0) hash ^= SubSystems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SubSystems.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubSystems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SubSystems.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubSystems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubSystems.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubSystems);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.SubSystems.Length != 0) {
        SubSystems = other.SubSystems;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubSystems = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            SubSystems = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PayReqString : pb::IMessage<PayReqString>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PayReqString> _parser = new pb::MessageParser<PayReqString>(() => new PayReqString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReqString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString(PayReqString other) : this() {
      payReq_ = other.payReq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString Clone() {
      return new PayReqString(this);
    }

    /// <summary>Field number for the "pay_req" field.</summary>
    public const int PayReqFieldNumber = 1;
    private string payReq_ = "";
    /// <summary>
    /// The payment request string to be decoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayReq {
      get { return payReq_; }
      set {
        payReq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReqString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReqString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PayReq != other.PayReq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PayReq.Length != 0) hash ^= PayReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PayReq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PayReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PayReq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PayReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PayReq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReqString other) {
      if (other == null) {
        return;
      }
      if (other.PayReq.Length != 0) {
        PayReq = other.PayReq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PayReq = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PayReq = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PayReq : pb::IMessage<PayReq>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PayReq> _parser = new pb::MessageParser<PayReq>(() => new PayReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq(PayReq other) : this() {
      destination_ = other.destination_;
      paymentHash_ = other.paymentHash_;
      numSatoshis_ = other.numSatoshis_;
      timestamp_ = other.timestamp_;
      expiry_ = other.expiry_;
      description_ = other.description_;
      descriptionHash_ = other.descriptionHash_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
      routeHints_ = other.routeHints_.Clone();
      paymentAddr_ = other.paymentAddr_;
      numMsat_ = other.numMsat_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq Clone() {
      return new PayReq(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private string destination_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 2;
    private string paymentHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_satoshis" field.</summary>
    public const int NumSatoshisFieldNumber = 3;
    private long numSatoshis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumSatoshis {
      get { return numSatoshis_; }
      set {
        numSatoshis_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private long expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 7;
    private string descriptionHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 8;
    private string fallbackAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 9;
    private long cltvExpiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 11;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_msat" field.</summary>
    public const int NumMsatFieldNumber = 12;
    private long numMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumMsat {
      get { return numMsat_; }
      set {
        numMsat_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 13;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 106);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (NumSatoshis != other.NumSatoshis) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Expiry != other.Expiry) return false;
      if (Description != other.Description) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (PaymentAddr != other.PaymentAddr) return false;
      if (NumMsat != other.NumMsat) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (NumSatoshis != 0L) hash ^= NumSatoshis.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0L) hash ^= CltvExpiry.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (NumMsat != 0L) hash ^= NumMsat.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumSatoshis);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expiry);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CltvExpiry);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (NumMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(NumMsat);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumSatoshis);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expiry);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CltvExpiry);
      }
      routeHints_.WriteTo(ref output, _repeated_routeHints_codec);
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (NumMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(NumMsat);
      }
      features_.WriteTo(ref output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumSatoshis);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CltvExpiry);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      if (PaymentAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (NumMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumMsat);
      }
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReq other) {
      if (other == null) {
        return;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.NumSatoshis != 0L) {
        NumSatoshis = other.NumSatoshis;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0L) {
        CltvExpiry = other.CltvExpiry;
      }
      routeHints_.Add(other.routeHints_);
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      if (other.NumMsat != 0L) {
        NumMsat = other.NumMsat;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            PaymentHash = input.ReadString();
            break;
          }
          case 24: {
            NumSatoshis = input.ReadInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadInt64();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            DescriptionHash = input.ReadString();
            break;
          }
          case 66: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 72: {
            CltvExpiry = input.ReadInt64();
            break;
          }
          case 82: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
          case 96: {
            NumMsat = input.ReadInt64();
            break;
          }
          case 106: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            PaymentHash = input.ReadString();
            break;
          }
          case 24: {
            NumSatoshis = input.ReadInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadInt64();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            DescriptionHash = input.ReadString();
            break;
          }
          case 66: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 72: {
            CltvExpiry = input.ReadInt64();
            break;
          }
          case 82: {
            routeHints_.AddEntriesFrom(ref input, _repeated_routeHints_codec);
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
          case 96: {
            NumMsat = input.ReadInt64();
            break;
          }
          case 106: {
            features_.AddEntriesFrom(ref input, _map_features_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Feature : pb::IMessage<Feature>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature(Feature other) : this() {
      name_ = other.name_;
      isRequired_ = other.isRequired_;
      isKnown_ = other.isKnown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature Clone() {
      return new Feature(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_required" field.</summary>
    public const int IsRequiredFieldNumber = 3;
    private bool isRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRequired {
      get { return isRequired_; }
      set {
        isRequired_ = value;
      }
    }

    /// <summary>Field number for the "is_known" field.</summary>
    public const int IsKnownFieldNumber = 4;
    private bool isKnown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKnown {
      get { return isKnown_; }
      set {
        isKnown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (IsRequired != other.IsRequired) return false;
      if (IsKnown != other.IsKnown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsRequired != false) hash ^= IsRequired.GetHashCode();
      if (IsKnown != false) hash ^= IsKnown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsRequired != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRequired);
      }
      if (IsKnown != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKnown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsRequired != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRequired);
      }
      if (IsKnown != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKnown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsRequired != false) {
        size += 1 + 1;
      }
      if (IsKnown != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feature other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsRequired != false) {
        IsRequired = other.IsRequired;
      }
      if (other.IsKnown != false) {
        IsKnown = other.IsKnown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsRequired = input.ReadBool();
            break;
          }
          case 32: {
            IsKnown = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsRequired = input.ReadBool();
            break;
          }
          case 32: {
            IsKnown = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FeeReportRequest : pb::IMessage<FeeReportRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FeeReportRequest> _parser = new pb::MessageParser<FeeReportRequest>(() => new FeeReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest(FeeReportRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest Clone() {
      return new FeeReportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelFeeReport : pb::IMessage<ChannelFeeReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelFeeReport> _parser = new pb::MessageParser<ChannelFeeReport>(() => new ChannelFeeReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelFeeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport(ChannelFeeReport other) : this() {
      chanId_ = other.chanId_;
      channelPoint_ = other.channelPoint_;
      baseFeeMsat_ = other.baseFeeMsat_;
      feePerMil_ = other.feePerMil_;
      feeRate_ = other.feeRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport Clone() {
      return new ChannelFeeReport(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 5;
    private ulong chanId_;
    /// <summary>
    /// The short channel id that this fee report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private string channelPoint_ = "";
    /// <summary>
    /// The channel that this fee report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 2;
    private long baseFeeMsat_;
    /// <summary>
    /// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_mil" field.</summary>
    public const int FeePerMilFieldNumber = 3;
    private long feePerMil_;
    /// <summary>
    /// The amount charged per milli-satoshis transferred expressed in
    /// millionths of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerMil {
      get { return feePerMil_; }
      set {
        feePerMil_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    /// The effective fee rate in milli-satoshis. Computed by dividing the
    /// fee_per_mil value by 1 million.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelFeeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelFeeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (ChannelPoint != other.ChannelPoint) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (FeePerMil != other.FeePerMil) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FeeRate, other.FeeRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeePerMil != 0L) hash ^= FeePerMil.GetHashCode();
      if (FeeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FeeRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeePerMil);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeePerMil);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerMil);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelFeeReport other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeePerMil != 0L) {
        FeePerMil = other.FeePerMil;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 16: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 24: {
            FeePerMil = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 16: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 24: {
            FeePerMil = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FeeReportResponse : pb::IMessage<FeeReportResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FeeReportResponse> _parser = new pb::MessageParser<FeeReportResponse>(() => new FeeReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse(FeeReportResponse other) : this() {
      channelFees_ = other.channelFees_.Clone();
      dayFeeSum_ = other.dayFeeSum_;
      weekFeeSum_ = other.weekFeeSum_;
      monthFeeSum_ = other.monthFeeSum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse Clone() {
      return new FeeReportResponse(this);
    }

    /// <summary>Field number for the "channel_fees" field.</summary>
    public const int ChannelFeesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelFeeReport> _repeated_channelFees_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelFeeReport.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> channelFees_ = new pbc::RepeatedField<global::Lnrpc.ChannelFeeReport>();
    /// <summary>
    /// An array of channel fee reports which describes the current fee schedule
    /// for each channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> ChannelFees {
      get { return channelFees_; }
    }

    /// <summary>Field number for the "day_fee_sum" field.</summary>
    public const int DayFeeSumFieldNumber = 2;
    private ulong dayFeeSum_;
    /// <summary>
    /// The total amount of fee revenue (in satoshis) the switch has collected
    /// over the past 24 hrs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DayFeeSum {
      get { return dayFeeSum_; }
      set {
        dayFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "week_fee_sum" field.</summary>
    public const int WeekFeeSumFieldNumber = 3;
    private ulong weekFeeSum_;
    /// <summary>
    /// The total amount of fee revenue (in satoshis) the switch has collected
    /// over the past 1 week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WeekFeeSum {
      get { return weekFeeSum_; }
      set {
        weekFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "month_fee_sum" field.</summary>
    public const int MonthFeeSumFieldNumber = 4;
    private ulong monthFeeSum_;
    /// <summary>
    /// The total amount of fee revenue (in satoshis) the switch has collected
    /// over the past 1 month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonthFeeSum {
      get { return monthFeeSum_; }
      set {
        monthFeeSum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelFees_.Equals(other.channelFees_)) return false;
      if (DayFeeSum != other.DayFeeSum) return false;
      if (WeekFeeSum != other.WeekFeeSum) return false;
      if (MonthFeeSum != other.MonthFeeSum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelFees_.GetHashCode();
      if (DayFeeSum != 0UL) hash ^= DayFeeSum.GetHashCode();
      if (WeekFeeSum != 0UL) hash ^= WeekFeeSum.GetHashCode();
      if (MonthFeeSum != 0UL) hash ^= MonthFeeSum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      channelFees_.WriteTo(output, _repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MonthFeeSum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      channelFees_.WriteTo(ref output, _repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MonthFeeSum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelFees_.CalculateSize(_repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonthFeeSum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportResponse other) {
      if (other == null) {
        return;
      }
      channelFees_.Add(other.channelFees_);
      if (other.DayFeeSum != 0UL) {
        DayFeeSum = other.DayFeeSum;
      }
      if (other.WeekFeeSum != 0UL) {
        WeekFeeSum = other.WeekFeeSum;
      }
      if (other.MonthFeeSum != 0UL) {
        MonthFeeSum = other.MonthFeeSum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channelFees_.AddEntriesFrom(input, _repeated_channelFees_codec);
            break;
          }
          case 16: {
            DayFeeSum = input.ReadUInt64();
            break;
          }
          case 24: {
            WeekFeeSum = input.ReadUInt64();
            break;
          }
          case 32: {
            MonthFeeSum = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            channelFees_.AddEntriesFrom(ref input, _repeated_channelFees_codec);
            break;
          }
          case 16: {
            DayFeeSum = input.ReadUInt64();
            break;
          }
          case 24: {
            WeekFeeSum = input.ReadUInt64();
            break;
          }
          case 32: {
            MonthFeeSum = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PolicyUpdateRequest : pb::IMessage<PolicyUpdateRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyUpdateRequest> _parser = new pb::MessageParser<PolicyUpdateRequest>(() => new PolicyUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest(PolicyUpdateRequest other) : this() {
      baseFeeMsat_ = other.baseFeeMsat_;
      feeRate_ = other.feeRate_;
      timeLockDelta_ = other.timeLockDelta_;
      maxHtlcMsat_ = other.maxHtlcMsat_;
      minHtlcMsat_ = other.minHtlcMsat_;
      minHtlcMsatSpecified_ = other.minHtlcMsatSpecified_;
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          ChanPoint = other.ChanPoint.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest Clone() {
      return new PolicyUpdateRequest(this);
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 1;
    /// <summary>
    /// If set, then this update applies to all currently active channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Global {
      get { return scopeCase_ == ScopeOneofCase.Global ? (bool) scope_ : false; }
      set {
        scope_ = value;
        scopeCase_ = ScopeOneofCase.Global;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    /// <summary>
    /// If set, this update will target a specific channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return scopeCase_ == ScopeOneofCase.ChanPoint ? (global::Lnrpc.ChannelPoint) scope_ : null; }
      set {
        scope_ = value;
        scopeCase_ = value == null ? ScopeOneofCase.None : ScopeOneofCase.ChanPoint;
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 3;
    private long baseFeeMsat_;
    /// <summary>
    /// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    /// The effective fee rate in milli-satoshis. The precision of this value
    /// goes up to 6 decimal places, so 1e-6.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 5;
    private uint timeLockDelta_;
    /// <summary>
    /// The required timelock delta for HTLCs forwarded over the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "max_htlc_msat" field.</summary>
    public const int MaxHtlcMsatFieldNumber = 6;
    private ulong maxHtlcMsat_;
    /// <summary>
    /// If set, the maximum HTLC size in milli-satoshis. If unset, the maximum
    /// HTLC will be unchanged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxHtlcMsat {
      get { return maxHtlcMsat_; }
      set {
        maxHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 7;
    private ulong minHtlcMsat_;
    /// <summary>
    /// The minimum HTLC size in milli-satoshis. Only applied if
    /// min_htlc_msat_specified is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat_specified" field.</summary>
    public const int MinHtlcMsatSpecifiedFieldNumber = 8;
    private bool minHtlcMsatSpecified_;
    /// <summary>
    /// If true, min_htlc_msat is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MinHtlcMsatSpecified {
      get { return minHtlcMsatSpecified_; }
      set {
        minHtlcMsatSpecified_ = value;
      }
    }

    private object scope_;
    /// <summary>Enum of possible cases for the "scope" oneof.</summary>
    public enum ScopeOneofCase {
      None = 0,
      Global = 1,
      ChanPoint = 2,
    }
    private ScopeOneofCase scopeCase_ = ScopeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeOneofCase ScopeCase {
      get { return scopeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScope() {
      scopeCase_ = ScopeOneofCase.None;
      scope_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Global != other.Global) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FeeRate, other.FeeRate)) return false;
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (MaxHtlcMsat != other.MaxHtlcMsat) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (MinHtlcMsatSpecified != other.MinHtlcMsatSpecified) return false;
      if (ScopeCase != other.ScopeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scopeCase_ == ScopeOneofCase.Global) hash ^= Global.GetHashCode();
      if (scopeCase_ == ScopeOneofCase.ChanPoint) hash ^= ChanPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FeeRate);
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (MaxHtlcMsat != 0UL) hash ^= MaxHtlcMsat.GetHashCode();
      if (MinHtlcMsat != 0UL) hash ^= MinHtlcMsat.GetHashCode();
      if (MinHtlcMsatSpecified != false) hash ^= MinHtlcMsatSpecified.GetHashCode();
      hash ^= (int) scopeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (scopeCase_ == ScopeOneofCase.Global) {
        output.WriteRawTag(8);
        output.WriteBool(Global);
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (MinHtlcMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MinHtlcMsat);
      }
      if (MinHtlcMsatSpecified != false) {
        output.WriteRawTag(64);
        output.WriteBool(MinHtlcMsatSpecified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (scopeCase_ == ScopeOneofCase.Global) {
        output.WriteRawTag(8);
        output.WriteBool(Global);
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (MinHtlcMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MinHtlcMsat);
      }
      if (MinHtlcMsatSpecified != false) {
        output.WriteRawTag(64);
        output.WriteBool(MinHtlcMsatSpecified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scopeCase_ == ScopeOneofCase.Global) {
        size += 1 + 1;
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (MaxHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxHtlcMsat);
      }
      if (MinHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlcMsat);
      }
      if (MinHtlcMsatSpecified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.MaxHtlcMsat != 0UL) {
        MaxHtlcMsat = other.MaxHtlcMsat;
      }
      if (other.MinHtlcMsat != 0UL) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.MinHtlcMsatSpecified != false) {
        MinHtlcMsatSpecified = other.MinHtlcMsatSpecified;
      }
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          if (ChanPoint == null) {
            ChanPoint = new global::Lnrpc.ChannelPoint();
          }
          ChanPoint.MergeFrom(other.ChanPoint);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Global = input.ReadBool();
            break;
          }
          case 18: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (scopeCase_ == ScopeOneofCase.ChanPoint) {
              subBuilder.MergeFrom(ChanPoint);
            }
            input.ReadMessage(subBuilder);
            ChanPoint = subBuilder;
            break;
          }
          case 24: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            MinHtlcMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            MinHtlcMsatSpecified = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Global = input.ReadBool();
            break;
          }
          case 18: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (scopeCase_ == ScopeOneofCase.ChanPoint) {
              subBuilder.MergeFrom(ChanPoint);
            }
            input.ReadMessage(subBuilder);
            ChanPoint = subBuilder;
            break;
          }
          case 24: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            MinHtlcMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            MinHtlcMsatSpecified = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PolicyUpdateResponse : pb::IMessage<PolicyUpdateResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PolicyUpdateResponse> _parser = new pb::MessageParser<PolicyUpdateResponse>(() => new PolicyUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse(PolicyUpdateResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse Clone() {
      return new PolicyUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ForwardingHistoryRequest : pb::IMessage<ForwardingHistoryRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForwardingHistoryRequest> _parser = new pb::MessageParser<ForwardingHistoryRequest>(() => new ForwardingHistoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest(ForwardingHistoryRequest other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      indexOffset_ = other.indexOffset_;
      numMaxEvents_ = other.numMaxEvents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest Clone() {
      return new ForwardingHistoryRequest(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private ulong startTime_;
    /// <summary>
    /// Start time is the starting point of the forwarding history request. All
    /// records beyond this point will be included, respecting the end time, and
    /// the index offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private ulong endTime_;
    /// <summary>
    /// End time is the end point of the forwarding history request. The
    /// response will carry at most 50k records between the start time and the
    /// end time. The index offset can be used to implement pagination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 3;
    private uint indexOffset_;
    /// <summary>
    /// Index offset is the offset in the time series to start at. As each
    /// response can only contain 50k records, callers can use this to skip
    /// around within a packed time series.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "num_max_events" field.</summary>
    public const int NumMaxEventsFieldNumber = 4;
    private uint numMaxEvents_;
    /// <summary>
    /// The max number of events to return in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumMaxEvents {
      get { return numMaxEvents_; }
      set {
        numMaxEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (NumMaxEvents != other.NumMaxEvents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (IndexOffset != 0) hash ^= IndexOffset.GetHashCode();
      if (NumMaxEvents != 0) hash ^= NumMaxEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StartTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (IndexOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumMaxEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StartTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (IndexOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumMaxEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (IndexOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumMaxEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.IndexOffset != 0) {
        IndexOffset = other.IndexOffset;
      }
      if (other.NumMaxEvents != 0) {
        NumMaxEvents = other.NumMaxEvents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IndexOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            NumMaxEvents = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IndexOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            NumMaxEvents = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ForwardingEvent : pb::IMessage<ForwardingEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForwardingEvent> _parser = new pb::MessageParser<ForwardingEvent>(() => new ForwardingEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent(ForwardingEvent other) : this() {
      timestamp_ = other.timestamp_;
      chanIdIn_ = other.chanIdIn_;
      chanIdOut_ = other.chanIdOut_;
      amtIn_ = other.amtIn_;
      amtOut_ = other.amtOut_;
      fee_ = other.fee_;
      feeMsat_ = other.feeMsat_;
      amtInMsat_ = other.amtInMsat_;
      amtOutMsat_ = other.amtOutMsat_;
      timestampNs_ = other.timestampNs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent Clone() {
      return new ForwardingEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    /// Timestamp is the time (unix epoch offset) that this circuit was
    /// completed. Deprecated by timestamp_ns.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_in" field.</summary>
    public const int ChanIdInFieldNumber = 2;
    private ulong chanIdIn_;
    /// <summary>
    /// The incoming channel ID that carried the HTLC that created the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdIn {
      get { return chanIdIn_; }
      set {
        chanIdIn_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_out" field.</summary>
    public const int ChanIdOutFieldNumber = 4;
    private ulong chanIdOut_;
    /// <summary>
    /// The outgoing channel ID that carried the preimage that completed the
    /// circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdOut {
      get { return chanIdOut_; }
      set {
        chanIdOut_ = value;
      }
    }

    /// <summary>Field number for the "amt_in" field.</summary>
    public const int AmtInFieldNumber = 5;
    private ulong amtIn_;
    /// <summary>
    /// The total amount (in satoshis) of the incoming HTLC that created half
    /// the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtIn {
      get { return amtIn_; }
      set {
        amtIn_ = value;
      }
    }

    /// <summary>Field number for the "amt_out" field.</summary>
    public const int AmtOutFieldNumber = 6;
    private ulong amtOut_;
    /// <summary>
    /// The total amount (in satoshis) of the outgoing HTLC that created the
    /// second half of the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtOut {
      get { return amtOut_; }
      set {
        amtOut_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 7;
    private ulong fee_;
    /// <summary>
    /// The total fee (in satoshis) that this payment circuit carried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 8;
    private ulong feeMsat_;
    /// <summary>
    /// The total fee (in milli-satoshis) that this payment circuit carried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "amt_in_msat" field.</summary>
    public const int AmtInMsatFieldNumber = 9;
    private ulong amtInMsat_;
    /// <summary>
    /// The total amount (in milli-satoshis) of the incoming HTLC that created
    /// half the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtInMsat {
      get { return amtInMsat_; }
      set {
        amtInMsat_ = value;
      }
    }

    /// <summary>Field number for the "amt_out_msat" field.</summary>
    public const int AmtOutMsatFieldNumber = 10;
    private ulong amtOutMsat_;
    /// <summary>
    /// The total amount (in milli-satoshis) of the outgoing HTLC that created
    /// the second half of the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtOutMsat {
      get { return amtOutMsat_; }
      set {
        amtOutMsat_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_ns" field.</summary>
    public const int TimestampNsFieldNumber = 11;
    private ulong timestampNs_;
    /// <summary>
    /// The number of nanoseconds elapsed since January 1, 1970 UTC when this
    /// circuit was completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TimestampNs {
      get { return timestampNs_; }
      set {
        timestampNs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ChanIdIn != other.ChanIdIn) return false;
      if (ChanIdOut != other.ChanIdOut) return false;
      if (AmtIn != other.AmtIn) return false;
      if (AmtOut != other.AmtOut) return false;
      if (Fee != other.Fee) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (AmtInMsat != other.AmtInMsat) return false;
      if (AmtOutMsat != other.AmtOutMsat) return false;
      if (TimestampNs != other.TimestampNs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (ChanIdIn != 0UL) hash ^= ChanIdIn.GetHashCode();
      if (ChanIdOut != 0UL) hash ^= ChanIdOut.GetHashCode();
      if (AmtIn != 0UL) hash ^= AmtIn.GetHashCode();
      if (AmtOut != 0UL) hash ^= AmtOut.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (FeeMsat != 0UL) hash ^= FeeMsat.GetHashCode();
      if (AmtInMsat != 0UL) hash ^= AmtInMsat.GetHashCode();
      if (AmtOutMsat != 0UL) hash ^= AmtOutMsat.GetHashCode();
      if (TimestampNs != 0UL) hash ^= TimestampNs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AmtIn);
      }
      if (AmtOut != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmtOut);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Fee);
      }
      if (FeeMsat != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FeeMsat);
      }
      if (AmtInMsat != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(AmtInMsat);
      }
      if (AmtOutMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AmtOutMsat);
      }
      if (TimestampNs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TimestampNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AmtIn);
      }
      if (AmtOut != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmtOut);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Fee);
      }
      if (FeeMsat != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FeeMsat);
      }
      if (AmtInMsat != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(AmtInMsat);
      }
      if (AmtOutMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AmtOutMsat);
      }
      if (TimestampNs != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(TimestampNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtIn);
      }
      if (AmtOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtOut);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (FeeMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FeeMsat);
      }
      if (AmtInMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtInMsat);
      }
      if (AmtOutMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtOutMsat);
      }
      if (TimestampNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampNs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingEvent other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.ChanIdIn != 0UL) {
        ChanIdIn = other.ChanIdIn;
      }
      if (other.ChanIdOut != 0UL) {
        ChanIdOut = other.ChanIdOut;
      }
      if (other.AmtIn != 0UL) {
        AmtIn = other.AmtIn;
      }
      if (other.AmtOut != 0UL) {
        AmtOut = other.AmtOut;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.FeeMsat != 0UL) {
        FeeMsat = other.FeeMsat;
      }
      if (other.AmtInMsat != 0UL) {
        AmtInMsat = other.AmtInMsat;
      }
      if (other.AmtOutMsat != 0UL) {
        AmtOutMsat = other.AmtOutMsat;
      }
      if (other.TimestampNs != 0UL) {
        TimestampNs = other.TimestampNs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanIdIn = input.ReadUInt64();
            break;
          }
          case 32: {
            ChanIdOut = input.ReadUInt64();
            break;
          }
          case 40: {
            AmtIn = input.ReadUInt64();
            break;
          }
          case 48: {
            AmtOut = input.ReadUInt64();
            break;
          }
          case 56: {
            Fee = input.ReadUInt64();
            break;
          }
          case 64: {
            FeeMsat = input.ReadUInt64();
            break;
          }
          case 72: {
            AmtInMsat = input.ReadUInt64();
            break;
          }
          case 80: {
            AmtOutMsat = input.ReadUInt64();
            break;
          }
          case 88: {
            TimestampNs = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanIdIn = input.ReadUInt64();
            break;
          }
          case 32: {
            ChanIdOut = input.ReadUInt64();
            break;
          }
          case 40: {
            AmtIn = input.ReadUInt64();
            break;
          }
          case 48: {
            AmtOut = input.ReadUInt64();
            break;
          }
          case 56: {
            Fee = input.ReadUInt64();
            break;
          }
          case 64: {
            FeeMsat = input.ReadUInt64();
            break;
          }
          case 72: {
            AmtInMsat = input.ReadUInt64();
            break;
          }
          case 80: {
            AmtOutMsat = input.ReadUInt64();
            break;
          }
          case 88: {
            TimestampNs = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ForwardingHistoryResponse : pb::IMessage<ForwardingHistoryResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ForwardingHistoryResponse> _parser = new pb::MessageParser<ForwardingHistoryResponse>(() => new ForwardingHistoryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse(ForwardingHistoryResponse other) : this() {
      forwardingEvents_ = other.forwardingEvents_.Clone();
      lastOffsetIndex_ = other.lastOffsetIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse Clone() {
      return new ForwardingHistoryResponse(this);
    }

    /// <summary>Field number for the "forwarding_events" field.</summary>
    public const int ForwardingEventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ForwardingEvent> _repeated_forwardingEvents_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ForwardingEvent.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ForwardingEvent> forwardingEvents_ = new pbc::RepeatedField<global::Lnrpc.ForwardingEvent>();
    /// <summary>
    /// A list of forwarding events from the time slice of the time series
    /// specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ForwardingEvent> ForwardingEvents {
      get { return forwardingEvents_; }
    }

    /// <summary>Field number for the "last_offset_index" field.</summary>
    public const int LastOffsetIndexFieldNumber = 2;
    private uint lastOffsetIndex_;
    /// <summary>
    /// The index of the last time in the set of returned forwarding events. Can
    /// be used to seek further, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffsetIndex {
      get { return lastOffsetIndex_; }
      set {
        lastOffsetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forwardingEvents_.Equals(other.forwardingEvents_)) return false;
      if (LastOffsetIndex != other.LastOffsetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forwardingEvents_.GetHashCode();
      if (LastOffsetIndex != 0) hash ^= LastOffsetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      forwardingEvents_.WriteTo(output, _repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastOffsetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      forwardingEvents_.WriteTo(ref output, _repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastOffsetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += forwardingEvents_.CalculateSize(_repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffsetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryResponse other) {
      if (other == null) {
        return;
      }
      forwardingEvents_.Add(other.forwardingEvents_);
      if (other.LastOffsetIndex != 0) {
        LastOffsetIndex = other.LastOffsetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            forwardingEvents_.AddEntriesFrom(input, _repeated_forwardingEvents_codec);
            break;
          }
          case 16: {
            LastOffsetIndex = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            forwardingEvents_.AddEntriesFrom(ref input, _repeated_forwardingEvents_codec);
            break;
          }
          case 16: {
            LastOffsetIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ExportChannelBackupRequest : pb::IMessage<ExportChannelBackupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExportChannelBackupRequest> _parser = new pb::MessageParser<ExportChannelBackupRequest>(() => new ExportChannelBackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportChannelBackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest(ExportChannelBackupRequest other) : this() {
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest Clone() {
      return new ExportChannelBackupRequest(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    /// The target channel point to obtain a back up for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportChannelBackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportChannelBackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportChannelBackupRequest other) {
      if (other == null) {
        return;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelBackup : pb::IMessage<ChannelBackup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelBackup> _parser = new pb::MessageParser<ChannelBackup>(() => new ChannelBackup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup(ChannelBackup other) : this() {
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      chanBackup_ = other.chanBackup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup Clone() {
      return new ChannelBackup(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    ///
    ///Identifies the channel that this backup belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "chan_backup" field.</summary>
    public const int ChanBackupFieldNumber = 2;
    private pb::ByteString chanBackup_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///Is an encrypted single-chan backup. this can be passed to
    ///RestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in
    ///order to trigger the recovery protocol. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChanBackup {
      get { return chanBackup_; }
      set {
        chanBackup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (ChanBackup != other.ChanBackup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (ChanBackup.Length != 0) hash ^= ChanBackup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (ChanBackup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (ChanBackup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (ChanBackup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackup other) {
      if (other == null) {
        return;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.ChanBackup.Length != 0) {
        ChanBackup = other.ChanBackup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 18: {
            ChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 18: {
            ChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MultiChanBackup : pb::IMessage<MultiChanBackup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiChanBackup> _parser = new pb::MessageParser<MultiChanBackup>(() => new MultiChanBackup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiChanBackup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup(MultiChanBackup other) : this() {
      chanPoints_ = other.chanPoints_.Clone();
      multiChanBackup_ = other.multiChanBackup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup Clone() {
      return new MultiChanBackup(this);
    }

    /// <summary>Field number for the "chan_points" field.</summary>
    public const int ChanPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelPoint> _repeated_chanPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelPoint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelPoint> chanPoints_ = new pbc::RepeatedField<global::Lnrpc.ChannelPoint>();
    /// <summary>
    ///
    ///Is the set of all channels that are included in this multi-channel backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelPoint> ChanPoints {
      get { return chanPoints_; }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackup_FieldNumber = 2;
    private pb::ByteString multiChanBackup_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///A single encrypted blob containing all the static channel backups of the
    ///channel listed above. This can be stored as a single file or blob, and
    ///safely be replaced with any prior/future versions. When using REST, this
    ///field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MultiChanBackup_ {
      get { return multiChanBackup_; }
      set {
        multiChanBackup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiChanBackup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiChanBackup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chanPoints_.Equals(other.chanPoints_)) return false;
      if (MultiChanBackup_ != other.MultiChanBackup_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chanPoints_.GetHashCode();
      if (MultiChanBackup_.Length != 0) hash ^= MultiChanBackup_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      chanPoints_.WriteTo(output, _repeated_chanPoints_codec);
      if (MultiChanBackup_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      chanPoints_.WriteTo(ref output, _repeated_chanPoints_codec);
      if (MultiChanBackup_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chanPoints_.CalculateSize(_repeated_chanPoints_codec);
      if (MultiChanBackup_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MultiChanBackup_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiChanBackup other) {
      if (other == null) {
        return;
      }
      chanPoints_.Add(other.chanPoints_);
      if (other.MultiChanBackup_.Length != 0) {
        MultiChanBackup_ = other.MultiChanBackup_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chanPoints_.AddEntriesFrom(input, _repeated_chanPoints_codec);
            break;
          }
          case 18: {
            MultiChanBackup_ = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            chanPoints_.AddEntriesFrom(ref input, _repeated_chanPoints_codec);
            break;
          }
          case 18: {
            MultiChanBackup_ = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChanBackupExportRequest : pb::IMessage<ChanBackupExportRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChanBackupExportRequest> _parser = new pb::MessageParser<ChanBackupExportRequest>(() => new ChanBackupExportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanBackupExportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest(ChanBackupExportRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest Clone() {
      return new ChanBackupExportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanBackupExportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanBackupExportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanBackupExportRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChanBackupSnapshot : pb::IMessage<ChanBackupSnapshot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChanBackupSnapshot> _parser = new pb::MessageParser<ChanBackupSnapshot>(() => new ChanBackupSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanBackupSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot(ChanBackupSnapshot other) : this() {
      singleChanBackups_ = other.singleChanBackups_ != null ? other.singleChanBackups_.Clone() : null;
      multiChanBackup_ = other.multiChanBackup_ != null ? other.multiChanBackup_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot Clone() {
      return new ChanBackupSnapshot(this);
    }

    /// <summary>Field number for the "single_chan_backups" field.</summary>
    public const int SingleChanBackupsFieldNumber = 1;
    private global::Lnrpc.ChannelBackups singleChanBackups_;
    /// <summary>
    ///
    ///The set of new channels that have been added since the last channel backup
    ///snapshot was requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelBackups SingleChanBackups {
      get { return singleChanBackups_; }
      set {
        singleChanBackups_ = value;
      }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackupFieldNumber = 2;
    private global::Lnrpc.MultiChanBackup multiChanBackup_;
    /// <summary>
    ///
    ///A multi-channel backup that covers all open channels currently known to
    ///lnd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.MultiChanBackup MultiChanBackup {
      get { return multiChanBackup_; }
      set {
        multiChanBackup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanBackupSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanBackupSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleChanBackups, other.SingleChanBackups)) return false;
      if (!object.Equals(MultiChanBackup, other.MultiChanBackup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (singleChanBackups_ != null) hash ^= SingleChanBackups.GetHashCode();
      if (multiChanBackup_ != null) hash ^= MultiChanBackup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (singleChanBackups_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleChanBackups);
      }
      if (multiChanBackup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (singleChanBackups_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleChanBackups);
      }
      if (multiChanBackup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (singleChanBackups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleChanBackups);
      }
      if (multiChanBackup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanBackupSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.singleChanBackups_ != null) {
        if (singleChanBackups_ == null) {
          SingleChanBackups = new global::Lnrpc.ChannelBackups();
        }
        SingleChanBackups.MergeFrom(other.SingleChanBackups);
      }
      if (other.multiChanBackup_ != null) {
        if (multiChanBackup_ == null) {
          MultiChanBackup = new global::Lnrpc.MultiChanBackup();
        }
        MultiChanBackup.MergeFrom(other.MultiChanBackup);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (singleChanBackups_ == null) {
              SingleChanBackups = new global::Lnrpc.ChannelBackups();
            }
            input.ReadMessage(SingleChanBackups);
            break;
          }
          case 18: {
            if (multiChanBackup_ == null) {
              MultiChanBackup = new global::Lnrpc.MultiChanBackup();
            }
            input.ReadMessage(MultiChanBackup);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (singleChanBackups_ == null) {
              SingleChanBackups = new global::Lnrpc.ChannelBackups();
            }
            input.ReadMessage(SingleChanBackups);
            break;
          }
          case 18: {
            if (multiChanBackup_ == null) {
              MultiChanBackup = new global::Lnrpc.MultiChanBackup();
            }
            input.ReadMessage(MultiChanBackup);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelBackups : pb::IMessage<ChannelBackups>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelBackups> _parser = new pb::MessageParser<ChannelBackups>(() => new ChannelBackups());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups(ChannelBackups other) : this() {
      chanBackups_ = other.chanBackups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups Clone() {
      return new ChannelBackups(this);
    }

    /// <summary>Field number for the "chan_backups" field.</summary>
    public const int ChanBackupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelBackup> _repeated_chanBackups_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelBackup.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelBackup> chanBackups_ = new pbc::RepeatedField<global::Lnrpc.ChannelBackup>();
    /// <summary>
    ///
    ///A set of single-chan static channel backups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelBackup> ChanBackups {
      get { return chanBackups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chanBackups_.Equals(other.chanBackups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chanBackups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      chanBackups_.WriteTo(output, _repeated_chanBackups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      chanBackups_.WriteTo(ref output, _repeated_chanBackups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chanBackups_.CalculateSize(_repeated_chanBackups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackups other) {
      if (other == null) {
        return;
      }
      chanBackups_.Add(other.chanBackups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chanBackups_.AddEntriesFrom(input, _repeated_chanBackups_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            chanBackups_.AddEntriesFrom(ref input, _repeated_chanBackups_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RestoreChanBackupRequest : pb::IMessage<RestoreChanBackupRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestoreChanBackupRequest> _parser = new pb::MessageParser<RestoreChanBackupRequest>(() => new RestoreChanBackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreChanBackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest(RestoreChanBackupRequest other) : this() {
      switch (other.BackupCase) {
        case BackupOneofCase.ChanBackups:
          ChanBackups = other.ChanBackups.Clone();
          break;
        case BackupOneofCase.MultiChanBackup:
          MultiChanBackup = other.MultiChanBackup;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest Clone() {
      return new RestoreChanBackupRequest(this);
    }

    /// <summary>Field number for the "chan_backups" field.</summary>
    public const int ChanBackupsFieldNumber = 1;
    /// <summary>
    ///
    ///The channels to restore as a list of channel/backup pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelBackups ChanBackups {
      get { return backupCase_ == BackupOneofCase.ChanBackups ? (global::Lnrpc.ChannelBackups) backup_ : null; }
      set {
        backup_ = value;
        backupCase_ = value == null ? BackupOneofCase.None : BackupOneofCase.ChanBackups;
      }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackupFieldNumber = 2;
    /// <summary>
    ///
    ///The channels to restore in the packed multi backup format. When using
    ///REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MultiChanBackup {
      get { return backupCase_ == BackupOneofCase.MultiChanBackup ? (pb::ByteString) backup_ : pb::ByteString.Empty; }
      set {
        backup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        backupCase_ = BackupOneofCase.MultiChanBackup;
      }
    }

    private object backup_;
    /// <summary>Enum of possible cases for the "backup" oneof.</summary>
    public enum BackupOneofCase {
      None = 0,
      ChanBackups = 1,
      MultiChanBackup = 2,
    }
    private BackupOneofCase backupCase_ = BackupOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupOneofCase BackupCase {
      get { return backupCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBackup() {
      backupCase_ = BackupOneofCase.None;
      backup_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreChanBackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreChanBackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanBackups, other.ChanBackups)) return false;
      if (MultiChanBackup != other.MultiChanBackup) return false;
      if (BackupCase != other.BackupCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (backupCase_ == BackupOneofCase.ChanBackups) hash ^= ChanBackups.GetHashCode();
      if (backupCase_ == BackupOneofCase.MultiChanBackup) hash ^= MultiChanBackup.GetHashCode();
      hash ^= (int) backupCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (backupCase_ == BackupOneofCase.ChanBackups) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanBackups);
      }
      if (backupCase_ == BackupOneofCase.MultiChanBackup) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (backupCase_ == BackupOneofCase.ChanBackups) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanBackups);
      }
      if (backupCase_ == BackupOneofCase.MultiChanBackup) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (backupCase_ == BackupOneofCase.ChanBackups) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanBackups);
      }
      if (backupCase_ == BackupOneofCase.MultiChanBackup) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MultiChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreChanBackupRequest other) {
      if (other == null) {
        return;
      }
      switch (other.BackupCase) {
        case BackupOneofCase.ChanBackups:
          if (ChanBackups == null) {
            ChanBackups = new global::Lnrpc.ChannelBackups();
          }
          ChanBackups.MergeFrom(other.ChanBackups);
          break;
        case BackupOneofCase.MultiChanBackup:
          MultiChanBackup = other.MultiChanBackup;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.ChannelBackups subBuilder = new global::Lnrpc.ChannelBackups();
            if (backupCase_ == BackupOneofCase.ChanBackups) {
              subBuilder.MergeFrom(ChanBackups);
            }
            input.ReadMessage(subBuilder);
            ChanBackups = subBuilder;
            break;
          }
          case 18: {
            MultiChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Lnrpc.ChannelBackups subBuilder = new global::Lnrpc.ChannelBackups();
            if (backupCase_ == BackupOneofCase.ChanBackups) {
              subBuilder.MergeFrom(ChanBackups);
            }
            input.ReadMessage(subBuilder);
            ChanBackups = subBuilder;
            break;
          }
          case 18: {
            MultiChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RestoreBackupResponse : pb::IMessage<RestoreBackupResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RestoreBackupResponse> _parser = new pb::MessageParser<RestoreBackupResponse>(() => new RestoreBackupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreBackupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse(RestoreBackupResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse Clone() {
      return new RestoreBackupResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreBackupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreBackupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreBackupResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ChannelBackupSubscription : pb::IMessage<ChannelBackupSubscription>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelBackupSubscription> _parser = new pb::MessageParser<ChannelBackupSubscription>(() => new ChannelBackupSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackupSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription(ChannelBackupSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription Clone() {
      return new ChannelBackupSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackupSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackupSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackupSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class VerifyChanBackupResponse : pb::IMessage<VerifyChanBackupResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VerifyChanBackupResponse> _parser = new pb::MessageParser<VerifyChanBackupResponse>(() => new VerifyChanBackupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyChanBackupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse(VerifyChanBackupResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse Clone() {
      return new VerifyChanBackupResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyChanBackupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyChanBackupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyChanBackupResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class MacaroonPermission : pb::IMessage<MacaroonPermission>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MacaroonPermission> _parser = new pb::MessageParser<MacaroonPermission>(() => new MacaroonPermission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MacaroonPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission(MacaroonPermission other) : this() {
      entity_ = other.entity_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission Clone() {
      return new MacaroonPermission(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    /// <summary>
    /// The entity a permission grants access to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private string action_ = "";
    /// <summary>
    /// The action that is granted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MacaroonPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MacaroonPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MacaroonPermission other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BakeMacaroonRequest : pb::IMessage<BakeMacaroonRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BakeMacaroonRequest> _parser = new pb::MessageParser<BakeMacaroonRequest>(() => new BakeMacaroonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BakeMacaroonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest(BakeMacaroonRequest other) : this() {
      permissions_ = other.permissions_.Clone();
      rootKeyId_ = other.rootKeyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest Clone() {
      return new BakeMacaroonRequest(this);
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.MacaroonPermission> _repeated_permissions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.MacaroonPermission.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.MacaroonPermission> permissions_ = new pbc::RepeatedField<global::Lnrpc.MacaroonPermission>();
    /// <summary>
    /// The list of permissions the new macaroon should grant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.MacaroonPermission> Permissions {
      get { return permissions_; }
    }

    /// <summary>Field number for the "root_key_id" field.</summary>
    public const int RootKeyIdFieldNumber = 2;
    private ulong rootKeyId_;
    /// <summary>
    /// The root key ID used to create the macaroon, must be a positive integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RootKeyId {
      get { return rootKeyId_; }
      set {
        rootKeyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BakeMacaroonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BakeMacaroonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!permissions_.Equals(other.permissions_)) return false;
      if (RootKeyId != other.RootKeyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= permissions_.GetHashCode();
      if (RootKeyId != 0UL) hash ^= RootKeyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (RootKeyId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RootKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      permissions_.WriteTo(ref output, _repeated_permissions_codec);
      if (RootKeyId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(RootKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (RootKeyId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RootKeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BakeMacaroonRequest other) {
      if (other == null) {
        return;
      }
      permissions_.Add(other.permissions_);
      if (other.RootKeyId != 0UL) {
        RootKeyId = other.RootKeyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
          case 16: {
            RootKeyId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            permissions_.AddEntriesFrom(ref input, _repeated_permissions_codec);
            break;
          }
          case 16: {
            RootKeyId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BakeMacaroonResponse : pb::IMessage<BakeMacaroonResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BakeMacaroonResponse> _parser = new pb::MessageParser<BakeMacaroonResponse>(() => new BakeMacaroonResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BakeMacaroonResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse(BakeMacaroonResponse other) : this() {
      macaroon_ = other.macaroon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse Clone() {
      return new BakeMacaroonResponse(this);
    }

    /// <summary>Field number for the "macaroon" field.</summary>
    public const int MacaroonFieldNumber = 1;
    private string macaroon_ = "";
    /// <summary>
    /// The hex encoded macaroon, serialized in binary format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Macaroon {
      get { return macaroon_; }
      set {
        macaroon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BakeMacaroonResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BakeMacaroonResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Macaroon != other.Macaroon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Macaroon.Length != 0) hash ^= Macaroon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Macaroon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Macaroon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Macaroon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Macaroon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Macaroon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Macaroon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BakeMacaroonResponse other) {
      if (other == null) {
        return;
      }
      if (other.Macaroon.Length != 0) {
        Macaroon = other.Macaroon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Macaroon = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Macaroon = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListMacaroonIDsRequest : pb::IMessage<ListMacaroonIDsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListMacaroonIDsRequest> _parser = new pb::MessageParser<ListMacaroonIDsRequest>(() => new ListMacaroonIDsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMacaroonIDsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsRequest(ListMacaroonIDsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsRequest Clone() {
      return new ListMacaroonIDsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMacaroonIDsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMacaroonIDsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMacaroonIDsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ListMacaroonIDsResponse : pb::IMessage<ListMacaroonIDsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListMacaroonIDsResponse> _parser = new pb::MessageParser<ListMacaroonIDsResponse>(() => new ListMacaroonIDsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListMacaroonIDsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsResponse(ListMacaroonIDsResponse other) : this() {
      rootKeyIds_ = other.rootKeyIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListMacaroonIDsResponse Clone() {
      return new ListMacaroonIDsResponse(this);
    }

    /// <summary>Field number for the "root_key_ids" field.</summary>
    public const int RootKeyIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<ulong> _repeated_rootKeyIds_codec
        = pb::FieldCodec.ForUInt64(10);
    private readonly pbc::RepeatedField<ulong> rootKeyIds_ = new pbc::RepeatedField<ulong>();
    /// <summary>
    /// The list of root key IDs that are in use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<ulong> RootKeyIds {
      get { return rootKeyIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListMacaroonIDsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListMacaroonIDsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rootKeyIds_.Equals(other.rootKeyIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rootKeyIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      rootKeyIds_.WriteTo(output, _repeated_rootKeyIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      rootKeyIds_.WriteTo(ref output, _repeated_rootKeyIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rootKeyIds_.CalculateSize(_repeated_rootKeyIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListMacaroonIDsResponse other) {
      if (other == null) {
        return;
      }
      rootKeyIds_.Add(other.rootKeyIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            rootKeyIds_.AddEntriesFrom(input, _repeated_rootKeyIds_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10:
          case 8: {
            rootKeyIds_.AddEntriesFrom(ref input, _repeated_rootKeyIds_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteMacaroonIDRequest : pb::IMessage<DeleteMacaroonIDRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteMacaroonIDRequest> _parser = new pb::MessageParser<DeleteMacaroonIDRequest>(() => new DeleteMacaroonIDRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteMacaroonIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDRequest(DeleteMacaroonIDRequest other) : this() {
      rootKeyId_ = other.rootKeyId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDRequest Clone() {
      return new DeleteMacaroonIDRequest(this);
    }

    /// <summary>Field number for the "root_key_id" field.</summary>
    public const int RootKeyIdFieldNumber = 1;
    private ulong rootKeyId_;
    /// <summary>
    /// The root key ID to be removed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RootKeyId {
      get { return rootKeyId_; }
      set {
        rootKeyId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteMacaroonIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteMacaroonIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootKeyId != other.RootKeyId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootKeyId != 0UL) hash ^= RootKeyId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RootKeyId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RootKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RootKeyId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(RootKeyId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootKeyId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RootKeyId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteMacaroonIDRequest other) {
      if (other == null) {
        return;
      }
      if (other.RootKeyId != 0UL) {
        RootKeyId = other.RootKeyId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RootKeyId = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RootKeyId = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeleteMacaroonIDResponse : pb::IMessage<DeleteMacaroonIDResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeleteMacaroonIDResponse> _parser = new pb::MessageParser<DeleteMacaroonIDResponse>(() => new DeleteMacaroonIDResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteMacaroonIDResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDResponse(DeleteMacaroonIDResponse other) : this() {
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteMacaroonIDResponse Clone() {
      return new DeleteMacaroonIDResponse(this);
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 1;
    private bool deleted_;
    /// <summary>
    /// A boolean indicates that the deletion is successful.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteMacaroonIDResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteMacaroonIDResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Deleted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Deleted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Deleted != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteMacaroonIDResponse other) {
      if (other == null) {
        return;
      }
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MacaroonPermissionList : pb::IMessage<MacaroonPermissionList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MacaroonPermissionList> _parser = new pb::MessageParser<MacaroonPermissionList>(() => new MacaroonPermissionList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MacaroonPermissionList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermissionList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermissionList(MacaroonPermissionList other) : this() {
      permissions_ = other.permissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermissionList Clone() {
      return new MacaroonPermissionList(this);
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.MacaroonPermission> _repeated_permissions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.MacaroonPermission.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.MacaroonPermission> permissions_ = new pbc::RepeatedField<global::Lnrpc.MacaroonPermission>();
    /// <summary>
    /// A list of macaroon permissions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.MacaroonPermission> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MacaroonPermissionList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MacaroonPermissionList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!permissions_.Equals(other.permissions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= permissions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      permissions_.WriteTo(ref output, _repeated_permissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MacaroonPermissionList other) {
      if (other == null) {
        return;
      }
      permissions_.Add(other.permissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            permissions_.AddEntriesFrom(ref input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListPermissionsRequest : pb::IMessage<ListPermissionsRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPermissionsRequest> _parser = new pb::MessageParser<ListPermissionsRequest>(() => new ListPermissionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPermissionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsRequest(ListPermissionsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsRequest Clone() {
      return new ListPermissionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPermissionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPermissionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPermissionsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class ListPermissionsResponse : pb::IMessage<ListPermissionsResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListPermissionsResponse> _parser = new pb::MessageParser<ListPermissionsResponse>(() => new ListPermissionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPermissionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsResponse(ListPermissionsResponse other) : this() {
      methodPermissions_ = other.methodPermissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPermissionsResponse Clone() {
      return new ListPermissionsResponse(this);
    }

    /// <summary>Field number for the "method_permissions" field.</summary>
    public const int MethodPermissionsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Lnrpc.MacaroonPermissionList>.Codec _map_methodPermissions_codec
        = new pbc::MapField<string, global::Lnrpc.MacaroonPermissionList>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Lnrpc.MacaroonPermissionList.Parser), 10);
    private readonly pbc::MapField<string, global::Lnrpc.MacaroonPermissionList> methodPermissions_ = new pbc::MapField<string, global::Lnrpc.MacaroonPermissionList>();
    /// <summary>
    ///
    ///A map between all RPC method URIs and their required macaroon permissions to
    ///access them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Lnrpc.MacaroonPermissionList> MethodPermissions {
      get { return methodPermissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPermissionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPermissionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!MethodPermissions.Equals(other.MethodPermissions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= MethodPermissions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      methodPermissions_.WriteTo(output, _map_methodPermissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      methodPermissions_.WriteTo(ref output, _map_methodPermissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += methodPermissions_.CalculateSize(_map_methodPermissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPermissionsResponse other) {
      if (other == null) {
        return;
      }
      methodPermissions_.Add(other.methodPermissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            methodPermissions_.AddEntriesFrom(input, _map_methodPermissions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            methodPermissions_.AddEntriesFrom(ref input, _map_methodPermissions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Failure : pb::IMessage<Failure>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Failure> _parser = new pb::MessageParser<Failure>(() => new Failure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Failure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure(Failure other) : this() {
      code_ = other.code_;
      channelUpdate_ = other.channelUpdate_ != null ? other.channelUpdate_.Clone() : null;
      htlcMsat_ = other.htlcMsat_;
      onionSha256_ = other.onionSha256_;
      cltvExpiry_ = other.cltvExpiry_;
      flags_ = other.flags_;
      failureSourceIndex_ = other.failureSourceIndex_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure Clone() {
      return new Failure(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Lnrpc.Failure.Types.FailureCode code_ = global::Lnrpc.Failure.Types.FailureCode.Reserved;
    /// <summary>
    /// Failure code as defined in the Lightning spec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Failure.Types.FailureCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "channel_update" field.</summary>
    public const int ChannelUpdateFieldNumber = 3;
    private global::Lnrpc.ChannelUpdate channelUpdate_;
    /// <summary>
    /// An optional channel update message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelUpdate ChannelUpdate {
      get { return channelUpdate_; }
      set {
        channelUpdate_ = value;
      }
    }

    /// <summary>Field number for the "htlc_msat" field.</summary>
    public const int HtlcMsatFieldNumber = 4;
    private ulong htlcMsat_;
    /// <summary>
    /// A failure type-dependent htlc value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMsat {
      get { return htlcMsat_; }
      set {
        htlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "onion_sha_256" field.</summary>
    public const int OnionSha256FieldNumber = 5;
    private pb::ByteString onionSha256_ = pb::ByteString.Empty;
    /// <summary>
    /// The sha256 sum of the onion payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OnionSha256 {
      get { return onionSha256_; }
      set {
        onionSha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 6;
    private uint cltvExpiry_;
    /// <summary>
    /// A failure type-dependent cltv expiry value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 7;
    private uint flags_;
    /// <summary>
    /// A failure type-dependent flags value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "failure_source_index" field.</summary>
    public const int FailureSourceIndexFieldNumber = 8;
    private uint failureSourceIndex_;
    /// <summary>
    ///
    ///The position in the path of the intermediate or final node that generated
    ///the failure message. Position zero is the sender node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FailureSourceIndex {
      get { return failureSourceIndex_; }
      set {
        failureSourceIndex_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 9;
    private uint height_;
    /// <summary>
    /// A failure type-dependent block height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Failure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Failure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(ChannelUpdate, other.ChannelUpdate)) return false;
      if (HtlcMsat != other.HtlcMsat) return false;
      if (OnionSha256 != other.OnionSha256) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if (Flags != other.Flags) return false;
      if (FailureSourceIndex != other.FailureSourceIndex) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Lnrpc.Failure.Types.FailureCode.Reserved) hash ^= Code.GetHashCode();
      if (channelUpdate_ != null) hash ^= ChannelUpdate.GetHashCode();
      if (HtlcMsat != 0UL) hash ^= HtlcMsat.GetHashCode();
      if (OnionSha256.Length != 0) hash ^= OnionSha256.GetHashCode();
      if (CltvExpiry != 0) hash ^= CltvExpiry.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (FailureSourceIndex != 0) hash ^= FailureSourceIndex.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Code != global::Lnrpc.Failure.Types.FailureCode.Reserved) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (channelUpdate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelUpdate);
      }
      if (HtlcMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(HtlcMsat);
      }
      if (OnionSha256.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(OnionSha256);
      }
      if (CltvExpiry != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CltvExpiry);
      }
      if (Flags != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Flags);
      }
      if (FailureSourceIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FailureSourceIndex);
      }
      if (Height != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Code != global::Lnrpc.Failure.Types.FailureCode.Reserved) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (channelUpdate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelUpdate);
      }
      if (HtlcMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(HtlcMsat);
      }
      if (OnionSha256.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(OnionSha256);
      }
      if (CltvExpiry != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CltvExpiry);
      }
      if (Flags != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Flags);
      }
      if (FailureSourceIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FailureSourceIndex);
      }
      if (Height != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != global::Lnrpc.Failure.Types.FailureCode.Reserved) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (channelUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelUpdate);
      }
      if (HtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMsat);
      }
      if (OnionSha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OnionSha256);
      }
      if (CltvExpiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvExpiry);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (FailureSourceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FailureSourceIndex);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Failure other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Lnrpc.Failure.Types.FailureCode.Reserved) {
        Code = other.Code;
      }
      if (other.channelUpdate_ != null) {
        if (channelUpdate_ == null) {
          ChannelUpdate = new global::Lnrpc.ChannelUpdate();
        }
        ChannelUpdate.MergeFrom(other.ChannelUpdate);
      }
      if (other.HtlcMsat != 0UL) {
        HtlcMsat = other.HtlcMsat;
      }
      if (other.OnionSha256.Length != 0) {
        OnionSha256 = other.OnionSha256;
      }
      if (other.CltvExpiry != 0) {
        CltvExpiry = other.CltvExpiry;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.FailureSourceIndex != 0) {
        FailureSourceIndex = other.FailureSourceIndex;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Lnrpc.Failure.Types.FailureCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (channelUpdate_ == null) {
              ChannelUpdate = new global::Lnrpc.ChannelUpdate();
            }
            input.ReadMessage(ChannelUpdate);
            break;
          }
          case 32: {
            HtlcMsat = input.ReadUInt64();
            break;
          }
          case 42: {
            OnionSha256 = input.ReadBytes();
            break;
          }
          case 48: {
            CltvExpiry = input.ReadUInt32();
            break;
          }
          case 56: {
            Flags = input.ReadUInt32();
            break;
          }
          case 64: {
            FailureSourceIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Code = (global::Lnrpc.Failure.Types.FailureCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (channelUpdate_ == null) {
              ChannelUpdate = new global::Lnrpc.ChannelUpdate();
            }
            input.ReadMessage(ChannelUpdate);
            break;
          }
          case 32: {
            HtlcMsat = input.ReadUInt64();
            break;
          }
          case 42: {
            OnionSha256 = input.ReadBytes();
            break;
          }
          case 48: {
            CltvExpiry = input.ReadUInt32();
            break;
          }
          case 56: {
            Flags = input.ReadUInt32();
            break;
          }
          case 64: {
            FailureSourceIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Failure message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FailureCode {
        /// <summary>
        ///
        ///The numbers assigned in this enumeration match the failure codes as
        ///defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
        ///a RESERVED value is added.
        /// </summary>
        [pbr::OriginalName("RESERVED")] Reserved = 0,
        [pbr::OriginalName("INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS")] IncorrectOrUnknownPaymentDetails = 1,
        [pbr::OriginalName("INCORRECT_PAYMENT_AMOUNT")] IncorrectPaymentAmount = 2,
        [pbr::OriginalName("FINAL_INCORRECT_CLTV_EXPIRY")] FinalIncorrectCltvExpiry = 3,
        [pbr::OriginalName("FINAL_INCORRECT_HTLC_AMOUNT")] FinalIncorrectHtlcAmount = 4,
        [pbr::OriginalName("FINAL_EXPIRY_TOO_SOON")] FinalExpiryTooSoon = 5,
        [pbr::OriginalName("INVALID_REALM")] InvalidRealm = 6,
        [pbr::OriginalName("EXPIRY_TOO_SOON")] ExpiryTooSoon = 7,
        [pbr::OriginalName("INVALID_ONION_VERSION")] InvalidOnionVersion = 8,
        [pbr::OriginalName("INVALID_ONION_HMAC")] InvalidOnionHmac = 9,
        [pbr::OriginalName("INVALID_ONION_KEY")] InvalidOnionKey = 10,
        [pbr::OriginalName("AMOUNT_BELOW_MINIMUM")] AmountBelowMinimum = 11,
        [pbr::OriginalName("FEE_INSUFFICIENT")] FeeInsufficient = 12,
        [pbr::OriginalName("INCORRECT_CLTV_EXPIRY")] IncorrectCltvExpiry = 13,
        [pbr::OriginalName("CHANNEL_DISABLED")] ChannelDisabled = 14,
        [pbr::OriginalName("TEMPORARY_CHANNEL_FAILURE")] TemporaryChannelFailure = 15,
        [pbr::OriginalName("REQUIRED_NODE_FEATURE_MISSING")] RequiredNodeFeatureMissing = 16,
        [pbr::OriginalName("REQUIRED_CHANNEL_FEATURE_MISSING")] RequiredChannelFeatureMissing = 17,
        [pbr::OriginalName("UNKNOWN_NEXT_PEER")] UnknownNextPeer = 18,
        [pbr::OriginalName("TEMPORARY_NODE_FAILURE")] TemporaryNodeFailure = 19,
        [pbr::OriginalName("PERMANENT_NODE_FAILURE")] PermanentNodeFailure = 20,
        [pbr::OriginalName("PERMANENT_CHANNEL_FAILURE")] PermanentChannelFailure = 21,
        [pbr::OriginalName("EXPIRY_TOO_FAR")] ExpiryTooFar = 22,
        [pbr::OriginalName("MPP_TIMEOUT")] MppTimeout = 23,
        [pbr::OriginalName("INVALID_ONION_PAYLOAD")] InvalidOnionPayload = 24,
        /// <summary>
        ///
        ///An internal error occurred.
        /// </summary>
        [pbr::OriginalName("INTERNAL_FAILURE")] InternalFailure = 997,
        /// <summary>
        ///
        ///The error source is known, but the failure itself couldn't be decoded.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_FAILURE")] UnknownFailure = 998,
        /// <summary>
        ///
        ///An unreadable failure result is returned if the received failure message
        ///cannot be decrypted. In that case the error source is unknown.
        /// </summary>
        [pbr::OriginalName("UNREADABLE_FAILURE")] UnreadableFailure = 999,
      }

    }
    #endregion

  }

  public sealed partial class ChannelUpdate : pb::IMessage<ChannelUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ChannelUpdate> _parser = new pb::MessageParser<ChannelUpdate>(() => new ChannelUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate(ChannelUpdate other) : this() {
      signature_ = other.signature_;
      chainHash_ = other.chainHash_;
      chanId_ = other.chanId_;
      timestamp_ = other.timestamp_;
      messageFlags_ = other.messageFlags_;
      channelFlags_ = other.channelFlags_;
      timeLockDelta_ = other.timeLockDelta_;
      htlcMinimumMsat_ = other.htlcMinimumMsat_;
      baseFee_ = other.baseFee_;
      feeRate_ = other.feeRate_;
      htlcMaximumMsat_ = other.htlcMaximumMsat_;
      extraOpaqueData_ = other.extraOpaqueData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate Clone() {
      return new ChannelUpdate(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The signature that validates the announced data and proves the ownership
    ///of node id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 2;
    private pb::ByteString chainHash_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The target chain that this channel was opened within. This value
    ///should be the genesis hash of the target chain. Along with the short
    ///channel ID, this uniquely identifies the channel globally in a
    ///blockchain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 3;
    private ulong chanId_;
    /// <summary>
    ///
    ///The unique description of the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private uint timestamp_;
    /// <summary>
    ///
    ///A timestamp that allows ordering in the case of multiple announcements.
    ///We should ignore the message if timestamp is not greater than the
    ///last-received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "message_flags" field.</summary>
    public const int MessageFlagsFieldNumber = 10;
    private uint messageFlags_;
    /// <summary>
    ///
    ///The bitfield that describes whether optional fields are present in this
    ///update. Currently, the least-significant bit must be set to 1 if the
    ///optional field MaxHtlc is present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageFlags {
      get { return messageFlags_; }
      set {
        messageFlags_ = value;
      }
    }

    /// <summary>Field number for the "channel_flags" field.</summary>
    public const int ChannelFlagsFieldNumber = 5;
    private uint channelFlags_;
    /// <summary>
    ///
    ///The bitfield that describes additional meta-data concerning how the
    ///update is to be interpreted. Currently, the least-significant bit must be
    ///set to 0 if the creating node corresponds to the first node in the
    ///previously sent channel announcement and 1 otherwise. If the second bit
    ///is set, then the channel is set to be disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelFlags {
      get { return channelFlags_; }
      set {
        channelFlags_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 6;
    private uint timeLockDelta_;
    /// <summary>
    ///
    ///The minimum number of blocks this node requires to be added to the expiry
    ///of HTLCs. This is a security parameter determined by the node operator.
    ///This value represents the required gap between the time locks of the
    ///incoming and outgoing HTLC's set to this node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "htlc_minimum_msat" field.</summary>
    public const int HtlcMinimumMsatFieldNumber = 7;
    private ulong htlcMinimumMsat_;
    /// <summary>
    ///
    ///The minimum HTLC value which will be accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMinimumMsat {
      get { return htlcMinimumMsat_; }
      set {
        htlcMinimumMsat_ = value;
      }
    }

    /// <summary>Field number for the "base_fee" field.</summary>
    public const int BaseFeeFieldNumber = 8;
    private uint baseFee_;
    /// <summary>
    ///
    ///The base fee that must be used for incoming HTLC's to this particular
    ///channel. This value will be tacked onto the required for a payment
    ///independent of the size of the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseFee {
      get { return baseFee_; }
      set {
        baseFee_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 9;
    private uint feeRate_;
    /// <summary>
    ///
    ///The fee rate that will be charged per millionth of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    /// <summary>Field number for the "htlc_maximum_msat" field.</summary>
    public const int HtlcMaximumMsatFieldNumber = 11;
    private ulong htlcMaximumMsat_;
    /// <summary>
    ///
    ///The maximum HTLC value which will be accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMaximumMsat {
      get { return htlcMaximumMsat_; }
      set {
        htlcMaximumMsat_ = value;
      }
    }

    /// <summary>Field number for the "extra_opaque_data" field.</summary>
    public const int ExtraOpaqueDataFieldNumber = 12;
    private pb::ByteString extraOpaqueData_ = pb::ByteString.Empty;
    /// <summary>
    ///
    ///The set of data that was appended to this message, some of which we may
    ///not actually know how to iterate or parse. By holding onto this data, we
    ///ensure that we're able to properly validate the set of signatures that
    ///cover these new fields, and ensure we're able to make upgrades to the
    ///network in a forwards compatible manner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraOpaqueData {
      get { return extraOpaqueData_; }
      set {
        extraOpaqueData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (ChainHash != other.ChainHash) return false;
      if (ChanId != other.ChanId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (MessageFlags != other.MessageFlags) return false;
      if (ChannelFlags != other.ChannelFlags) return false;
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (HtlcMinimumMsat != other.HtlcMinimumMsat) return false;
      if (BaseFee != other.BaseFee) return false;
      if (FeeRate != other.FeeRate) return false;
      if (HtlcMaximumMsat != other.HtlcMaximumMsat) return false;
      if (ExtraOpaqueData != other.ExtraOpaqueData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (MessageFlags != 0) hash ^= MessageFlags.GetHashCode();
      if (ChannelFlags != 0) hash ^= ChannelFlags.GetHashCode();
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (HtlcMinimumMsat != 0UL) hash ^= HtlcMinimumMsat.GetHashCode();
      if (BaseFee != 0) hash ^= BaseFee.GetHashCode();
      if (FeeRate != 0) hash ^= FeeRate.GetHashCode();
      if (HtlcMaximumMsat != 0UL) hash ^= HtlcMaximumMsat.GetHashCode();
      if (ExtraOpaqueData.Length != 0) hash ^= ExtraOpaqueData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ChanId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChannelFlags);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeLockDelta);
      }
      if (HtlcMinimumMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(HtlcMinimumMsat);
      }
      if (BaseFee != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BaseFee);
      }
      if (FeeRate != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FeeRate);
      }
      if (MessageFlags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MessageFlags);
      }
      if (HtlcMaximumMsat != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(HtlcMaximumMsat);
      }
      if (ExtraOpaqueData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ExtraOpaqueData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ChanId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChannelFlags);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeLockDelta);
      }
      if (HtlcMinimumMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(HtlcMinimumMsat);
      }
      if (BaseFee != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BaseFee);
      }
      if (FeeRate != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FeeRate);
      }
      if (MessageFlags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MessageFlags);
      }
      if (HtlcMaximumMsat != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(HtlcMaximumMsat);
      }
      if (ExtraOpaqueData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ExtraOpaqueData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChainHash);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (MessageFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageFlags);
      }
      if (ChannelFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelFlags);
      }
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (HtlcMinimumMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMinimumMsat);
      }
      if (BaseFee != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseFee);
      }
      if (FeeRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeRate);
      }
      if (HtlcMaximumMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMaximumMsat);
      }
      if (ExtraOpaqueData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraOpaqueData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.MessageFlags != 0) {
        MessageFlags = other.MessageFlags;
      }
      if (other.ChannelFlags != 0) {
        ChannelFlags = other.ChannelFlags;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.HtlcMinimumMsat != 0UL) {
        HtlcMinimumMsat = other.HtlcMinimumMsat;
      }
      if (other.BaseFee != 0) {
        BaseFee = other.BaseFee;
      }
      if (other.FeeRate != 0) {
        FeeRate = other.FeeRate;
      }
      if (other.HtlcMaximumMsat != 0UL) {
        HtlcMaximumMsat = other.HtlcMaximumMsat;
      }
      if (other.ExtraOpaqueData.Length != 0) {
        ExtraOpaqueData = other.ExtraOpaqueData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 24: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 40: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 56: {
            HtlcMinimumMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            BaseFee = input.ReadUInt32();
            break;
          }
          case 72: {
            FeeRate = input.ReadUInt32();
            break;
          }
          case 80: {
            MessageFlags = input.ReadUInt32();
            break;
          }
          case 88: {
            HtlcMaximumMsat = input.ReadUInt64();
            break;
          }
          case 98: {
            ExtraOpaqueData = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 24: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 40: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 56: {
            HtlcMinimumMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            BaseFee = input.ReadUInt32();
            break;
          }
          case 72: {
            FeeRate = input.ReadUInt32();
            break;
          }
          case 80: {
            MessageFlags = input.ReadUInt32();
            break;
          }
          case 88: {
            HtlcMaximumMsat = input.ReadUInt64();
            break;
          }
          case 98: {
            ExtraOpaqueData = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MacaroonId : pb::IMessage<MacaroonId>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MacaroonId> _parser = new pb::MessageParser<MacaroonId>(() => new MacaroonId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MacaroonId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonId(MacaroonId other) : this() {
      nonce_ = other.nonce_;
      storageId_ = other.storageId_;
      ops_ = other.ops_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonId Clone() {
      return new MacaroonId(this);
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 1;
    private pb::ByteString nonce_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Nonce {
      get { return nonce_; }
      set {
        nonce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "storageId" field.</summary>
    public const int StorageIdFieldNumber = 2;
    private pb::ByteString storageId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StorageId {
      get { return storageId_; }
      set {
        storageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.Op> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.Op.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Op> ops_ = new pbc::RepeatedField<global::Lnrpc.Op>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Op> Ops {
      get { return ops_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MacaroonId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MacaroonId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nonce != other.Nonce) return false;
      if (StorageId != other.StorageId) return false;
      if(!ops_.Equals(other.ops_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nonce.Length != 0) hash ^= Nonce.GetHashCode();
      if (StorageId.Length != 0) hash ^= StorageId.GetHashCode();
      hash ^= ops_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Nonce);
      }
      if (StorageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StorageId);
      }
      ops_.WriteTo(output, _repeated_ops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Nonce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Nonce);
      }
      if (StorageId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StorageId);
      }
      ops_.WriteTo(ref output, _repeated_ops_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nonce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Nonce);
      }
      if (StorageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StorageId);
      }
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MacaroonId other) {
      if (other == null) {
        return;
      }
      if (other.Nonce.Length != 0) {
        Nonce = other.Nonce;
      }
      if (other.StorageId.Length != 0) {
        StorageId = other.StorageId;
      }
      ops_.Add(other.ops_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nonce = input.ReadBytes();
            break;
          }
          case 18: {
            StorageId = input.ReadBytes();
            break;
          }
          case 26: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Nonce = input.ReadBytes();
            break;
          }
          case 18: {
            StorageId = input.ReadBytes();
            break;
          }
          case 26: {
            ops_.AddEntriesFrom(ref input, _repeated_ops_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Op : pb::IMessage<Op>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Op> _parser = new pb::MessageParser<Op>(() => new Op());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Op> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op(Op other) : this() {
      entity_ = other.entity_;
      actions_ = other.actions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Op Clone() {
      return new Op(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "actions" field.</summary>
    public const int ActionsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_actions_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> actions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Actions {
      get { return actions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Op);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Op other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if(!actions_.Equals(other.actions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      hash ^= actions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      actions_.WriteTo(output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      actions_.WriteTo(ref output, _repeated_actions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      size += actions_.CalculateSize(_repeated_actions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Op other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      actions_.Add(other.actions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 18: {
            actions_.AddEntriesFrom(input, _repeated_actions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 18: {
            actions_.AddEntriesFrom(ref input, _repeated_actions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
